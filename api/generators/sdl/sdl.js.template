export const schema = gql`
  type ${singularPascalName} {
    ${query}
  }
<% if (enums.length > 0) {%>
<% enums.forEach((enumDef, idx)=> {%>  enum ${enums[idx].name} {<% enums[idx].values.forEach((enumDefValue, idk)=> { %>
    ${enums[idx].values[idk].name}<% }) %>
  }
<%}) %><% } %>
  type Query {
    ${pluralCamelName}: [${singularPascalName}!]! @requireAuth<% if (crud) { %>
    ${singularCamelName}(cuid: ${idType}!): ${singularPascalName} @requireAuth<% } %>
  }

  input Create${singularPascalName}Input {
    ${createInput}
  }

  input Update${singularPascalName}Input {
    ${updateInput}
  }<% if (crud) { %>

  type Mutation {
    create${singularPascalName}(input: Create${singularPascalName}Input!): ${singularPascalName}! @requireAuth
    update${singularPascalName}(cuid: ${idType}!, input: Update${singularPascalName}Input!): ${singularPascalName}! @requireAuth
    delete${singularPascalName}(cuid: ${idType}!): ${singularPascalName}! @requireAuth
  }<% } %>
`
