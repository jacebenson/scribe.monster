generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  // we default this to sqlite so you can try this before you
  // plugin in a database.. your choices for databse providers
  // are the following
  // PostgreSQL
  // provider = "postgresql"
  // MySQL
  // provider = "mysql"
  // SQLite // probably only for testing
  // provider = "sqlite"
  // url      = "file:./dev.db"
  // MongoDB
  // provider = "mongodb"
  // Microsoft SQL Server

  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url      = env("TEST_DATABASE_URL")
}

model Property {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entity    String   @unique
  type      String   @default("string")
  value     String?
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  String
  entity    String
  value     String

  @@unique([entity, language])
}

model User {
  id                  Int             @id @default(autoincrement())
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  name                String          @default("")
  username            String          @unique @default("") // will have username OR subject keep masked
  verifiedAt          DateTime? //               // used to verify account for password reset purposes and for actual access
  level               String?         @default("free")
  extensionKey        String?         @default("")
  // as anyone with auth0 can say I have access to any domain
  email               String?         @default("") // not needed for accounts.. but is needed for communications
  hashedPassword      String?         @default("") //      // used for dbAuth
  salt                String?         @default("") //      // used for dbAuth
  resetToken          String? //                         // used for dbAuth
  resetTokenExpiresAt DateTime? //                       // used for dbAuth
  GroupMember         GroupMember[]   @relation("UserGroupMember")
  Preference          Preference[]    @relation("UserPreference")
  ScribeReqest        ScribeRequest[]
}

model Preference {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entity    String
  value     String?
  userId    Int
  user      User     @relation("UserPreference", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([entity, userId])
}

model Group {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String        @unique
  description String
  GroupMember GroupMember[]
  GroupRole   GroupRole[]
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation("UserGroupMember", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model GroupRole {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String
  groupId   Int
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([groupId, role])
}

model Log {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  context   Json
  message   String
  source    String
}

//model TrainingData {
//  id         String   @id @default(cuid())
//  createdAt  DateTime @default(now())
//  updatedAt  DateTime @updatedAt()
//  metaData   Json     @default("{}")
//  prompt     String
//  completion String
//  state      String[] @default(["new",""])
//}

model ModelInstance {
  id               String          @id @default(cuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  name             String          @default("")
  version          Float           @default(1)
  description      String          @default("This action")
  endpoint         String          @default("https://api.openai.com/v1/completions")
  required         String          @default("action")
  cost             Float           @default(0.02)
  price            Float           @default(0.20)
  model            String          @default("text-davinci-002")
  prompt           String
  temperature      Float           @default(0.7)
  maxTokens        Int             @default(500)
  topP             Int             @default(1)
  bestOf           Int             @default(1)
  n                Int             @default(1)
  stop             String          @default("END")
  frequencyPenalty Float           @default(0)
  presencePenalty  Float           @default(0)
  ScribeReqest     ScribeRequest[]
}

model ScribeRequest {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  modelInstance   ModelInstance @relation(fields: [modelInstanceId], references: [id])
  modelInstanceId String
  queryTokens     Int?
  responseTokens  Int?
  // totalTokens to be made as calculated field https://tskr.io/cookbooks/add-calculated-fields/
  // estimatedCost Float?  to be made as calculated field https://tskr.io/cookbooks/add-calculated-fields/
}

//model ExtensionSetting {
//  id             String   @id @default(cuid())
//  createdAt      DateTime @default(now())
//  updatedAt      DateTime @updatedAt
//  version        Float    @default(1)
//  dialogFeatures Json[]
//  popoutFeatures Json[]
//}
