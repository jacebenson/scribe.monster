generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Property {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entity    String   @unique
  type      String   @default("string")
  value     String?
}

model Message {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  String
  entity    String
  value     String

  @@unique([entity, language])
}

model User {
  cuid                String          @id @default(cuid())
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  name                String          @default("")
  username            String          @unique @default("")
  verifiedAt          DateTime?
  email               String?         @default("")
  hashedPassword      String?         @default("")
  salt                String?         @default("")
  resetToken          String?
  resetTokenExpiresAt DateTime?
  level               String?         @default("free")
  extensionKey        String?         @default("")
  GroupMember         GroupMember[]   @relation("UserGroupMember")
  Preference          Preference[]    @relation("UserPreference")
  ScribeReqest        ScribeRequest[]
  Prompt              Prompt[]
}

model Preference {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  entity    String
  value     String?
  userCuid  String
  user      User     @relation("UserPreference", fields: [userCuid], references: [cuid], onDelete: Cascade)

  @@unique([entity, userCuid])
  @@index([userCuid])
}

model Group {
  cuid        String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String        @unique
  description String
  GroupMember GroupMember[]
  GroupRole   GroupRole[]
}

model GroupMember {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userCuid  String
  groupCuid String
  group     Group    @relation(fields: [groupCuid], references: [cuid], onDelete: Cascade)
  user      User     @relation("UserGroupMember", fields: [userCuid], references: [cuid], onDelete: Cascade)

  @@unique([userCuid, groupCuid])
  @@index([groupCuid])
  @@index([userCuid])
}

model GroupRole {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String
  groupCuid String
  group     Group    @relation(fields: [groupCuid], references: [cuid], onDelete: Cascade)

  @@unique([groupCuid, role])
  @@index([groupCuid])
}

model Log {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  context   Json
  message   String
  source    String
}

model ModelInstance {
  cuid             String          @id @default(cuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  name             String          @default("")
  version          Float           @default(1)
  description      String          @default("This action")
  endpoint         String          @default("https://api.openai.com/v1/completions")
  cost             Float           @default(0.02)
  price            Float           @default(0.20)
  model            String          @default("text-davinci-002")
  prompt           String
  temperature      Float           @default(0.7)
  maxTokens        Int             @default(500)
  topP             Int             @default(1)
  bestOf           Int             @default(1)
  n                Int             @default(1)
  stop             String          @default("END")
  frequencyPenalty Float           @default(0)
  presencePenalty  Float           @default(0)
  required         String          @default("action")
  ScribeReqest     ScribeRequest[]
}

model ScribeRequest {
  cuid              String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  userCuid          String?
  modelInstanceCuid String
  queryTokens       Int?
  responseTokens    Int?
  modelInstance     ModelInstance @relation(fields: [modelInstanceCuid], references: [cuid])
  user              User?         @relation(fields: [userCuid], references: [cuid])

  @@index([modelInstanceCuid])
  @@index([userCuid])
}

// I want to allow users to store their prompts and responses in the database
// it will be an OPT-IN feature
model Prompt {
  cuid      String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userCuid  String?
  user      User?    @relation(fields: [userCuid], references: [cuid])
  prompt    String
  action    String   @default("")
  response  String?

  @@index([userCuid])
}
