import { MetaTags, useMutation } from '@redwoodjs/web'
import { toast } from '@redwoodjs/web/toast'
import { navigate, routes } from '@redwoodjs/router'
import { Fragment } from 'react'
import { useForm } from 'react-hook-form'
import FormComponent from 'src/components/FormComponent'

import ${singularPascalName}Form from '${importComponentNameForm}'

const CREATE_${singularConstantName}_MUTATION = gql`
  mutation Create${singularPascalName}Mutation($input: Create${singularPascalName}Input!) {
    create${singularPascalName}(input: $input) {
      id
    }
  }
`

const New${singularPascalName} = () => {
  const [create${singularPascalName}, { loading, error }] = useMutation(CREATE_${singularConstantName}_MUTATION, {
    onCompleted: () => {
      toast.success('${singularPascalName} created')
      navigate(routes.${pluralRouteName}())
    },
    onError: (error) => {
      toast.error(error.message)
    },
  })

  const onSubmit = (data) => {
    onSave(data)
  }

  const onSave = (input) => {<% if (intForeignKeys.length) { %>
    const castInput = Object.assign(input, { <% intForeignKeys.forEach(key => { %>${key}: parseInt(input.${key}), <% }) %>})<% } %>
    create${singularPascalName}({ variables: { <% if (intForeignKeys.length) { %>input: castInput<% } else { %>input<% } %> } })
  }
  const fields = [
  <% editableColumns.forEach(column => { %>{
      name: '<%= column.name %>',
      prettyName: '<%= column.label %>',
      <% if (column.default){ %>defaultValue: '<%= column.default %>',<%}%>
      <% if (column.type === "Boolean"){ %>type: 'boolean'<%}%><% if(column.isRequired && column.type !== "Boolean") { %>required: 'This is required',<% } %>
      <% if (column.type === "Int" && column.isId === false){ %>// If this is a reference you probably want this below
      // uncomment and edit below to your needs
      // type: 'reference',
      // display: 'name',
      // value: 'id',
      // QUERY: gql`
      //   query Find${column.name}HereFrom${pluralPascalName}(
      //     $filter: String
      //     $skip: Int
      //   ) {
      //     search: removethisdot.referencedPluralModelHere(filter: $filter, skip: $skip) {
      //       count
      //       take
      //       skip
      //       results {
      //         id
      //         name
      //       }
      //     }
      //   }
      // `,
      <%}%>
    }, <% }) %>
  ]

  const roles = {
    update: ['${singularCamelName}Update'],
    delete: ['${singularCamelName}Delete'],
  }
  const {
    handleSubmit,
    register,
    formState: { errors, isSubmitting },
  } = useForm()
  return (
    <Fragment>
      <MetaTags
        title="New ${singularPascalName}"
        description="New ${singularPascalName} form"
        /* you should un-comment description and add a unique description, 155 characters or less
      You can look at this documentation for best practices : https://developers.google.com/search/docs/advanced/appearance/good-titles-snippets */
      />
      <FormComponent
        fields={fields}
        roles={roles}
        onSubmit={onSubmit}
        loading={loading}
        error={error}
        returnLink={routes.${pluralRouteName}()}
        handleSubmit={handleSubmit}
        register={register}
        formState={{ errors, isSubmitting }}
      />
    </Fragment>
  )
}

export default New${singularPascalName}
