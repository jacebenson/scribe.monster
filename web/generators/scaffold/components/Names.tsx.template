import { routes } from '@redwoodjs/router'
import { Fragment, useState } from 'react'
import ${pluralPascalName}Cell from '${importComponentNamesCell}'
import { showMatching, filterOut } from '/src/lib/atomicFunctions'
export const initialColumns = [
<% columns.forEach(column => { %>
  {
  Header: '${column.label}',
  accessor: '${column.name}',
  showMatching,
  filterOut,<% if (column.isId){ %>link: (givenId) => {
    return routes.${singularRouteName}({ id: givenId })
  },<% } %>
  <% if (column.type === "Int"){ %>dataType: 'integer',<% } %><% if (column.type === "DateTime"){ %>dataType: 'timestamp',<% } %><% if (column.type === "Boolean"){ %>dataType: 'boolean',<% } %>
  <% if (column.type === "Int" && column.isId === false){ %>// If this is a reference
    // you may want to show a field
    // instead of the number here.
    // to do that remove type,
    // updated your query on the cell to include the model
    // update the accessor to a name not used by a column
    // and add;
    // canSort: false,
    // reference: true,
    // model: '_insertSingularModelHere_',
    // field: '_fieldFromModelHere_',
    // link: (givenId) => {
    //   // e.g. return routes._insertPluralModelHere_({ q: {"id": givenId}})
    //   // e.g. return routes.users({ q: `{"id": <% (()=>{ return "\${givenId}" })() %>}` })// link to a list w/the query
    //   // e.g. return routes.user({ q: `{"id": <% (()=>{ return "\${givenId}" })() %>}` })// link to the record
    // },<% } %>
  },
<% }) %>
  {
    Header: 'Actions',
    accessor: 'actions',
    canSort: false,
    canRemove: false,
    canReset: true,
    canExport: true,
    canSetTake: true,
  },
]

const ${pluralPascalName}List = () => {
  let [orderBy, setOrderBy] = useState({ id: 'asc' }) // default order
  let [columns, setColumns] = useState(initialColumns) // default columns
  let [skip, setSkip] = useState(0) // default reocrds to jump
  let [take, setTake] = useState(10) // default records to take
  let [query, setQuery] = useState(/*{ entity: 'email' }*/) // default query
  let [fuzzyQuery, setFuzzyQuery] = useState('') // default fuzzy query
  let roles = {
    createRecord: '${singularPascalName.toLowerCase()}Create',
    updateRecord: '${singularPascalName.toLowerCase()}Update',
    deleteRecord: '${singularPascalName.toLowerCase()}Delete',
  }
  return (
    <Fragment>
      <${pluralPascalName}Cell
        orderBy={orderBy}
        setOrderBy={setOrderBy}
        columns={columns}
        setColumns={setColumns}
        initialColumns={initialColumns}
        take={take}
        setTake={setTake}
        skip={skip}
        setSkip={setSkip}
        query={query}
        setQuery={setQuery}
        fuzzyQuery={fuzzyQuery}
        setFuzzyQuery={setFuzzyQuery}
        displayColumn="id"
        roles={roles}
      />
    </Fragment>
  )
}

export default ${pluralPascalName}List
