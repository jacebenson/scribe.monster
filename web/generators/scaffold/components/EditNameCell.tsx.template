import type { Edit${singularPascalName}ById } from 'types/graphql'

import type { CellSuccessProps, CellFailureProps } from '@redwoodjs/web'
import { MetaTags, useMutation } from '@redwoodjs/web'
import { toast } from '@redwoodjs/web/toast'
import { navigate, routes } from '@redwoodjs/router'
import FormComponent from 'src/components/FormComponent'
import { useForm } from 'react-hook-form'
import { Fragment, useState } from 'react'

import ${singularPascalName}Form from '${importComponentNameForm}'

export const QUERY = gql`
  query Edit${singularPascalName}ById($id: ${idType}!) {
    ${singularCamelName}: ${singularCamelName}(id: $id) {<% columns.forEach(column => { %>
      <%= column.name %><% }) %>
    }
  }
`
const UPDATE_${singularConstantName}_MUTATION = gql`
  mutation Update${singularPascalName}Mutation($id: ${idType}!, $input: Update${singularPascalName}Input!) {
    update${singularPascalName}(id: $id, input: $input) {<% columns.forEach(column => { %>
      <%= column.name %><% }) %>
    }
  }
`
export const DELETE_${singularConstantName}_MUTATION = gql`
  mutation Delete${singularPascalName}Mutation($id: Int!) {
    deletedRow: delete${singularPascalName}(id: $id) {
      id
    }
  }
`

export const Loading = () => <div>Loading...</div>

export const Failure = ({ error }: CellFailureProps) => (
  <div className="rw-cell-error">{error.message}</div>
)

export const Success = ({ ${singularCamelName} }: CellSuccessProps<Edit${singularPascalName}ById>) => {
  const [update${singularPascalName}, { loading, error }] = useMutation(UPDATE_${singularConstantName}_MUTATION, {
    onCompleted: () => {
      toast.success('${singularPascalName} updated')
      navigate(routes.${pluralRouteName}())
    },
    onError: (error) => {
      toast.error(error.message)
    },
  })

  const onSubmit = (data) => {
    onSave(data, ${singularCamelName}.id)
  }
  const onSave = (input, id) => {<% if (intForeignKeys.length) { %>
    const castInput = Object.assign(input, { <% intForeignKeys.forEach(key => { %>${key}: parseInt(input.${key}), <% }) %>})<% } %>
    update${singularPascalName}({ variables: { id, <% if (intForeignKeys.length) { %>input: castInput<% } else { %>input<% } %> } })
  }

  const [delete${singularPascalName}] = useMutation(DELETE_${singularConstantName}_MUTATION, {
    onCompleted: () => {
      toast.success('${singularPascalName} deleted')
      navigate(routes.${pluralRouteName}())
    },
  })

  const onDelete = (id) => {
    if (confirm('Are you sure you want to delete ${singularPascalName} ' + id + '?')) {
      delete${singularPascalName}({ variables: { id } })
    }
  }
  const fields = [
      <% editableColumns.forEach(column => { %>{
      name: '<%= column.name %>',
      prettyName: '<%= column.label %>',
      <% if (column.type === "Boolean"){ %>type: 'boolean'<%}%><% if(column.isRequired && column.type !== "Boolean") { %>required: 'This is required',<% } %>
      <% if (column.type === "Int" && column.isId === false){ %>// If this is a reference you probably want this below
      // update the query above "Edit${singularPascalName}ById"
      // to include the referenced data
      // and uncomment and edit below to your needs
      // type: 'reference',
      // display: 'name',
      // value: 'id',
      // defaultValue: ${singularPascalName.toLowerCase()}._referencedModelHere_.id,
      // defaultDisplay: ${singularPascalName.toLowerCase()}._referencedModelHere_._displayColumn_,
      // QUERY: gql`
      //   query Find_referencedModelHere_From${pluralPascalName}(
      //     $filter: String
      //     $skip: Int
      //     $take: Int
      //   ) {
      //     search: _referencedPluralModelHere_(filter: $filter, skip: $skip, take: $take) {
      //       count
      //       take
      //       skip
      //       results {
      //         id
      //         name
      //       }
      //     }
      //   }
      // `,
      <%}%>
    }, <% }) %>
  ]

  const roles = {
    update: ['${singularCamelName}Update'],
    delete: ['${singularCamelName}Delete'],
  }
   const {
    handleSubmit,
    register,
    formState: { errors, isSubmitting },
  } = useForm()
  return (
    <Fragment>
      <MetaTags
        title={`${singularCamelName}.id`}
        description="Replace me with 155 charactes about this page"
        />
      <FormComponent
        record={${singularCamelName}}
        fields={fields}
        roles={roles}
        onSubmit={onSubmit}
        onDelete={onDelete}
        loading={loading}
        error={error}
        returnLink={routes.${pluralRouteName}()}
        handleSubmit={handleSubmit}
        register={register}
        formState={{ errors, isSubmitting }}
      />
    </Fragment>

  )
}
