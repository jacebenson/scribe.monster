{"prompt": "Table:Incident\nType:onLoad\nPrompt:Rename the phone field to \"contact number\"\nResponse:","completion": "function onLoad() {\n  g_form.setLabelOf('phone', 'Contact Number');\n}\n"}
{"prompt": "Table:Change\nType:onLoad\nPrompt:Change the Caller's field label to Contact\nResponse:","completion": "function onLoad() {\n  g_form.setLabelOf('called_id', 'Contact')\n}"}
{"prompt": "Table:Problem\nType:onLoad\nPrompt:Modify the field labels to use sentence case\nResponse:","completion": "function onLoad() {\n  g_form.elements.forEach(function(field){\n    var label = g_form.getLabelOf(field.fieldName);\n    let words = label.toLowerCase().split(' ');\n    for (let i = 0; i < words.length; i++) {\n        words[i] = words[i][0].toUpperCase() + words[i].slice(1);\n    }\n    var titleCasedLabel = words.join(' ');\n    g_form.setLabelOf(field.fieldName, titleCasedLabel)\n  })\n}"}
{"prompt": "Table:Request\nType:onLoad\nPrompt:Change Issue label to \"Tell us about the problem\"\nResponse:","completion": "function onLoad() {\n  g_form.setLabelOf('issue', 'Tell us about the problem')\n}"}
{"prompt": "Table:Catalog Task\nType:onLoad\nPrompt:show phone icon\nResponse:","completion": "function onLoad() {\n  // icons: https://hi.service-now.com/styles/retina_icons/retina_icons.html\n  g_form.addDecoration('number', 'icon-phone', 'Phone');\n}"}
{"prompt": "Table:User\nType:onLoad\nPrompt:add help icon\nResponse:","completion": "function onLoad() {\n  // icons: https://hi.service-now.com/styles/retina_icons/retina_icons.html\n  g_form.addDecoration('caller_id', 'icon-helpr', 'Help');\n}"}
{"prompt": "Table:Group\nType:onLoad\nPrompt:add error image\nResponse:","completion": "function onLoad() {\n  // icons: https://hi.service-now.com/styles/retina_icons/retina_icons.html\n  g_form.addDecoration('caller_id', 'icon-error', 'Error');\n}"}
{"prompt": "Table:Group Member\nType:onLoad\nPrompt:add phone decoration\nResponse:","completion": "function onLoad() {\n  // icons: https://hi.service-now.com/styles/retina_icons/retina_icons.html\n  g_form.addDecoration('caller_id', 'icon-phone', 'Phone');\n}"}
{"prompt": "Table:Company\nType:onLoad\nPrompt:Add a \"Help\" icon next to each field to provide additional information about the field\nResponse:","completion": "function onLoad() {\n  // icons: https://hi.service-now.com/styles/retina_icons/retina_icons.html\n  g_form.addDecoration('caller_id', 'icon-star', 'preferred member');\n}"}
{"prompt": "Table:Location\nType:onLoad\nPrompt:Add a \"VIP\" decoration next to the user field if the user is a VIP\nResponse:","completion": "function onLoad() {\n  // icons: https://hi.service-now.com/styles/retina_icons/retina_icons.html\n  g_form.addDecoration('caller_id', 'icon-star', 'preferred member');\n}"}
{"prompt": "Table:Catalog Item\nType:onLoad\nPrompt:Add an info icon\nResponse:","completion": "function onLoad() {\n  // icons: https://hi.service-now.com/styles/retina_icons/retina_icons.html\n  g_form.addDecoration('caller_id', 'icon-info', 'Caller');\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Rename the contact number field to \"friends number\" when \"friend\" is picked from relation\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  if(newValue == 'friend') {\n    g_form.setLabelOf('contact_number', 'Friends number')\n  }\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Change the Caller's field label to Contact when type of call is case\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  if(newValue == 'case') {\n    g_form.setLabelOf('caller_id', 'Contact')\n  }\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Change Issue label to \"Tell us about the problem\" when type is issue\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  if(newValue == 'issue') {\n    g_form.setLabelOf('issue', 'Tell us about the problem')\n  }\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:show help icon with text of assignment groups managers name when the group is set\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  var ga = new GlideAjax('global.utils');\n  ga.addParam('sysparm_name', 'groupLookup');\n  ga.addParam('sysparm_obj', JSON.stringify({\"sys_id\":g_form.getValue('group')}));\n  ga.getXML(function(response){\n    var responseDocument = response.responseXML.documentElement;\n    var answer = responseDocument.getAttribute('answer');\n    var serverObj = JSON.parse(answer);\n    g_form.addDecoration('caller_id', 'icon-help', serverObj.manager.name);\n  });\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:add help icon with text of assignment groups member names when the group is changed\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  var ga = new GlideAjax('global.utils');\n  ga.addParam('sysparm_name', 'groupLookup');\n  ga.addParam('sysparm_obj', JSON.stringify({\"sys_id\":g_form.getValue('group')}));\n  ga.getXML(function(response){\n    var responseDocument = response.responseXML.documentElement;\n    var answer = responseDocument.getAttribute('answer');\n    var serverObj = JSON.parse(answer);\n    g_form.addDecoration('caller_id', 'icon-help', serverObj.members.join(', '));\n  });\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:add help image with the email address of the assignment group when the group is updated\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  var ga = new GlideAjax('global.utils');\n  ga.addParam('sysparm_name', 'groupLookup');\n  ga.addParam('sysparm_obj', JSON.stringify({\"sys_id\":g_form.getValue('group')}));\n  ga.getXML(function(response){\n    var responseDocument = response.responseXML.documentElement;\n    var answer = responseDocument.getAttribute('answer');\n    var serverObj = JSON.parse(answer);\n    g_form.addDecoration('caller_id', 'icon-help', serverObj.email);\n  });\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:add info decoration with text of \"call 555-5555 for help\" if priority is set to 1\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  if(newValue == '1'){\n    g_form.addDecoration('caller_id', 'icon-info', \"Call 555-5555 for help\");\n  }\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Add a \"VIP\" decoration next to the user field if the user is a VIP when the user is changed\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  var caller = g_form.getReference('caller_id', function(reference){\n  if(reference.vip == 'true') {\n    g_form.addDecoration('user', 'icon-hr', \"VIP\");\n  }\n});\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Add an info icon showing the label of the user field if the user is a VIP when the user is changed\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  g_form.addDecoration('user', 'icon-info', \"VIP\");\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Remove a warning indicator on the agree field is checked\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  if(newValue != 'true') {\n    g_form.removeDecoration('agree', 'icon-warning', \"Agree\");\n  }\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Hide all the fields except Reason\nResponse:","completion": "function onLoad() {\n    g_form.elements.forEach(function(field){\n      if(field.fieldName != 'reason'){\n        g_form.setDisplay(field.fieldName, false);\n      }\n    });\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Hide the SLA tab\nResponse:","completion": "function onLoad() {\n  g_form.getRelatedListNames().forEach(function(list){\n    if(list.indexOf('sla')>=0){\n      g_form.hideRelatedList(list);\n    }\n  });\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Remove the Game field from the form\nResponse:","completion": "function onLoad() {\n  g_form.setDisplay('game', 'false');\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:hide game\nResponse:","completion": "function onLoad() {\n  g_form.setMandatory('caller_id', false);\n  g_form.setVisible('caller_id', 'false');\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:remove game\nResponse:","completion": "function onLoad() {\n  g_form.setDisplay('game', 'false');\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:hide complaints list\nResponse:","completion": "function onLoad() {\n  g_form.setMandatory('caller_id', false);\n  g_form.setVisible('caller_id', 'false');\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:hide game data section\nResponse:","completion": "function onLoad() {\n    g_form.setMandatory('caller_id', false);\n    g_form.setVisible('caller_id', 'false');\n}"}
{"prompt": "Table:Incident\nType:onLoad\nPrompt:hide checklist sections data area\nResponse:","completion": "function onLoad() {\n  var sections = g_form.getSections();\n  g_form.setSectionDisplay(sections[1], false);\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:hide fields in the game section\nResponse:","completion": "function onLoad() {\n  var sections = g_form.getSections();\n  g_form.setSectionDisplay(sections[1], false);\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:hide list of games\nResponse:","completion": "function onLoad() {\n  g_form.getRelatedListNames().forEach(function(list){\n    if(list.indexOf('games')>=0){\n      g_form.hideRelatedList(list);\n    }\n  });\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:hide customer information section\nResponse:","completion": "function onLoad() {\n  var sections = g_form.getSections();\n  g_form.setSectionDisplay(sections[3], false);\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:hide customer data area\nResponse:","completion": "function onLoad() {\n  var sections = g_form.getSections();\n  g_form.setSectionDisplay(sections[1], false);\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:remove customer information from view\nResponse:","completion": "function onLoad() {\n    g_form.setDisplay('customer_information', false);\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:remove external contacts section\nResponse:","completion": "function onLoad() {\n  var sections = g_form.getSections();\n  g_form.setSectionDisplay(sections[1], false);\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:hide external contacts list\nResponse:","completion": "function onLoad() {\n  g_form.getRelatedListNames().forEach(function(list){\n    if(list.indexOf('contacts')>=0){\n      g_form.hideRelatedList(list);\n    }\n  });\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:restrict access to short description\nResponse:","completion": "function onLoad() {\n  g_form.setReadOnly('description');\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:limit visibility of certain description\nResponse:","completion": "function onLoad() {\n  g_form.setMandatory('description', false);\n  g_form.setVisible('description', false);\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:make caller read only\nResponse:","completion": "function onLoad() {\n    g_form.setReadOnly('caller_id', true);\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Hide all the fields except Reason when type is complaint\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  if(newValue == 'complaint'){\n    g_form.elements.forEach(function(field){\n      if(field.fieldName != 'reason'){\n        g_form.setDisplay(field.fieldName, false);\n      }\n    });\n  }\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Remove the Game field from the form if type is not \"entertainment\"\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  if(newValue != 'entertainment'){\n    g_form.setMandatory('game', false);\n    g_form.setDisplay('game', false);\n  }\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:hide game when not \"entertainment\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  if(newValue != 'entertainment'){\n    g_form.setMandatory('game', false);\n    g_form.setVisible('game', false);\n  }\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:remove game if not \"entertainment\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  if(newValue != 'entertainment'){\n    g_form.setMandatory('game', false);\n    g_form.setDisplay('game', false);\n  }\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Show the Assignment Group field when type is not \"good job\"\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  if(newValue != 'good job'){\n    g_form.setDisplay('assignment_group', true);\n  }\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Hide the Assignment Group field when type is \"good job\"\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  if(newValue == 'good job'){\n    g_form.setMandatory('assignment_group', false);\n    g_form.setDisplay('assignment_group', false);\n  }\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Show the Reason field if type is complaint\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  if(newValue == 'complaint') {\n    g_form.setDisplay('reason', true);\n  }\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Change list of available values for type based on selected category\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  var ga = new GlideAjax('global.utils');\n  ga.addParam('sysparm_name', 'getOptions');\n  ga.addParam('sysparm_obj', JSON.stringify({\"field\":\"type\"}));\n  ga.getXML(function(response){\n    var responseDocument = response.responseXML.documentElement;\n    var answer = responseDocument.getAttribute('answer');\n    var serverObj = JSON.parse(answer);\n    var choices = serverObj.choices;\n    if(newValue == 'question'){\n      g_form.clearOptions('type');\n      choices.forEach(function(choice){\n        if(choice.value.indexOf('qa-')>=0){\n          g_form.addOption('type', choice.value, choice.label);\n        }\n        if(choice.value.indexOf('issue-')>=0){\n          g_form.addOption('type', choice.value, choice.label);\n        }\n        if(choice.value.indexOf('report-')>=0){\n          g_form.addOption('type', choice.value, choice.label);\n        }\n      })\n    }\n  });\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Display a message to user when changing Reason or Type values\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  if(newValue != oldValue) {\n    g_form.addInfoMessage('Here is a message because a field changed');\n  }\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:fill the field \"Address\" with the user's current location\nResponse:","completion": "function onLoad() {\n  g_form.getReference('user',function(userGr){\n    g_form.setValue('address', userGr.address)\n  })\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Set \"Hours Worked\" to 8\nResponse:","completion": "function onLoad() {\n  g_form.setValue('hours_worked', 8)\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:generate a random string for each form submission\nResponse:","completion": "function onLoad() {\n  var characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'.split('');\n  var randomString = ''\n  for (var i = 0; i < 16; i++) {\n    var randomPoz = Math.floor(Math.random() * charSet.length)\n    randomString += charSet.substring(randomPoz, randomPoz + 1)\n  }\n  g_form.setValue('unique_id', randomString);\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:fill the field \"Name\" with the user's name if it is available in their profile\nResponse:","completion": "function onLoad() {\n  g_form.getReference('user',function(userGr){\n    g_form.setValue('name', userGr.name)\n  })\n}"}
{"prompt": "fill the field \"Phone Number\" with the user's phone number if it is available in their profile\nResponse:","completion": "function onLoad() {\n  g_form.getReference('user',function(userGr){\n    g_form.setValue('phone', userGr.phone)\n  })\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Set a default value for the number of days field\nResponse:","completion": "function onLoad() {\n  g_form.setValue('days', 7);\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:fill the field \"Country\" with the user's current country\nResponse:","completion": "function onLoad() {\n  g_form.getReference('user',function(userGr){\n    g_form.setValue('country', userGr.country)\n  })\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:clear the value of the field \"Assignment Group\" if division changes\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  if(newValue != oldValue) {\n    g_form.clearValue('assignment_group');\n  }\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:set the value of \"Assignment Group\" based on the reason\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  if(g_form.getValue('reason') == 'because'){\n    g_form.setValue('assignment_group', 'a-team');\n  }\n  if(g_form.getValue('reason') != 'because'){\n    g_form.setValue('assignment_group', 'b-team');\n  }\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:clear the value of the field \"Type\" if reason changes\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  if(newValue != oldValue) {\n    g_form.clearValue('type');\n  }\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:set the value of \"Type\" based on the assignment group\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  if(newValue == 'asdfghjklasdfghjksdfghjk'){\n    g_form.setValue('type', 'because');\n  } else {\n    g_form.setValue('type', 'other');\n  }\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Set \"Name\" as required and display an error message if it is left blank\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading) { return; }\n  if(newValue == ''){\n    g_form.addErrorMessage('Name is blank');\n    g_form.setMandatory('name',true)\n  }\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Only show the option \"Office\" from the field Badge if logged in users is a manager\nResponse:","completion": "function onLoad() {\n  g_form.removeOption('badge', 'office');\n  var ga = new GlideAjax('global.utils');\n  ga.addParam('sysparm_name', 'userLookup');\n  ga.addParam('sysparm_obj', JSON.stringify({\"sys_id\":g_user.userID}));\n  ga.getXML(function(response){\n    var responseDocument = response.responseXML.documentElement;\n    var answer = responseDocument.getAttribute('answer');\n    var serverObj = JSON.parse(answer);\n    if(serverObj.isManager){\n      g_form.addOption('badge', 'office', 'Office');\n    }\n  });\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Add an \"Other\" option to the field \"Department\"\nResponse:","completion": "function onLoad() {\n    g_form.addOption('department', 'other', 'Other');\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Add an \"Other\" option to the field \"Reason\"\nResponse:","completion": "Table:Case\nType:onLoad\nPrompt:function onLoad() {\n    g_form.addOption('reason', 'other', 'Other');\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Add an \"Other\" option to the field \"Type\"\nResponse:","completion": "function onLoad() {\n    g_form.addOption('type', 'other', 'Other');\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Add an \"Other\" option to the field \"category\"\nResponse:","completion": "function onLoad() {\n    g_form.addOption('category', 'other', 'Other');\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Show a message stating if the user is allowed to submit the form\nResponse:","completion": "function onLoad() {\n    var ga = new GlideAjax('global.utils');\n    ga.addParam('sysparm_name', 'canUserSubmitForm');\n    ga.addParam('sysparm_obj', JSON.stringify({\"form\":\"Case\"}));\n    ga.getXML(function(response){\n      var responseDocument = response.responseXML.documentElement;\n      var answer = responseDocument.getAttribute('answer');\n      var serverObj = JSON.parse(answer);\n      if(serverObj.canSubmit){\n        g_form.showInfoMessage('Only one of these can be submitted at a time.')\n      }\n      if(serverObj.canSubmit){\n        g_form.showErrorMessage(\"You've already submitted one of these items, \" + serverObj.itemNumber + \".  If you have questions follow up with your Business Analyst.\");\n      }\n    });\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Clear the messages\nResponse:","completion": "function onLoad() {\n  g_form.clearMessages();\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Set a dropdown menu with options for the field \"Country\"\nResponse:","completion": "function onLoad() {\n    var countries = [\n      { value: 'usa', label: 'USA' },\n      { value: 'mexico', label: 'Mexico'},\n      { value: 'canada', label: 'Canada'}\n    ]\n    countries.forEach(function(country){\n      g_form.addOption('country', country.value, country.label);\n    })\n\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Calculate 3 business days from the server now and present that on the form\nResponse:","completion": "function onLoad() {\n  var ga = new GlideAjax('global.utils');\n  ga.addParam('sysparm_name', 'calculateBusinessDaysFromNow');\n  ga.addParam('sysparm_obj', JSON.stringify({\"days\":3}));\n  ga.getXML(function(response){\n    var responseDocument = response.responseXML.documentElement;\n    var answer = responseDocument.getAttribute('answer');\n    var serverObj = JSON.parse(answer);\n    if(serverObj.date){\n      g_form.showInfoMessage('3 Business days from now: ' + new Date(serverObj.date))\n    }\n  });\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Show a message telling the user at least one type of device must be checked\nResponse:","completion": "function onLoad() {\n    g_form.addInfoMessage('At least one device must be checked');\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Display a custom error message if the field \"Phone Number\" is left empty\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading) { return; }\n  if(newValue == ''){\n    g_form.addErrorMessage('Phone Number is blank');\n  }\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Display a form message when the field \"Reason\" is changed\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if(isLoading || newValue === '') { return; }\n  if(newValue != oldValue) {\n    g_form.clearAllFormMessages();\n    g_form.addInfoMessage('Reason has changed to ' + newValue);\n  }\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Hide a form message if the field \"Type\" is changed\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if(isLoading || newValue === '') { return; }\n    if(newValue != oldValue) {\n      g_form.clearAllFormMessages();\n    }\n  }"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Show a list of items when the field \"Assignment Group\" is changed\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if(isLoading || newValue === '') { return; }\n    var items = ['apples', 'bananas', 'cars'];\n    g_form.addInfoMessage('Assignment Group changed, here is a list of items ' + items.join(', ') + '.');\n  }"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Calculate the sum of two cost and tax and present that on the under the price field when cost or tax change\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if(isLoading) { return; }\n    var tax = parseFloat(g_form.getValue('tax'),10) || 0;\n    var cost = parseFloat(newValue,10) || 0;\n    g_form.showFieldMsg('tax', 'Total: ' + (tax + cost), 'info');\n  }"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Add a character limit of 25 for the field \"Address\"\nResponse:","completion": "function onLoad() {\n  var control = g_form.getControl('address');\n  control.onkeyup = isMaxLength;\n}\nfunction isMaxLength() {\n  g_form.clearFieldMsg('address', true);\n  var maxLength = 25;\n  var element = g_form.getControl('address');\n  if(element.value.length > maxLength){\n    g_form.showFieldMsg('address', 'Only 25 characters allowed, trimed that for you', 'Error');\n    element.value = element.value.substring(0, maxLength);\n  }\n}\n"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Set the placeholder text for Phone number\nResponse:","completion": "function onLoad() {\n    g_form.setFieldPlaceholder('phone_number','555-5555');\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Make the name field mandatory\nResponse:","completion": "function onLoad() {\n  g_form.setMandatory('name',true);\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Make the name and email field read only\nResponse:","completion": "function onLoad() {\n  g_form.setReadOnly('name',true);\n  g_form.setReadOnly('email',true);\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:disable attachements\nResponse:","completion": "function onLoad() {\n  g_form.disableAttachments();\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:enaable attachements\nResponse:","completion": "function onLoad() {\n  g_form.enableAttachments();\n}"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:show an example phone number to put in the phone number field below it\nResponse:","completion": "function onLoad() {\n  g_form.showFieldMsg('phone', 'Example: 555-555-5555','info');\n}"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Display a custom error message if the field \"Voucher\" is not valid\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if(isLoading || newValue === '') { return; }\n    if(newValue != 'valid'){\n      g_form.clearMessages();\n      g_form.addErrorMessage('Voucher not valid');\n    }\n  }"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Set the the signed field to the current time when the checkbox \"Agree\" is checked\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if(isLoading || newValue === '') { return; }\n    if(newValue != oldValue) {\n      g_form.setValue('signed', new Date().toString();)\n    }\n  }"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Set the \"Status\" field to 'Completed' when the checkbox \"Approved\" is checked\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if(isLoading || newValue === '') { return; }\n    if(newValue == 'true') {\n      g_form.setValue('status', '7');//completed\n    }\n  }"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Display a success message when all required fields are filled in\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if(isLoading || newValue === '') { return; }\n    var allFieldsFilledOut = true;\n    var requiredFields = ['user', 'type', 'category', 'comment'];\n    requiredFields.forEach(function(field){\n      if(!g_form.getValue(field)){\n        allFieldsFilledOut = false;\n      }\n    })\n    if(allFieldsFilledOut){\n      g_form.addInfoMessage('You did it!  Form ready to submit!');\n    }\n  }"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Show a warning message when the \"Credit Limit\" field is exceeded\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if(isLoading || newValue === '') { return; }\n    if(newValue > 1000){\n      g_form.hideFieldMsg('credit_limit', true);\n      g_form.showFieldMsg('credit_limit', 'Credit limit exceeded', 'error');\n    }\n  }"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Show a discount message when the \"Promo Code\" field is entered\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if(isLoading || newValue === '') { return; }\n    g_form.hideFieldMsg('promo_code', true);\n    g_form.showFieldMsg('promo_code', 'Promo Code Entered', 'info');\n  }"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Hide the reason field if other option is not selected\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if(isLoading || newValue === '') { return; }\n    if(newValue != 'other'){\n      g_form.setMandatory('reason', false);\n      g_form.setDisplay('reason', false);\n    }\n  }"}
{"prompt": "Table:Case\nType:onLoad\nPrompt:Enable a submit button when all required fields are filled in\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if(isLoading || newValue === '') { return; }\n    if(!g_form.getValue('all_required_fields')){\n      g_form.addErrorMessage('Required fields not filled in');\n      return false;\n    }\n  }"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Show a notification when the \"Confirmation\" field is checked\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if(isLoading || newValue === '') { return; }\n    g_form.hideFieldMsg('confirmation', true);\n    g_form.showFieldMsg('confirmation', 'Confirmed!', 'info');\n  }"}
{"prompt": "Table:Case\nType:onChange\nPrompt:Suggest other products based on selected fields\nResponse:","completion": "function onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if(isLoading || newValue === '') { return; }\n    g_form.showFieldMsg('product', 'You may also like to order an iPhone', 'info');\n  }"}
{"prompt": "Table:Case\nType:onSubmit\nPrompt:Verify the accuracy of contact information (name, address, email, phone number)\nResponse:","completion": "function onSubmit() {\n    var name = g_form.getValue('name');\n    var address = g_form.getValue('name');\n    var email = g_form.getValue('email');\n    var phone = g_form.getValue('phone');\n    var nameValid = name != '';\n    var addressValid = address != '';\n    var emailValid = email.indexOf('@')>0;\n    var phoneValid = (function(){\n      var phoneNumber = phone.replace(/D/g,'');\n      return phoneNumber.length == 10;\n    })()\n    if(nameValid && addressValid && emailValid && phoneValid){\n    } else {\n      return false;\n    }\n  }"}
{"prompt": "Table:Case\nType:onSubmit\nPrompt:Confirm that any dates entered are valid\nResponse:","completion": "function onSubmit() {\n    var dateNumber = getDateFromFormat(g_form.getValue('date'), g_user_date_format);\n    if(dateNumber.toString() == 'Invalid Date'){\n      return false;\n    }\n  }"}
{"prompt": "Table:Case\nType:onSubmit\nPrompt:Require users to select at least one checkbox from a list of options\nResponse:","completion": "function onSubmit() {\n    var checkbox1 = g_form.getValue('checkbox1') == 'true';\n    var checkbox2 = g_form.getValue('checkbox2') == 'true';\n    var checkbox3 = g_form.getValue('checkbox3') == 'true';\n    if(checkbox1 || checkbox2 || checkbox3){\n      return true;\n    } else {\n      return false;\n    }\n  }"}
{"prompt": "Table:Case\nType:onSubmit\nPrompt:Add a rule that won't allow users to submit the form if the field \"Voucher\" is not filled\nResponse:","completion": "function onSubmit() {\n    return g_form.getValue('voucher') != '';\n  }"}
{"prompt": "Table:Case\nType:onSubmit\nPrompt:Add a rule that won't submit the form if the field \"Email\" is invalid\nResponse:","completion": "function onSubmit() {\n    return g_form.getValue('email').indexOf('@')>0;\n  }"}
{"prompt": "Table:Case\nType:onSubmit\nPrompt:Ensure any URLs entered into the form are valid and secure\nResponse:","completion": "function onSubmit() {\n    return g_form.getValue('url').indexOf('https://')>=0;\n  }"}
{"prompt": "Table:Case\nType:onSubmit\nPrompt:Validate any credit card numbers submitted\nResponse:","completion": "function onSubmit() {\n    return g_form.getValue('credit_card').replace(/D/g,'').length == 12;\n  }"}
{"prompt": "Table:Case\nType:onSubmit\nPrompt:Require users to enter a valid postal code\nResponse:","completion": "function onSubmit() {\n    return parseInt(g_form.getValue('postal_code'),10).length == 5;\n  }"}
{"prompt": "Table:Case\nType:onSubmit\nPrompt:Verify that any passwords entered match the minimum requirements\nResponse:","completion": "function onSubmit() {\n    var password = g_form.getValue('password');\n    var lowerCaseLetters = /[a-z]/g;\n    var upperCaseLetters = /[A-Z]/g;\n    var numbers = /[0-9]/g;\n    var specialChar = /[!@#$%^&*()_+-=[]{};':\"\\|,.<>/?]/;\n    var longEnough = password.length > 8;\n    var hasLower = password.match(lowerCaseLetters);\n    var hasUpper = password.match(upperCaseLetters);\n    var hasNumbers = password.match(numbers);\n    var hasSpecial = password.match(specialChar);\n    if (longEnough && hasLower && hasUpper &&  hasNumbers && hasSpecial) {\n      return true;\n    } else {\n      g_form.addErrorMessage('Password needs to be 9 characters, have lower, upper, number and special characters');\n      return false;\n    }\n  }"}
{"prompt": "Table:Case\nType:onSubmit\nPrompt:Make sure no prohibited words or phrases are used in any text fields\nResponse:","completion": "function onSubmit() {\n    var hasHate = g_form.getValue('comment').indexOf('hate');\n    if (hasHate){\n      return false;\n    }\n  }"}
{"prompt": "Table:Case\nType:onSubmit\nPrompt:Require users to agree to terms and conditions before submitting the form\nResponse:","completion": "function onSubmit() {\n    return g_form.getValue('agree') != 'true';\n  }"}