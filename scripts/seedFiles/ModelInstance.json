[
  {
    "cuid": "clbnbbrs30000wg243vkkdkl4",
    "createdAt": "2022-12-14 07:09:58.755",
    "updatedAt": "2022-12-21 17:05:55.965",
    "name": "ask-simple-terms",
    "version": 1,
    "description": "This action",
    "endpoint": "https://api.openai.com/v1/completions",
    "cost": 0.02,
    "price": 0.2,
    "model": "text-davinci-003",
    "prompt": "prompt = \"In as simple of terms possible, answer this; \\\"\" + prompt + \"\\\"\";",
    "temperature": 0.7,
    "maxTokens": 500,
    "topP": 1,
    "bestOf": 1,
    "n": 1,
    "stop": "END",
    "frequencyPenalty": 0,
    "presencePenalty": 0,
    "required": "action, input"
  },
  {
    "cuid": "clbnbcw4h0002wg24czkmnk34",
    "createdAt": "2022-12-14 07:10:51.041",
    "updatedAt": "2022-12-14 07:11:13.527",
    "name": "edit",
    "version": 1,
    "description": "This action",
    "endpoint": "https://api.openai.com/v1/completions",
    "cost": 0.02,
    "price": 0.2,
    "model": "text-davinci-002",
    "prompt": "prompt = `Update this code based following this prompt, \"${prompt}\": ${input} \\`\\`\\``",
    "temperature": 0.7,
    "maxTokens": 500,
    "topP": 1,
    "bestOf": 1,
    "n": 1,
    "stop": "```",
    "frequencyPenalty": 0,
    "presencePenalty": 0,
    "required": "action, input"
  },
  {
    "cuid": "clbnbdqjw0004wg24vk5xoru1",
    "createdAt": "2022-12-14 07:11:30.476",
    "updatedAt": "2022-12-16 18:29:14.563",
    "name": "complete",
    "version": 1,
    "description": "This action",
    "endpoint": "https://api.openai.com/v1/completions",
    "cost": 0.02,
    "price": 0.2,
    "model": "text-davinci-002",
    "prompt": "if (table === 'catalog_script_client' || table === 'sys_script_client') {\n  model = 'curie:ft-scribemonster-2022-12-10-06-06-40';\n  prompt = `action: ${action}\\ntype: ${type}\\nprompt: ${prompt}\\nresponse:\\n\\n`;\n} else {\n  prompt = `${input}\\n\"\"\"\\nRewite the code above with verbose comments around`;\n  prompt += ` the logic based on this prompt, \"${prompt}.\":\\n${input.split('\\n')[0]}`;\n  prepend = input.split('\\n')[0];\n}",
    "temperature": 0.7,
    "maxTokens": 500,
    "topP": 1,
    "bestOf": 1,
    "n": 1,
    "stop": "END",
    "frequencyPenalty": 0,
    "presencePenalty": 0,
    "required": "action, input"
  },
  {
    "cuid": "clbxwkjp10000ta24afl6a40d",
    "createdAt": "2022-12-21 17:02:21.877",
    "updatedAt": "2022-12-21 17:06:09.039",
    "name": "ask",
    "version": 1,
    "description": "This action",
    "endpoint": "https://api.openai.com/v1/completions",
    "cost": 0.02,
    "price": 0.2,
    "model": "text-davinci-003",
    "prompt": "prompt = prompt;",
    "temperature": 0.7,
    "maxTokens": 500,
    "topP": 1,
    "bestOf": 1,
    "n": 1,
    "stop": "END",
    "frequencyPenalty": 0,
    "presencePenalty": 0,
    "required": "action, input"
  },
  {
    "cuid": "clbxwlt080002ta24tnzmq2vy",
    "createdAt": "2022-12-21 17:03:20.6",
    "updatedAt": "2022-12-21 17:06:52.658",
    "name": "ask-step-by-step",
    "version": 1,
    "description": "This action",
    "endpoint": "https://api.openai.com/v1/completions",
    "cost": 0.02,
    "price": 0.2,
    "model": "text-davinci-003",
    "prompt": "prompt = prompt + \"\\nLetâ€™s think step by step.\\n\";",
    "temperature": 0.7,
    "maxTokens": 500,
    "topP": 1,
    "bestOf": 1,
    "n": 1,
    "stop": "END",
    "frequencyPenalty": 0,
    "presencePenalty": 0,
    "required": "action, input"
  },
  {
    "cuid": "clbotbe0n002asq24vduwqvsz",
    "createdAt": "2022-12-15 08:21:20.184",
    "updatedAt": "2023-01-01 02:25:16.957",
    "name": "ask-pirate",
    "version": 2,
    "description": "This action",
    "endpoint": "https://api.openai.com/v1/completions",
    "cost": 0.02,
    "price": 0.2,
    "model": "text-davinci-003",
    "prompt": "prompt = \"Answer this questions as if you we're pirate: \" + prompt;",
    "temperature": 1,
    "maxTokens": 500,
    "topP": 1,
    "bestOf": 1,
    "n": 1,
    "stop": "END",
    "frequencyPenalty": 0,
    "presencePenalty": 0,
    "required": "action, input"
  },
  {
    "cuid": "clbr8je0000csq524l0nf6zng",
    "createdAt": "2022-12-17 01:03:00",
    "updatedAt": "2023-01-16 06:53:47.299",
    "name": "summarize-2",
    "version": 1,
    "description": "This action",
    "endpoint": "https://api.openai.com/v1/completions",
    "cost": 0.02,
    "price": 0.2,
    "model": "text-davinci-003",
    "prompt": "prompt = `What are the key points and main ideas of {\"${prompt}\"}`",
    "temperature": 1,
    "maxTokens": 2000,
    "topP": 1,
    "bestOf": 1,
    "n": 1,
    "stop": "END",
    "frequencyPenalty": 0,
    "presencePenalty": 0,
    "required": "action, input"
  },
  {
    "cuid": "clbnbpegd0004sbtxrmxc9q43",
    "createdAt": "2022-12-14 07:20:34.669",
    "updatedAt": "2023-01-11 05:40:05.082",
    "name": "explain",
    "version": 1,
    "description": "This action",
    "endpoint": "https://api.openai.com/v1/completions",
    "cost": 0.02,
    "price": 0.2,
    "model": "text-davinci-002",
    "prompt": "if (table === 'catalog_script_client') {\n  prompt = `${input}\\n\"\"\"\\nThis runs on the catalog form.\\nLet's think step by step what it's doing.\\n1.`\n}\nif (table === 'sys_script_client') {\n  prompt = `${input}\\n\"\"\"\\nThe ${type} function runs on the form.\\nExplain it like I'm five years old in the form of a list.\\n1.`\n}\nif (table === 'sys_script') {\n  prompt = `${input}\\n\"\"\"\\ncurrent is tied to the ${table} record.\\nExplain it like I'm five years old in the form of a list.\\n1.`\n}\nif (table === 'sys_script_include') {\n  prompt = `${input}\\n\"\"\"\\nExplain this Script Include like I'm five years old in the form of a list.\\n1.`\n}\nif (!prompt) {\n  prompt = `${input}\\n\"\"\"\\nExplain the above code step-by-step in simple english.`\n}",
    "temperature": 0.7,
    "maxTokens": 500,
    "topP": 1,
    "bestOf": 1,
    "n": 1,
    "stop": "END",
    "frequencyPenalty": 0,
    "presencePenalty": 0,
    "required": "action, input"
  },
  {
    "cuid": "clbr7ovqz00bcq524mz780oqn",
    "createdAt": "2022-12-17 00:39:16.667",
    "updatedAt": "2023-01-16 06:56:56.266",
    "name": "summarize-3",
    "version": 1,
    "description": "This action",
    "endpoint": "https://api.openai.com/v1/completions",
    "cost": 0.02,
    "price": 0.2,
    "model": "text-davinci-003",
    "prompt": "prompt = `Create a deep dive analysis of the following text, considering all possible meanings and implications.\n${prompt}`\n",
    "temperature": 1,
    "maxTokens": 2000,
    "topP": 1,
    "bestOf": 1,
    "n": 1,
    "stop": "END",
    "frequencyPenalty": 0,
    "presencePenalty": 0,
    "required": "action, input"
  },
  {
    "cuid": "clbr8fc4y00chq524wz9mtzh9",
    "createdAt": "2022-12-17 00:59:50.962",
    "updatedAt": "2023-01-16 06:48:29.7",
    "name": "summarize-1",
    "version": 1,
    "description": "This action",
    "endpoint": "https://api.openai.com/v1/completions",
    "cost": 0.02,
    "price": 0.2,
    "model": "text-davinci-003",
    "prompt": "prompt = `Summarize this text for me in a few sentences.\"\n${prompt}`\n",
    "temperature": 1,
    "maxTokens": 2000,
    "topP": 1,
    "bestOf": 1,
    "n": 1,
    "stop": "END",
    "frequencyPenalty": 0,
    "presencePenalty": 0,
    "required": "action, input"
  },
  {
    "cuid": "clcrc0cm20094uw24734ej0ar",
    "createdAt": "2023-01-11 07:19:52.538",
    "updatedAt": "2023-01-11 07:49:31.489",
    "name": "complete",
    "version": 3,
    "description": "This action",
    "endpoint": "https://api.openai.com/v1/completions",
    "cost": 0.02,
    "price": 0.2,
    "model": "text-davinci-002",
    "prompt": "model = 'code-cushman-001';\nstop = `// Prompt:`;\nif (table === 'catalog_script_client' || table === 'sys_script_client') {\n    if(type == 'onSubmit'){\n        prompt = `\n// Prompt: If the cost is more than 100, dont allow submit\nfunction onSubmit() {\n    if (parseFloat(g_form.getValue('cost')) > 100 ) {\n        g_form.addErrorMessage(\"Cost is more than 100, lower cost to submit.\"); // show error to let user know why\n        return false; // disallow submit\n    }\n}\n// Prompt: ${prompt}\n    `\n    }\n    if(type == 'onLoad'){\n        prompt = `\n// Prompt: Set the color to purple, and date to now.\nfunction onLoad() {\n    g_form.setValue('color', 'purple'); // set the color to purple\n    var now = new Date(); // make a date obj for now\n    var dateInUserFormat = getDateTimeFromFormat(now, g_user_date_time_format); //set it to the logged in users format\n    g_form.setValue('date', dateInUserFormat);\n}\n// Prompt: If the user is not part of the Facilities Group, remove \"office\" from the type of access choice.\nfunction onLoad(){\n    var userAjax = new GlideAjax('global.UserAjax'); // make a ajax call to script include UserAjax\n    userAjax.addParam('sysparm_name', 'getGroups'); // call the getGroups function\n    userAjax.addParam('sysparm_obj', JSON.stringify({\"userId\": g_user.userId})); //pass in the logged in user's id\n    userAjax.getXML(function(response){ // handle the response\n        var answer = response.responseXML.document.Element.getAttribute('answer'); // get the answer\n        var serverObj = JSON.parse(answer); // make the response an object\n        var notPartOfFacilities = serverObj.groups.indexOf('Facitilites Group') == -1; // if groups does not contain facilities\n        if(notPartOfFacilities){\n            g_form.removeOption('office','access'); // remove this option\n        }\n    })\n}\n// Prompt: ${prompt}\n    `    \n\n    }\n    if(type == 'onChange'){\n\n        prompt = `\n// Prompt: When the caller is set to jace, set the group to cab\nfunction onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if (isLoading || newValue === '') { return; }\n    if (newValue == 'jace') { // when the new value is jace\n        g_form.setValue('assignment_group', 'cab'); // set the group to cab, replace w/sysid\n    }\n}\n// Prompt: If the book changes to read, set the date to today.\nfunction onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if (isLoading || newValue === '') { return; }\n  if (newValue == 'read') { // when the new value is read\n    var now = new Date(); // make a variable for today\n    var dateInUserFormat = getDateTimeFromFormat(now, g_user_date_time_format); // get it in the users format\n    g_form.setValue('date', dateInUserFormat); // set the date to today\n  }\n}\n// Prompt: show me the groups the user picked is a member of\nfunction onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if (isLoading || newValue === '') { return; }\n    var userAjax = new GlideAjax('global.UserAjax'); // call the UserAjax Script Include\n    userAjax.addParam('sysparm_name', 'getGroups'); // call the getGroups function\n    userAjax.addParam('sysparm_obj', JSON.stringify({\"userId\": newValue})); // pass in the new value for the user\n    userAjax.getXML(function(response){\n        var responseDocument = response.responseXML.document.Element.getAttribute('answer'); //get the answer\n        var serverObj = JSON.parse(answer); // make it a json object\n        var groups = serverObj.groups.join(', '); // make it a string with commas\n        g_form.addInfoMessage(groupString); // show it on the form\n    })\n}\n// Prompt: when food quantity becomes zero, require reason\nfunction onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if (isLoading || newValue === '') { return; }\n    if (newValue == 0) { // when the new value is zero\n        g_form.setMandatory('reason', true);\n    }\n}\n// Prompt: ${prompt}\n    `\n\n    }\n    if(!type){\n        prompt = prompt\n    }\n}\nif (table === 'sys_script') {\n    prompt = `\n// Prompt: Create a script that sets the assignment group to the Manager's group if the priority is 1.\n(function executeRule(current, previous) {\n    if (current.getValue('priority', '1')) {\n        current.setValue('group', current.manager.group + '');\n    }\n})(current, previous);\n// Prompt: when status changes, if closed, set active to false\n(function executeRule(current, previous) {\n    // condition current.status.changes()\n    if (current.status == 'closed_created' || current.status == 'closed_duplicate' || current.status == 'closed_invalid') {\n        current.active = false;\n    } else {\n        current.active = true;\n    }\n})(current, previous);\n// Prompt: when change request changes, set parent to change request\n(function executeRule(current, previous) {\n    // condition current.change_request.changes()\n    current.parent = current.change_request;\n})(current, previous);\n// Prompt: do not allow changes to others delegates\n(function executeRule(current, previous) {\n    // condition current.user != gs.getUserID() && !gs.hasRole('admin')\n    gs.addInfoMessage(gs.getMessage(\"Cannot assign or modify other users' Delegates\"));\n    current.setAbortAction(true);\n})(current, previous);\n// Prompt: get the bot icon for slack, and set it from the response\n(function executeRule(current, previous) {\n    try {\n        var req = new sn_ws.RESTMessageV2();\n        req.setEndpoint('https://slack.com/api/team.info');\n        req.setHttpMethod('get');\n        var e = new GlideEncryptionUtil();\n        var authToken = e.getClearPassword2('token_verification', 'token', current.provider_auth.outbound_message_creation);\n        if (JSUtil.notNil(authToken))\n            req.setRequestHeader('Authorization', 'Bearer ' + authToken);\n        var resp = req.execute();\n        var team_icon = JSON.parse(resp.getBody()).team.icon.image_88;\n        current.setValue(\"icon\", team_icon);\n    } catch (ex) {\n        gs.error('Error getting slack team info: ' + ex.getMessage());\n    }\n})(current, previous);\n// Prompt: when the start and end dates change, only allow dates where the start is before the end\n(function executeRule(current, previous) {\n    // condition current.start_date.changes() || current.end_date.changes()\n    if (!current.start_date.nil() && !current.end_date.nil() && current.start_date > current.end_date) {\n        current.setAbortAction(true);\n        gs.addErrorMessage(gs.getMessage(\"The start date cannot be after the end date\"));\n    }\n})(current, previous);\n// Prompt: when the date changes is empty, format it in the star trek format (YYYY.ElapsedDays) and set it in the star date field\n(function executeRule(current, previous) {\n    // condition current.date.changes()\n    if (!current.date.nil()) {\n        var date = new GlideDateTime(current.date);\n        var year = date.getYear();\n        var elapsedDays = date.getElapsed(date.getNumericValue());\n        current.star_date = year + '.' + elapsedDays;\n    }\n})(current, previous);\n// Prompt: ${prompt}\n`\n}\nif(table === 'metric_definition'){\n    prompt = `\n// Prompt: Resolved by Known Error\n// variables available\n// current: GlideRecord -  target incident\n// definition: GlideRecord -  (this row)\nif (!current.active) {\n    if (current.problem_id.problem_state == '2')\n        createMetric();\n}\n\nfunction createMetric() {\n  var mi = new MetricInstance(definition, current);\n  if (mi.metricExists()) \n    return;\n\n  var gr = mi.getNewRecord();\n  gr.field_value = true;\n  gr.calculation_complete = true;\n  gr.insert();\n}\n\n`\n}\nif(table === 'content_block_programmatic' || table === 'sys_ui_macro'){\n    prompt = `\n// Prompt: ${prompt}\n`\n}\nif(table === 'kb_navons') {\n    prompt = `\n// Prompt: Search Google\nwindow.open('http://www.google.com/search?sourceid=service-now&q=' + text, \"googleSearch\");\n// Prompt: ${prompt}\n`\n}\nif(table === 'sc_cat_item_producer'){\n    prompt = `\n// Prompt: Show a message with a link to the record and redirect to the record\ngs.addInfoMessage('You have been redirected to the record ' + current.number);\nproducer.redirect(current.getLink(true));\n// Prompt: Set the notes from caller, ci, and contact variables.  Set the short description aptly.  Redirect the user thank you page.\nvar notes = \"Please contact customer with new password via: \" + producer.contact_me;\nnotes += \"\\nCaller : \" + producer.caller_id.getDisplayValue();\nnotes += \"\\nSystem : \" + producer.cmdb_ci.getDisplayValue();\nnotes += \"\\nContact : \" + producer.contact_me;\ncurrent.work_notes = notes;\ncurrent.short_description = \"Reset the password for \" + producer.caller_id.getDisplayValue() + \" on \" + producer.cmdb_ci.getDisplayValue();\ncurrent.description = current.short_description;\n\nvar isMobile = GlideMobileExtensions.getDeviceType() == 'm';\nvar link = isMobile ? '#/!list/incident/q:active=true%5Ecaller_id=javascript:gs.user_id()%5EEQ' : 'home.do';\n\nvar s = 'This incident was opened for your request<br/>';\ns += 'The IT department will contact you when the password is reset or for further information<br/>';\nif (isMobile)\n\ts += 'You can track status from this <a href=\"' + link + '\">List</a> <br/>';\nelse\n\ts += 'You can track status from the <a href=\"' + link + '\">Homepage</a> <br/>';\ngs.addInfoMessage(s);\n\nvar incRPUtil = new LinkRecordProducerToIncident();\nincRPUtil.linkRecordProducerToParentIncident(RP.getParameterValue('sysparm_parent_sys_id'), current);\n// Prompt: ${prompt}\n`\n}\nif(table === 'sp_angular_provider'){\n    prompt = `\n// Prompt: add a tooltip directive\nfunction spToolTip($compile) {\n\treturn {\n\t\trestrict: 'A',\n\t\tlink: function($scope, element, attrs, ctrl) {\n\t\t\t$(element).one('mouseover', function(e) {\n\t\t\t\tif (!attrs.tooltips) {\n\t\t\t\t\t$(e.target).attr('tooltips', true);\n\t\t\t\t\t$compile(element)($scope);\n\t\t\t\t} \n\t\t\t});\n\t\t}\n\t}\n}\n`\n}\nif(table === 'sp_search_source'){\n    if(field === 'data_fetch_script'){\n        prompt = `\n// Prompt: Search resources\n(function(query) {\n\tvar results = [];\n\tif (!gs.isLoggedIn())\n\t\treturn results;\n\n\t//'and' for 'addQuery' | 'or' for ''addOrQuery'\n\tvar fieldNames = [['and', 'sys_package.name', '=', 'Instance Security Center'],\n\t\t\t\t\t  ['and', 'sc_catalogs.name', '=', 'Knowledge'],\n\t\t\t\t\t  ['and', 'name','CONTAINS']];\n\n\tresults = new ISCSearch().searchFromTableFields(fieldNames, 'sc_cat_item_content', query);\n\t\n\t\n\tfor(var i=0; i < results.length; i++) {\n\t\tresults[i]['target'] = '_blank';\n\t}\n\t\n\treturn results;\n})(query);\n// Prompt: ${prompt}\n`\n    }\n    if(field === 'typeahead_template') {\n        prompt = `\n// Prompt: limit to 30 results with highlighting\n<span ng-bind-html=\"match.model.name | limitTo: 30 | uibTypeaheadHighlight:query\"></span>{{match.model.name.length > 30 ? '...' : ''}}\n<span class=\"m-l-xs m-r-xs\" aria-hidden=\"true\"> &middot; </span>\n<span class=\"text-muted\" ng-bind-html=\"' âžš' | uibTypeaheadHighlight:query\"></span>\n// Prompt: ${prompt}\n`\n    }\n    if(field === 'search_page_template') {\n        prompt = `\n// Prompt: Show the search results with highlighted urls\n<div>\n  <a href=\"{{item.url}}\" target=\"{{item.target}}\" class=\"h4 text-primary m-b-sm block\">\n    <i class=\"fa fa-external-link m-r-sm\"></i>\n    <span ng-bind-html=\"highlight(item.name, data.q)\"></span> \n  </a>\n  <span class=\"text-muted\">\n    <p ng-bind-html=\"highlight(item.url, data.q)\"></p>\n  </span>\n</div>\n// Prompt: ${prompt}\n`\n    }\n}\nif(table === 'sp_widget'){\n    // fields are\n    // template:html\n    // css\n    // script: server\n    // client_script\n    // link\n    if(field === 'template'){\n        prompt = `\n// Prompt: Show a watchlist\n<div class=\"container-fluid\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <h1>Watchlist</h1>\n            <p>\n                <button class=\"btn btn-primary\" ng-click=\"c.addMe()\">Add Me</button>\n                <button class=\"btn btn-primary\" ng-click=\"c.removeMe()\">Remove Me</button>\n            </p>\n            <p>\n                <span ng-repeat=\"watcher in c.watchlist\">\n                    {{watcher.name}}\n                </span>\n            </p>\n        </div>\n    </div>\n</div>\n// Prompt: ${prompt}\n`\n    }\n    if(field === 'css'){\n        prompt = `\n// Prompt: dashboard recomendations\n#dashboard-recommendations .panel-body {\n    padding: 0;\n}\n#dashboard-recommendations .panel-body .panel .list-group {\n    margin-bottom: 0;\n}\n#dashboard-recommendations .panel-body .panel .list-group-item {\n    border: none;\n    padding: 7px 15px;\n}\n.h4.panel-title:focus {\n  outline: 5px auto -webkit-focus-ring-color;\n}\n\n// Prompt: ${prompt}\n`\n    }\n    if(field === 'script'){\n        prompt = `\n// Prompt: set watchlist\n(function(){\n    var watchlist = [];\n    data.watchlist = watchlist;\n})();\n// Prompt: get trending articles\n(function() {\n  /* populate the 'data' object */\n  /* e.g., data.table = $sp.getValue('table'); */\n\tvar knowledgeBases = String($sp.getKnowledgeBases());\n\tvar UserRecommendationUtil = new sn_hr_sp.UserRecommendationUtil();\n\tdata.users = options.users || [];\n\tdata.title = gs.getMessage(\"Knowledge Articles\");\n\tvar displayCount = 3;\n\tdata.sysId = $sp.getParameter('sys_id') || options.ariaLabelId;\n\tif(GlidePluginManager.isActive('com.glide.platform_ml') && GlidePluginManager.isActive('com.sn_hr_core') && data.users && data.users.length > 0) {\n\t\tvar results = UserRecommendationUtil.getArticlesforSimilarUsers(data.users,knowledgeBases,displayCount,options.recentActivityCutoffDate);\n\t\tif(results.length < displayCount) {\n\t\t\tvar mostViewedArticleCount = displayCount - results.length;\n\t\t\tvar articlesToIgnore = [];\n\t\t  for (var i=0;i<results.length;i++) {\n\t\t\t\tarticlesToIgnore.push(results[i].sys_id);\n\t\t\t}\n\t\t\tvar mostViewedArticles = getMostViewedArticles(mostViewedArticleCount,articlesToIgnore); \n\t\t\tresults = results.concat(mostViewedArticles);\n\t\t}\n\t\tdata.response = results;\n\t}\n\telse\n\t\tdata.response = getMostViewedArticles(displayCount);\n\t\n  function getMostViewedArticles(articleCount,ignoreArticles) {\n    var articlesPayload = {\n      knowledgeBases: knowledgeBases,\n      kbRecords : $sp.getAllKBRecords(knowledgeBases),\n      articleCount: articleCount,\n      ignoreArticles: ignoreArticles\n    };\n    var mostViewedArticles = UserRecommendationUtil.getMostViewedArticles(articlesPayload);\n    return mostViewedArticles;\n  }\n\t\n})();\n// Prompt: ${prompt}\n`\n    }\n    if(field === 'client_script'){\n        prompt = `\n// Prompt: add an addme and removeme method to set watchlist\napi.controller=function(){\n    var c = this;\n    c.watchlist = [];\n    c.addMe = function(){\n        c.watchlist.push({name:g_user.name});\n    };\n    c.removeMe = function(){\n        c.watchlist = c.watchlist.filter(function(watcher){\n            return watcher.name != g_user.name;\n        });\n    };\n};\n// Prompt: Show relevant articles\nfunction($rootScope , snAnalytics) {\n  /* widget controller */\n  var c = this;\n\t\n\t\n\tif(!(c.data.response) || c.data.response.length ==0) {\n\t$rootScope.$emit(\"NO_ARTICLE\");\n\t}\n\t\n\tc.articleOpened = function(title){\n\t\tvar payload= {};\n\t\tpayload.name = \"Relevant For You\";\n\t\tpayload.data = {};\n\t\tpayload.data[\"Article Title\"] = title;\n\t\tsnAnalytics.addEvent(payload);\n\t}\n\t\n}\n// Prompt: ${prompt}\n`\n    }\n    if(field === 'link'){\n        prompt = `\n// Prompt: hide pinned articles to click of cross icon\nfunction(scope) {\t\n\tvar c = scope.c;\n\t\n\t//hide pinned articles on click of cross icon\n\tc.hidePinSection = function(elm) {\n\t\tscope.$evalAsync(function(){\n\t\t\tc.showPinnedArticles = !c.showPinnedArticles;\n\t\t});\n\t\t\n\t\t$('.kb-summary-block .pinned-articles').slideUp(\"slow\", function() {\n\t\t});\t\t\t\t\n\t};\n\t\n\t//show pinned articles on click of 'Show pinned articles' link\n\tc.showPinSection = function(elm) {\n\t\tc.showPinnedArticles = !c.showPinnedArticles;\n\t\t$('.kb-summary-block .pinned-articles').slideDown(\"slow\", function() {\t\t\t\n\t\t});\n\t};\n}\n// Prompt: ${prompt}\n`\n    }\n}\nif(table==='sysevent_email_action' || table==='sysevent_email_template'){\n    //fields\n    // message_html\n    // advanced_condition enable by proptery \n    if(field === 'advanced_condition'){\n        prompt = `\n// Prompt: control this by property\nanswer = gs.getProperty('glide.knowman.enable_approval_notification','false');\n// Prompt: ${prompt}\n`\n    }\n    if(field === 'message_html') {\n        stop = '<!-- Prompt: '\n        prompt = `\n<!-- Prompt: Knowledge Article Approved -->\n<p>&nbsp;</p>\n<table id=\"backgroundTable\" style=\"font-size: 17px; line-height: 100%; color: #424e5b; background: #F9F9F9; width: 100%; margin: 0; padding: 0; border-collapse: collapse; mso-table-lspace: 0;\" border=\"0\" width=\"100%\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td style=\"border-collapse: collapse;\" valign=\"top\">\n<table id=\"header\" style=\"width: 100%; margin: 0 auto; border-collapse: collapse; mso-table-lspace: 0;\" border=\"0\" width=\"100%\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td style=\"padding: 20px 16px 12px; border-collapse: collapse;\" valign=\"bottom\">\n<div class=\"full-width text-center\" style=\"max-width: 600px; margin: 0 auto; text-align: center;\"><img style=\"align: baseline; outline: none; text-decoration: none; -ms-interpolation-mode: bicubic;\" title=\"\" src=\"/sn-logo-dark-green-email.pngx\" alt=\"ServiceNow\" width=\"226px\" height=\"38px\" align=\"baseline\" border=\"\" hspace=\"\" vspace=\"\" /></div>\n</td>\n</tr>\n</tbody>\n</table>\n</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td style=\"border-collapse: collapse;\" valign=\"top\">\n<div class=\"full-width\" style=\"max-width: 600px; margin: 0 auto;\">\n<div class=\"card\" style=\"background: #FFF; border-radius: 0.5rem; padding: 2rem; margin-bottom: 1rem;\">\\${mail_script:km_approved}\n<div>&nbsp;</div>\n<div>Thanks</div>\n<div>KB Administrator</div>\n<hr style=\"width: 100%; border: none; border-bottom: 1px solid #ECECEC;\" /></div>\n</div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<!-- Prompt: Lane limit reached -->\n<p><link href=\"/styles/vtb_notifications.css\" rel=\"stylesheet\" /></p>\n<div>\n<table id=\"backgroundTable\" style=\"font-size: 17px; line-height: 100%; color: #424e5b; background: #F9F9F9; width: 100%; margin: 0; padding: 0; border-collapse: collapse; mso-table-lspace: 0;\" border=\"0\" width=\"100%\" cellpadding=\"0\">\n<tbody>\n<tr>\n<td style=\"border-collapse: collapse;\" valign=\"top\">\n<p>&nbsp;</p>\n<div class=\"full-width\" style=\"max-width: 600px; margin: 0 auto;\">\n<div class=\"card\" style=\"background: #FFF; border-radius: 0.5rem; padding: 2rem; margin-bottom: 1rem;\">\n<p style=\"font-size: 17px; margin: 0 0 16px; line-height: 24px;\">\\${board.owner.name},</p>\n<p style=\"font-size: 17px; margin: 0 0 16px; line-height: 24px;\">There are <strong>\\${mail_script:vtb_number_of_cards}</strong>&nbsp;tasks in the lane <strong>\\${lane.name}</strong> of the <a href=\"/$vtb.do?sysparm_board=\\${board.sys_id}\">\\${board.name}</a> Visual Task Board which is the Lane limit.</p>\n<hr style=\"width: 100%; border: none; border-bottom: 1px solid #ECECEC;\" />\n<p>Manage the emails you receive in \\${NOTIF_PREFS} or \\${NOTIF_UNSUB}.</p>\n</div>\n</div>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>&nbsp;</p>\n<!-- Prompt: ${prompt} -->\n`\n    }\n}\nif(table==='sysevent_in_email_action'){\n    if(field === 'script'){\n        prompt = `\n// Prompt: Create incident\n//\tNote: current.opened_by is already set to the first UserID that matches the From: email address\n\ncurrent.caller_id = gs.getUserID();\ncurrent.comments = \"received from: \" + email.origemail + \"\\n\\n\" + email.body_text;\ncurrent.short_description = email.subject;\n\ncurrent.category = \"inquiry\";\ncurrent.incident_state = IncidentState.NEW;\ncurrent.notify = 2;\ncurrent.contact_type = \"email\";\n\nif (email.body.assign != undefined)\n   current.assigned_to = email.body.assign;\n\nif (email.importance != undefined) {\n   if (email.importance.toLowerCase() == \"high\") {\n\t\tcurrent.impact = 1;\n\t\tcurrent.urgency = 1;\n   }\n}\n\nif (current.canCreate())\n\tcurrent.insert();\n// Prompt: ${prompt}\n`\n    }\n}\nif(table === 'sysevent_script_action'){\n    if(field === 'script'){\n        prompt = `\n// Prompt: Lock out user\n//\n// Check to see if the user has failed to login too many times\n// when the limit is reached, lock the user out of the system\n//\nvar gr = new GlideRecord(\"sys_user\");\ngr.addQuery(\"user_name\", event.parm1.toString());\ngr.query();\nif (gr.next()) {\n    gr.failed_attempts += 1;\n    if (gr.failed_attempts > 5) {\n       gr.locked_out = true;\n       gr.update();\n       gs.log(\"User \" + event.parm1 + \" locked out due to too many invalid login attempts\");\n   } else {\n       gr.update();       \n   }\n}\n// Prompt: ${prompt}\n`\n    }\n}\nif(table === 'sys_script_email'){\n    if(field === 'script'){\n        prompt = `\n// Prompt: attach links\nattachLinks();\nfunction attachLinks() {\n   //Check for any attachments and add attachment links if they exist\n   var gr = new GlideRecord('sys_attachment');\n   gr.addQuery('table_sys_id',current.sys_id);\n   gr.query();\n   if (gr.hasNext()) {\n      template.print(\"Attachments: <br />\");\n      while (gr.next()) {\n         var attachLink = '<a href=\"' + gs.generateURL(gr.getTableName(),gr.sys_id) +  '\">' + gr.file_name + '</a>';\n         template.print(attachLink +  \"<br />\");\n      }\n      template.print(\"<hr/>\");\n   }\n}\n// Prompt: get due days\n(function runMailScript(/* GlideRecord */ current, /* TemplatePrinter */ template,\n          /* Optional EmailOutbound */ email, /* Optional GlideRecord */ email_action,\n          /* Optional GlideRecord */ event) {\n\ttemplate.print(getDueDaysMessage());\n\t\n\tfunction getDueDaysMessage(){\n\t\tvar today = new GlideDateTime().getLocalDate();\n\t\tvar dueDate = new GlideDateTime(current.due_date);\n\t\tvar remainingDays = GlideDateTime.subtract(today,dueDate.getLocalDate()).getDayPart();\n\t\tvar message = \"\";\n\t\tif(remainingDays>1)\n\t\t\tmessage = ' is due in ' + remainingDays+ ' days';\n\t\telse if (remainingDays==1)\n\t\t\t\tmessage = ' is due tomorrow';\n\t\telse if (remainingDays==0)\n\t\t\t\tmessage = ' is due today';\n\t\telse\n\t\t\tmessage = ' was due on ' + dueDate.getLocalDate(); \n\t\treturn message;\n\t}\n\n})(current, template, email, email_action, event);\n// Prompt: ${prompt}\n`\n    }\n}\nif(table === 'sys_ui_action'){\n    if(field === 'script'){\n        prompt = `\n// Prompt: Deletes current record after confirmation.\nvar ajaxHelper;\nvar objSysId;\nvar tblName;\nvar dlg;\nvar returnUrl;\nvar fromRelList;\nvar module;\nvar listQuery;\nvar stackName = null;\n\nfunction confirmAndDeleteFromForm() {   \n    objSysId = g_form.getUniqueValue();\n    tblName = g_form.getTableName();\n    fromRelList = g_form.getParameter('sysparm_from_related_list');\n    module = g_form.getParameter('sysparm_userpref_module');\n    listQuery = g_form.getParameter('sysparm_record_list');\n    stackName = g_form.getParameter('sysparm_nameofstack');\n\n    ajaxHelper = new GlideAjax('DeleteRecordAjax');\n    ajaxHelper.addParam('sysparm_name', 'getCascadeDeleteTables');\n    ajaxHelper.addParam('sysparm_obj_id', objSysId);\n    ajaxHelper.addParam('sysparm_table_name', tblName);\n    ajaxHelper.addParam('sysparm_nameofstack', stackName);\n    ajaxHelper.getXMLAnswer(getCascadeDelTablesDoneForm.bind(this), null, null); \n}\n\nfunction getCascadeDelTablesDoneForm(answer, s) {\n    \n    var ansrArray = answer.split(';');\n    returnUrl = ansrArray[0];\n    var objList = ansrArray[2];\n    dlg = new GlideDialogWindow('delete_confirm_form');\n    dlg.setTitle('Confirmation');\n    if(objList == null) {\n       dlg.setWidth(275);\n    } else {\n       dlg.setWidth(450);\n    }\n    dlg.setPreference('sysparm_obj_id', objSysId);\n    dlg.setPreference('sysparm_table_name', tblName);\n    dlg.setPreference('sysparm_delobj_list', objList);  \n    dlg.setPreference('sysparm_parent_form', this);\n    dlg.render();\n    \n}\n\nfunction deleteCompleted() {\n    dlg.destroy();\n    var w = getTopWindow();\n    cbField = w.document.getElementById('glide_dialog_form_target_' + tblName);\n    if(cbField != null) {\n        // this is a dialog form, make sure the completion callback is called\n        cbField.value = 'sysverb_delete:' + objSysId;\n        cbField.onchange();\n        \n       // dismiss the dialog form\n       var elem = window.parent.document.getElementById('body_FormDialog');\n       if (elem)\n           new GlideWindow().locate(elem).destroy();\n    } else {\n        // this is a regular form, use the return URL to back to the correct view, where possible\n        if (returnUrl != 'null') {\n            window.location.href = returnUrl;\n        } else {           \n            // this is just the default case, in case everything else blows up, should never happen!\n            window.location.href = window.location.protocol + '/' + window.location.host + '/' + tblName + '_list.do?sysparm_userpref_module=' + module + '&sysparm_query=' + listQuery + '&sysparm_cancelable=true';\n        }        \n    }\t   \n}\n// Prompt: ${prompt}\n`\n    }\n}\nif(table ==='sys_ui_page'){\n    if(field === 'html'){\n        stop = '<!--Prompt:'\n        prompt = `\n<!--Prompt: Preview Email\n<div id=\"email_preview\">\n\t<iframe src='/preview_email_body.do?sysparm_email_sys_id=\\${sysparm_id}&amp;sysparm_translation=\\${sysparm_translation}&amp;sysparm_direct=true' id='email_preview_iframe' width='100%' overflow-y='hidden' overflow-x='auto' frameborder='0' title=\"\\${gs.getMessage('Preview Email')}\" />\n</div>\n<!--Prompt: ${prompt}\n`\n    }\n    if(field === 'client_script'){\n        prompt = `\n// Prompt: Preview Email\n$j('#email_preview_iframe').on('load', function() {\n\tadjustIFrameSize($j(this));\n});\n\nfunction adjustIFrameSize(iframe) {\n    var height = 0;\n\n    if (isMSIE9 || isMSIE10) {\n        height = iframe.contents().find('body').outerHeight(true);\n    } else {\n        height = iframe.contents().height();\n    }\n\tiframe.height(height);\n\tiframe.width(iframe.parent().width());\n}\n// Prompt: ${prompt}\n`\n    }\n    if(field === 'processing_script'){\n        prompt = `\n// Prompt: cleanup import sets\nif (import_set_table_list == '') {\n  gs.addInfoMessage(\"Please select an import set table first\");\n} else {\n  var t_array = import_set_table_list.split(',');\n  for(i = 0; i < t_array.length; i++) {\n    var cleaner = new ImportSetCleaner(t_array[i]);\n    // prevent deletion of system tables and system maps\n    if (t_array[i].indexOf(\"imp_\") == 0) {\n      cleaner.setDataOnly(true);\n      cleaner.setDeleteMaps(false);\n    } else {\n      cleaner.setDataOnly(data_only == 'true');\n      cleaner.setDeleteMaps(maps == 'true');\n    }\n    \n    cleaner.clean();\n  }\n  response.sendRedirect(\"import_log_list.do?sysparm_query=ORDERBYDESCsys_created_on^source=Cleanup^sys_created_on>javascript:gs.daysAgo(1)\");\n  gs.addInfoMessage(\"Cleanup completed<script>refreshNav();</script>\");\n  \t\n}\n// Prompt: ${prompt}\n`\n    }\n\n}\nif(table === 'sys_ui_script'){\n    if(field === 'script'){\n        prompt = `\n// Prompt: Connection Test\nvar ConnectionTest = Class.create();\n\n// companion script to ui_select_list macro\nConnectionTest.prototype = {\n        LARGE_IMG: { src: \"images/speed_test_large.gifx\", size: \"171648\" },\n\n\tinitialize: function() {\n\t    this.runs = 6;\n            this.attempts = 0;\n            this.results = [];\n\t},\n\n        setRuns: function(runs) {\n            this.runs = runs;\n        },\n\n        run: function() {\n            var image = this.LARGE_IMG;\n\n            for(var i = 0; i < this.runs; i++) {\n                var imgUrl = image.src + \"?r=\" + Math.random();\n                var testImage = new Image();\n                var startTime = (new Date()).getTime();\n                var imageSize = image.size;\n                testImage.onload = this.addRunResult.bind(this, startTime, imageSize);\n                testImage.src = imgUrl;\n                testImage.alt = \"Test Connection\";\n            }\n        },\n\n        addRunResult: function(startTime, size) {\n            var endTime = (new Date()).getTime();\n            var runTime = endTime - startTime;\n            this.results.push({ time: runTime, size: size });\n\n            this.attempts++;\n\n            if (this.attempts == this.runs)\n                this.complete();\n        },\n\n        setComplete: function(func) {\n            this.oncomplete = func.bind(this);\n        },\n\n        complete: function() {\n            if (this.oncomplete)\n                this.oncomplete();\n        },\n\n        getResults: function() {\n            return this.results;\n        },\n\n\ttype: \"ConnectionTest\"\n}\n// Prompt: ${prompt}\n`\n    }\n}\n\n//ecc_agent_script_include\n//sys_script_include\nif(table === 'sys_script_include' || table === 'ecc_agent_script_include'){\n    prompt = `\n// Prompt: Class pattern\nvar ClassPattern = Class.create();\n\nClassPattern.prototype = {\n   initialize : function() {\n   },\n\n   myFunction : function() {\n      //Put function code here\n   },\n\n   _privateFunction: function() {\n       //Put private function code here\n   },\n\n   type : 'ClassPattern'\n};\n// Prompt: Function Pattern\n// FunctionPattern\nvar doSomething = function() {\n  // Put function code here\n}\n// Prompt: Namespace Pattern\nvar NamespacePattern = {\n    doSomething: function() {\n        // Put function code here\n    },\n\n    doSomethingElse: function() {\n        // Put other function code here\n    }\n};\n// Prompt: Module Pattern\nvar ModulePattern = (function() {\n    var privateVariable;\n\n    function myFunction() {\n        // Put function code here\n    }\n\n    function privateFunction() {\n        // Put private function code here\n    }\n\n    return {\n        'myFunction': myFunction\n    }\n})();\n// Prompt: ${prompt}\n`\n}\nif(table==='sys_script_fix' || table ==='sysauto_script'){\n    prompt = `\n// Prompt: Search for polaris\nvar polarisSearch = new GlideRecord('m2m_search_context_config_search_source');\n\nvar searchRecord = new GlideRecord('sys_search_source');\nvar globalSourceGroup = new GlideRecord('ts_group');\nvar globalSource = new GlideRecord('ts_table');\n\nglobalSource.query();\n\nwhile (globalSource.next()) {\n    searchRecord.initialize();\n\n    var label = globalSource.group.name;\n    //Remove '& Places' from name\n    if (label.equals('People & Places')) {\n        label = label.split('&')[0].trim();\n    }\n    label += ' - ' + GlideMetaData.getTablePlural(globalSource.name);\n    searchRecord.setValue('name', label);\n    searchRecord.setValue('source_table', globalSource.name);\n    searchRecord.setValue('active', globalSource.active);\n    searchRecord.setValue('condition', globalSource.condition);\n\n    // Carry over the roles and groups on the parent ts_group to the new search source\n    if (globalSourceGroup.get(globalSource.group)) {\n        searchRecord.setValue('roles', globalSourceGroup.getValue('roles'));\n        searchRecord.setValue('group', globalSourceGroup.getValue('group'));\n    }\n\n    var current = searchRecord.insert();\n\n    polarisSearch.initialize();\n    polarisSearch.setValue('search_context_config', 'c861cea2c7022010099a308dc7c26041');\n    polarisSearch.setValue('source', current);\n    polarisSearch.setValue(\"order\", globalSource.order + (globalSource.group.order * 2));\n    polarisSearch.insert();\n}\n// Prompt: ${prompt}\n`\n}",
    "temperature": 0.7,
    "maxTokens": 500,
    "topP": 1,
    "bestOf": 1,
    "n": 1,
    "stop": "END",
    "frequencyPenalty": 0,
    "presencePenalty": 0,
    "required": "action, input"
  },
  {
    "cuid": "clcwpewlf0000sbbf876b6qq1",
    "createdAt": "2023-01-15 01:33:57.507",
    "updatedAt": "2023-01-15 01:33:57.507",
    "name": "test-100",
    "version": 1,
    "description": "This action",
    "endpoint": "https://api.openai.com/v1/completions",
    "cost": 0.02,
    "price": 0.2,
    "model": "text-davinci-002",
    "prompt": "",
    "temperature": 0.7,
    "maxTokens": 500,
    "topP": 1,
    "bestOf": 1,
    "n": 1,
    "stop": "END",
    "frequencyPenalty": 0,
    "presencePenalty": 0,
    "required": "action, input"
  },
  {
    "cuid": "clcfpn2vc00d5ww24bg5j0yae",
    "createdAt": "2023-01-03 04:08:13.897",
    "updatedAt": "2023-01-08 22:24:39.77",
    "name": "inline-suggest-code",
    "version": 1,
    "description": "This action",
    "endpoint": "https://api.openai.com/v1/completions",
    "cost": 0.02,
    "price": 0.2,
    "model": "code-cushman-001",
    "prompt": "prompt=prompt",
    "temperature": 0,
    "maxTokens": 256,
    "topP": 1,
    "bestOf": 1,
    "n": 1,
    "stop": "\\n\\n",
    "frequencyPenalty": 0,
    "presencePenalty": 0,
    "required": "action, input"
  },
  {
    "cuid": "clcwpmwdw0002sbbf9mt85y2w",
    "createdAt": "2023-01-15 01:40:10.484",
    "updatedAt": "2023-01-15 19:26:37.47",
    "name": "test-101",
    "version": 1,
    "description": "This action",
    "endpoint": "https://api.openai.com/v1/completions",
    "cost": 0.02,
    "price": 0.2,
    "model": "text-davinci-002",
    "prompt": "prompt = 'weird'//fdsfadsfdsafsdfadfasfda",
    "temperature": 0.7,
    "maxTokens": 500,
    "topP": 1,
    "bestOf": 1,
    "n": 1,
    "stop": "END",
    "frequencyPenalty": 0,
    "presencePenalty": 0,
    "required": "action, input"
  },
  {
    "cuid": "clcsl7zxb0016t024tvj7z5cn",
    "createdAt": "2023-01-12 04:25:32.064",
    "updatedAt": "2023-01-16 07:14:48.189",
    "name": "docs-diagram",
    "version": 1,
    "description": "This action",
    "endpoint": "https://api.openai.com/v1/completions",
    "cost": 0.02,
    "price": 0.2,
    "model": "code-davinci-002",
    "prompt": "prompt = `<!--Prompt: Sequence between alice and john-->\n<div class=\"mermaid\">\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    John-->>-Alice: I feel great!\n</div>\n<!--Prompt: Flow with one task, no approvals-->\n<div class=\"mermaid\">\nflowchart\n  S0(Start)\n  T1(Task 1)\n  E0(End)\n  S0-->T1\n  T1-->E0\n</div>\n<!--Prompt: Flow with two tasks, no approvals in parellel-->\n<div class=\"mermaid\">\nflowchart\n  S0(Start)\n  T1(Task 1)\n  T2(Task 2)\n  E0(End)\n  S0-->T1\n  S0-->T2\n  T1-->E0\n  T2-->E0\n</div>\n<!--Prompt: Flow with two tasks, no approvals in serial-->\n<div class=\"mermaid\">\nflowchart\n  S0(Start)\n  T1(Task 1)\n  T2(Task 2)\n  E0(End)\n  S0-->T1\n  T1-->T2\n  T2-->E0\n</div>\n<!--Prompt: Flow with one tasks and one approval-->\n<div class=\"mermaid\">\nflowchart\n  S0(Start)\n  A1(Approval 1)\n  T1(Task 1)\n  E0(End)\n  S0-->A1\n  A1--Rejected-->E0\n  A1--Approved-->T1\n  T1-->E0\n</div>\n<!--Prompt: Flow with two tasks, and an approvals in serial-->\n<div class=\"mermaid\">\nflowchart\n  S0(Start)\n  A1(Approval 1)\n  T1(Task 1)\n  T2(Task 2)\n  E0(End)\n  S0-->A1\n  A1--Rejected-->E0\n  A1--Approved-->T1\n  T1-->T2\n  T2-->E0\n</div>\n<!--Prompt: Flow with two approvals in serial, and one task-->\n<div class=\"mermaid\">\nflowchart\n  S0(Start)\n  A1(Approval 1)\n  A2(Approval 2)\n  T1(Task 1)\n  E0(End)\n  S0-->A1\n  A1--Rejected-->E0\n  A1--Approved-->A2\n  A2--Rejected-->E0\n  A2--Approved-->T1\n  T1-->E0\n</div>\n<!--Prompt: Flow with two tasks, and two approvals in serial-->\n<div class=\"mermaid\">\nflowchart\n  S0(Start)\n  A1(Approval 1)\n  A2(Approval 2)\n  T1(Task 1)\n  T2(Task 2)\n  E0(End)\n  S0-->A1\n  A1--Rejected-->E0\n  A1--Approved-->A2\n  A2--Rejected-->E0\n  A2--Approved-->T1\n  T1-->T2\n  T2-->E0\n</div>\n<!--Prompt: pie chart of pets adopted by volunteers-->\n<div class=\"mermaid\">\npie title Pets adopted by volunteers\n  \"Dogs\" : 386\n  \"Cats\" : 85\n  \"Rats\" : 15\n</div>\n<!--Prompt: ServiceNow Certificate Integration Sequence Diagram-->\n<div class=\"mermaid\">\nsequenceDiagram\n  participant ui as User Interactions\n  participant sn as Servicenow\n  participant ms as MidServer\n  participant co as Certificate Authority\n  ui->>sn: User Requests Cert\n  sn->>ms: Run generate-csr-key.js\n  ms->>co: CSR,KEY, and Enrolls Cert\n  co->>sn: Returns Order #\n  loop Download\n  sn->>sn: Waits 2 minutes\n  sn->>ms: Run download-zip-and-upload-cert.js\n  ms->>co: Download Cert\n  co->>sn: Cert Processing\n  end\n  co->>ms: Cert Downloaded\n  ms->>ms: Generate CRT\n  ms->>ms: Generate PFX\n  ms->>ms: Zip CRT, PFX, P7B\n  ms->>sn: Send Zip to SN\n  sn->>ui: Notify user with zip file\n</div>\n<!--Prompt: Show the flow of interactions between a user and an e-commerce website when placing an order.-->\n<div class=\"mermaid\">\nsequenceDiagram\n    User->>E-commerce Website: Place Order\n    E-commerce Website->>Payment Gateway: Verify Payment\n    Payment Gateway->>E-commerce Website: Payment Approved\n    E-commerce Website->>Logistics Company: Prepare Shipment\n    Logistics Company->>E-commerce Website: Shipment Prepared\n    E-commerce Website->>User: Order Confirmation\n</div>\n<!-- Prompt: Illustrate the communication between a mobile app and a server during the login process.-->\n<div class=\"mermaid\">\nsequenceDiagram\n    User->>Mobile App: Login\n    Mobile App->>Server: Send Login Credentials\n    Server->>Authentication Service: Verify Login Credentials\n    Authentication Service->>Server: Credentials Verified\n    Server->>Mobile App: Login Successful\n</div>\n<!-- Prompt: Depict the sequence of events that occur when a user searches for a product on a search engine.-->\n<div class=\"mermaid\">\nsequenceDiagram\n    User->>Search Engine: Search\n    Search Engine->>Search Service: Get Results\n    Search Service->>Index: Retrieve Matches\n    Index->>Search Service: Return Matches\n    Search Service->>Search Engine: Send Results\n    Search Engine->>User: Display Results\n</div>\n<!-- Prompt: Show the interactions between different modules within a banking system during a money transfer operation.-->\n<div class=\"mermaid\">\nsequenceDiagram\n    User->>Banking System: Transfer Money\n    Banking System->>Account Service: Check Balance\n    Account Service->>Banking System: Return Balance\n    Banking System->>Security Service: Verify Transaction\n    Security Service->>Banking System: Transaction Verified\n    Banking System->>Account Service: Deduct Funds\n    Account Service->>Banking System: Funds Deducted\n    Banking System->>Account Service: Add Funds\n    Account Service->>Banking System: Funds Added\n    Banking System->>User: Transaction Complete\n</div>\n<!-- Prompt: Create a sequence diagram that demonstrates the process of video streaming from a server to a client.-->\n<div class=\"mermaid\">\nsequenceDiagram\n    User->>Video Player: Play\n    Video Player->>Server: Request Video\n    Server->>Video Service: Get Video\n    Video Service->>Server: Return Video\n    Server->>Video Player: Send Video\n    Video Player->>User: Display Video\n</div>\n<!-- Prompt: Describe the flow of interactions between a user, a website, and a payment gateway during an online transaction.-->\n<div class=\"mermaid\">\nsequenceDiagram\n    User->>E-commerce Website: Buy Item\n    E-commerce Website->>Payment Gateway: Verify Payment\n    Payment Gateway->>User: Payment Approval\n    User->>E-commerce Website: Confirm Purchase\n    E-commerce Website->>Payment Gateway: Payment Confirmed\n    Payment Gateway->>E-commerce Website: Payment Received\n</div>\n<!-- Prompt: Illustrate the sequence of events that occur when a user logs in to a social media platform.-->\n<div class=\"mermaid\">\nsequenceDiagram\n    User->>Social Media Platform: Login\n    Social Media Platform->>Authentication Service: Verify Login Credentials\n    Authentication Service->>Social Media Platform: Credentials Verified\n    Social Media Platform->>User: Login Successful\n</div>\n<!-- Prompt: Depict the communication between a client and a server during a file upload process.-->\n<div class=\"mermaid\">\nsequenceDiagram\n    User->>Client: Upload file\n    Client->>Server: Send File\n    Server->>File Service: Save File\n    File Service->>Server: File Saved\n    Server->>Client: File Upload Successful\n</div>\n<!-- Prompt: Create a sequence diagram that demonstrates the process of sending an email using an email client.-->\n<div class=\"mermaid\">\nsequenceDiagram\n    User->>Email Client: Compose email\n    Email Client->>SMTP Server: Send email\n    SMTP Server->>MTA: Transfer email\n    MTA->>MDA: Deliver email\n    MDA->>Recipients email client: Display email\n</div>\nA pie chart showing the percentage of global energy consumption by source (fossil fuels, nuclear, hydro, solar, etc.):-->\n<div class=\"mermaid\">\npie\n   \"Fossil Fuels\" : 45,\n   \"Nuclear\" : 20,\n   \"Hydro\" : 10,\n   \"Solar\" : 15,\n   \"Other\" : 10\n</div>\n<!-- Prompt: A pie chart showing the distribution of expenses in a household budget:-->\n<div class=\"mermaid\">\n  pie\n    \"Rent/Mortgage\" : 30,\n    \"Utilities\" : 10,\n    \"Food\" : 20,\n    \"Transportation\" : 15,\n    \"Entertainment\" : 10,\n    \"Savings\" : 15\n</div>\n<!-- Prompt: A pie chart showing the market share of different smartphone brands:-->\n<div class=\"mermaid\">\n  pie\n    \"Samsung\" : 30,\n    \"Apple\" : 20,\n    \"Huawei\" : 15,\n    \"Xiaomi\" : 10,\n    \"Other\" : 25\n</div>\n<!-- Prompt: A pie chart showing the proportion of students in a school by grade level:-->\n<div class=\"mermaid\">\n  pie\n    \"Kindergarten\" : 10,\n    \"Elementary\" : 25,\n    \"Middle School\" : 20,\n    \"High School\" : 30,\n    \"Other\" : 15\n</div>\n<!-- Prompt: A pie chart showing the percentage of website traffic by source (direct, search, referral, social):-->\n<div class=\"mermaid\">\n  pie\n    \"Direct\" : 40,\n    \"Search\" : 25,\n    \"Referral\" : 20,\n    \"Social\" : 15\n</div>\n<!-- Prompt: ${prompt}-->`",
    "temperature": 0.7,
    "maxTokens": 2000,
    "topP": 1,
    "bestOf": 1,
    "n": 1,
    "stop": "<!--",
    "frequencyPenalty": 0,
    "presencePenalty": 0,
    "required": "action, input"
  },
  {
    "cuid": "clbzu71zd000pww249xvgvtht",
    "createdAt": "2022-12-23 01:31:25.514",
    "updatedAt": "2023-01-09 03:27:12.285",
    "name": "complete",
    "version": 2,
    "description": "This action",
    "endpoint": "https://api.openai.com/v1/completions",
    "cost": 0.02,
    "price": 0.2,
    "model": "text-davinci-002",
    "prompt": "model = 'code-davinci-002';\nif (table === 'catalog_script_client' || table === 'sys_script_client') {\n    stop = `// Prompt:`;\n\n    if(type == 'onSubmit'){\n        prompt = `\n// Prompt: If the cost is more than 100, dont allow submit\nfunction onSubmit() {\n    if (parseFloat(g_form.getValue('cost')) > 100 ) {\n        g_form.addErrorMessage(\"Cost is more than 100, lower cost to submit.\"); // show error to let user know why\n        return false; // disallow submit\n    }\n}\n// Prompt: ${prompt}\n    `\n    }\n    if(type == 'onLoad'){\n        prompt = `//END\n// Prompt: Set the color to purple, and date to now.\nfunction onLoad() {\n    g_form.setValue('color', 'purple'); // set the color to purple\n    var now = new Date(); // make a date obj for now\n    var dateInUserFormat = getDateTimeFromFormat(now, g_user_date_time_format); //set it to the logged in users format\n    g_form.setValue('date', dateInUserFormat);\n}\n// Prompt: If the user is not part of the Facilities Group, remove \"office\" from the type of access choice.\nfunction onLoad(){\n    var userAjax = new GlideAjax('global.UserAjax'); // make a ajax call to script include UserAjax\n    userAjax.addParam('sysparm_name', 'getGroups'); // call the getGroups function\n    userAjax.addParam('sysparm_obj', JSON.stringify({\"userId\": g_user.userId})); //pass in the logged in user's id\n    userAjax.getXML(function(response){ // handle the response\n        var answer = response.responseXML.document.Element.getAttribute('answer'); // get the answer\n        var serverObj = JSON.parse(answer); // make the response an object\n        var notPartOfFacilities = serverObj.groups.indexOf('Facitilites Group') == -1; // if groups does not contain facilities\n        if(notPartOfFacilities){\n            g_form.removeOption('office','access'); // remove this option\n        }\n    })\n}\n// Prompt: ${prompt}\n    `    \n\n    }\n    if(type == 'onChange'){\n\n        prompt = `//END\n// Prompt: When the caller is set to jace, set the group to cab\nfunction onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if (isLoading || newValue === '') { return; }\n    if (newValue == 'jace') { // when the new value is jace\n        g_form.setValue('assignment_group', 'cab'); // set the group to cab, replace w/sysid\n    }\n}\n// Prompt: If the book changes to read, set the date to today.\nfunction onChange(control, oldValue, newValue, isLoading, isTemplate) {\n  if (isLoading || newValue === '') { return; }\n  if (newValue == 'read') { // when the new value is read\n    var now = new Date(); // make a variable for today\n    var dateInUserFormat = getDateTimeFromFormat(now, g_user_date_time_format); // get it in the users format\n    g_form.setValue('date', dateInUserFormat); // set the date to today\n  }\n}\n// Prompt: show me the groups the user picked is a member of\nfunction onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if (isLoading || newValue === '') { return; }\n    var userAjax = new GlideAjax('global.UserAjax'); // call the UserAjax Script Include\n    userAjax.addParam('sysparm_name', 'getGroups'); // call the getGroups function\n    userAjax.addParam('sysparm_obj', JSON.stringify({\"userId\": newValue})); // pass in the new value for the user\n    userAjax.getXML(function(response){\n        var responseDocument = response.responseXML.document.Element.getAttribute('answer'); //get the answer\n        var serverObj = JSON.parse(answer); // make it a json object\n        var groups = serverObj.groups.join(', '); // make it a string with commas\n        g_form.addInfoMessage(groupString); // show it on the form\n    })\n}\n// Prompt: when food quantity becomes zero, require reason\nfunction onChange(control, oldValue, newValue, isLoading, isTemplate) {\n    if (isLoading || newValue === '') { return; }\n    if (newValue == 0) { // when the new value is zero\n        g_form.setMandatory('reason', true);\n    }\n}\n// Prompt: ${prompt}\n    `\n\n    }\n    if(!type){\n        prompt = prompt\n    }\n}\nif (table === 'sys_script') {\n    stop = '// Prompt:';\n    prompt = `\n// Prompt: Create a script that sets the assignment group to the Manager's group if the priority is 1.\n(function executeRule(current, previous) {\n    if (current.getValue('priority', '1')) {\n        current.setValue('group', current.manager.group + '');\n    }\n})(current, previous);\n// Prompt: when status changes, if closed, set active to false\n(function executeRule(current, previous) {\n    // condition current.status.changes()\n    if (current.status == 'closed_created' || current.status == 'closed_duplicate' || current.status == 'closed_invalid') {\n        current.active = false;\n    } else {\n        current.active = true;\n    }\n})(current, previous);\n// Prompt: when change request changes, set parent to change request\n(function executeRule(current, previous) {\n    // condition current.change_request.changes()\n    current.parent = current.change_request;\n})(current, previous);\n// Prompt: do not allow changes to others delegates\n(function executeRule(current, previous) {\n    // condition current.user != gs.getUserID() && !gs.hasRole('admin')\n    gs.addInfoMessage(gs.getMessage(\"Cannot assign or modify other users' Delegates\"));\n    current.setAbortAction(true);\n})(current, previous);\n// Prompt: get the bot icon for slack, and set it from the response\n(function executeRule(current, previous) {\n    try {\n        var req = new sn_ws.RESTMessageV2();\n        req.setEndpoint('https://slack.com/api/team.info');\n        req.setHttpMethod('get');\n        var e = new GlideEncryptionUtil();\n        var authToken = e.getClearPassword2('token_verification', 'token', current.provider_auth.outbound_message_creation);\n        if (JSUtil.notNil(authToken))\n            req.setRequestHeader('Authorization', 'Bearer ' + authToken);\n        var resp = req.execute();\n        var team_icon = JSON.parse(resp.getBody()).team.icon.image_88;\n        current.setValue(\"icon\", team_icon);\n    } catch (ex) {\n        gs.error('Error getting slack team info: ' + ex.getMessage());\n    }\n})(current, previous);\n// Prompt: when the start and end dates change, only allow dates where the start is before the end\n(function executeRule(current, previous) {\n    // condition current.start_date.changes() || current.end_date.changes()\n    if (!current.start_date.nil() && !current.end_date.nil() && current.start_date > current.end_date) {\n        current.setAbortAction(true);\n        gs.addErrorMessage(gs.getMessage(\"The start date cannot be after the end date\"));\n    }\n})(current, previous);\n// Prompt: when the date changes is empty, format it in the star trek format (YYYY.ElapsedDays) and set it in the star date field\n(function executeRule(current, previous) {\n    // condition current.date.changes()\n    if (!current.date.nil()) {\n        var date = new GlideDateTime(current.date);\n        var year = date.getYear();\n        var elapsedDays = date.getElapsed(date.getNumericValue());\n        current.star_date = year + '.' + elapsedDays;\n    }\n})(current, previous);\n// Prompt: ${prompt}\n`\n}",
    "temperature": 0.7,
    "maxTokens": 2000,
    "topP": 1,
    "bestOf": 1,
    "n": 1,
    "stop": "// Prompt:",
    "frequencyPenalty": 0,
    "presencePenalty": 0,
    "required": "action, input"
  },
  {
    "cuid": "clcscwlo50012t0242jjlrcma",
    "createdAt": "2023-01-12 00:32:43.445",
    "updatedAt": "2023-01-12 03:14:30.306",
    "name": "docs-process-maker",
    "version": 1,
    "description": "This action",
    "endpoint": "https://api.openai.com/v1/completions",
    "cost": 0.02,
    "price": 0.2,
    "model": "code-davinci-002",
    "prompt": "prompt = `\n<!--Fill out the below given this prompt \"create a badge access form\".-->\n\n<h1>Badge Access</h1>\n\n<h2>Fields to track badge access</h2>\n<ol>\n<li>Badge ID</li>\n<li>Badge Holder Name</li>\n<li>Date Issued</li>\n<li>Expiration Date</li>\n<li>Access Level</li>\n<li>Building Access</li>\n<li>Areas Access</li>\n<li>Doors Access</li>\n<li>Time Zone Restrictions</li>\n<li>Status (Active/Inactive)</li>\n</ol>\n\n<h2>Roles</h2>\nIdentify the roles people need to take to request, approve, and fulfill.\n<ul>\n<li>Request: Badge Holder</li>\n<li>Approve: Security/Administrative Personnel</li>\n<li>Fulfill: Security/Administrative Personnel</li>\n</ul>\n\n<h2>Self Service Form</h2>\n<ul>\n<li>Badge Holder Name</li>\n<li>Access Level</li>\n<li>Building Access</li>\n<li>Areas Access</li>\n<li>Doors Access</li>\n<li>Time Zone Restrictions</li>\n</ul>\n\n<h3>Process</h3>\n<div class=\"mermaid\">\ngraph TD\n  S0(Start)\n  A1(Approval for access)\n  T1(Task to fulfill access)\n  Sc1(Schedule expiration)\n  E0(End)\n\n  S0-->A1\n  A1--Rejected-->E0\n  A1--Approved-->T1\n  T1-->Sc1\n  Sc1-->E0\n</div>\n<h3>Integration</h3>\nCreate an integration between ServiceNow and BadgeSystem to automatically provision access.\n\nPossible paths for this.\n<ul>\n<li>BadgeSystem polls ServiceNow</li>\n  <ul>\n  <li>Every hour BadgeSystem hits the TableAPI for outstanding tasks.</li>\n  <li>Updates the tasks that automated work has started.</li>\n  <li>Processes the tasks.</li>\n  <li>If processing succeeds, close the task with success</li>\n  <li>Else Update the task that automation has failed</li>\n  </ul>\n<li>ServiceNow makes a rest call</li>\n  <li>When a task is ready to process e.g. state changes to ready, send a rest call to BadgeSystem</li>\n  <li>If processing succeeds, close the task with success</li>\n  <li>Else Update the task that automation has failed</li>\n</ul>\n<h3>Notifications</h3>\n\n<h4>Approval</h4>\nSubject: Badge Access Request for {current.variables.requested_for}\n\n{current.variables.requested_for} is requesting access to area({current.variables.area}) building({current.variables.building} and door({current.varaibles.door}). Please review and approve or reject the request.\n\nThank you,\nSecurity Team\n\n<h4>Approved</h4>\nSubject: Badge Access Granted\n\nDear {current.variables.requested_for},\n\nYou have been granted access to area({current.variables.area}) building({current.variables.building} and door({current.varaibles.door}). Your badge ID is {current.variables.badge_id} and it expires on {current.variables.expirationDate}.\n\nThank you,\nSecurity Team\n\n<h4>Rejected</h4>\nSubject: Badge Access Denied\n\nDear {current.variables.requested_for},\n\nYour request for access to area({current.variables.area}) building({current.variables.building} and door({current.varaibles.door}) was denied. Please contact the Security Team for more information.\n\nThank you,\nSecurity Team\n\n<h4>Notice of expiring access</h4>\nSubject: Badge Access Expiring for area({current.variables.area}) building({current.variables.building} and door({current.varaibles.door})\n\nDear {current.variables.requested_for},\n\nYour access to area({current.variables.area}) building({current.variables.building} and door({current.varaibles.door}) expires in on on {current.variables.expirationDate}. If you still need this access please request it.\n\nThank you,\nSecurity Team\n\n<!--Fill out the below given this prompt \"Manage FOIA requests for contracts\".-->\n<h1>FOIA Request for Contracts </h1>\n\n<h2>Request Process</h2>\nCreate a process to allow for members of the public to submit FOIA requests for Contracts: \n<div class=\"mermaid\">\ngraph TD\n  S0((Start))\n  S1(Submit Request)\n  A2(Routing and receipt of  request)\n  A3(Review to determine if document is releasable)\n  T1(Obtain the requested document)\n  A4(Prepare releasable document)\n  A5(Approval to release)\n  T2(Produce requested document)\n  E0(End)\n\n  S0-->S1\n  S1-->A2\n  A2-->A3\n  A3--Yes-->T1\n  A3--No-->E0\n  T1-->A4\n  A4-->A5\n  A5--Yes-->T2\n  A5--No-->E0\n  T2-->E0\n</div>\n\n<h2>Roles</h2>\nIdentify any roles people need to take to request, approve, and fulfill.\n<ul>\n<li>Requester: Anyone can submit a request as long as the requirements are met.</li>\n<li>Approver: Agency representative or Agency FOIA Officer</li>\n<li>Fulfiller: Agency representative or Agency FOIA Officer</li>\n</ul>\n\n<h2>Self Service Form</h2>\nCreate fields for submitting a request in the ServiceNow Self Service Portal. \n<ol>\n<li>Requester Name</li>\n<li>Requester Phone</li>\n<li>Requester Email</li>\n<li>Agency Name</li>\n<li>Contract Number</li>\n<li>Brief description of the requested document</li>\n</ol>\n\n<h2>Notifications</h2>\n\n<h3>Request Submitted</h3>\nSubject: FOIA Request Submitted\n\nDear Applicant,\n\nYour FOIA request has been submitted. Your Request ID is: {current.variables.request_id}. Please note that your Request ID in all further correspondence.\n\nThank you,\nFOIA Office\n\n<h3>Request Received </h3>\nSubject: FOIA Request Received\n\nDear Agency Representative, \n\nA new FOIA request has been received. Please review the request and follow the process to respond. \n\nThank you, \nFOIA Office \n\n<h3>Request Approved </h3>\nSubject: FOIA Request Approved\n\nDear Agency Representative, \n\nFOIA Request {current.variables.request_id} has now been approved. Please proceed with preparing a releasable document. \n\nThank you,\nFOIA Office \n\n<h3>Request Rejected</h3>\nSubject: FOIA Request Rejected\n\nDear Applicant, \n\nYour FOIA Request {current.variables.request_id} has been rejected. Please contact the FOIA Representative for more information. \n\nThank you,\nFOIA Office\n<!--Fill out the below given this prompt \"${prompt}\"-->`",
    "temperature": 0.7,
    "maxTokens": 4000,
    "topP": 1,
    "bestOf": 1,
    "n": 1,
    "stop": "<!--",
    "frequencyPenalty": 0,
    "presencePenalty": 0,
    "required": "action, input"
  },
  {
    "cuid": "clcsjys9p0014t02433b4hznq",
    "createdAt": "2023-01-12 03:50:22.621",
    "updatedAt": "2023-01-12 03:58:34.328",
    "name": "docs-product-requirements",
    "version": 1,
    "description": "This action",
    "endpoint": "https://api.openai.com/v1/completions",
    "cost": 0.02,
    "price": 0.2,
    "model": "code-davinci-002",
    "prompt": "prompt = `\n<!--Fill out the below given this prompt \"Lightspeed POS for q4 2020\".-->\n<h1>Lightspeed POS: Product Requirements</h1>\n<table>\n    <tr>\n        <th>Target release</th>\n        <td>Q4 2020</td>\n    </tr>\n    <tr>\n        <th>Project</th>\n        <td>Lightspeed Scanner Project</td>\n    </tr>\n    <tr>\n        <th>Document status</th>\n        <td>Draft</td>\n    </tr>\n    <tr>\n        <th>Document owner</th>\n        <td>Doug O.</td>\n    </tr>\n    <tr>\n        <th>Designer</th>\n        <td>Denise</td>\n    </tr>\n    <tr>\n        <th>Tech lead</th>\n        <td>Tiff L.</td>\n    </tr>\n    <tr>\n        <th>Tech writers</th>\n        <td>Tom W., Wendy T.</td>\n    </tr>\n    </tbody>\n</table>\n<h2>Overview</h2>\nOur goal is to develop a new point of sale scanning app to support our retail partners speed up order fulfillment and improve efficiency at a grand\nscale. We already offer an extensive range of products to help retail businesses thrive, including a robust POS system, Marketing and Loyalty,\nand Advanced Reporting. These products are designed to be highly intuitive, innovative and suitable for all business models. There is a need for\na dynamic inventory management tool to increase the efficiency rate at which retail team members operate. This management tool is accessible\non any iOS or android device to count products, track inventory and fulfill orders systematically. The scanner app provides the flexibility to\nstreamline storeroom and warehouse operations as well as optimize order fulfillment with integrated workflows.\n\n\n<h2>Expected outcomes</h2>\nThe key benefits of this project is an increase in customer satisfaction, reduce labor costs, minimize errors in packing process, increased\nefficiency of receiving process, and an improvement of security systems.\n\n\n<h2>Success metrics</h2>\nThe success of this project will be measured by the following metrics:\n\n<table>\n    <thead>\n        <tr>\n            <th>Goal</th>\n            <th>Metric</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Simplify the process of picking and packing online orders</td>\n            <td>Reduced % of errors in packing process</td>\n        </tr>\n        <tr>\n            <td>Introduce integrated workflows to speed up order fulfillment</td>\n            <td>Increase in customer satisfaction</td>\n        </tr>\n    </tbody>\n</table>\n \n<h2>Milestones</h2>\n\n<ol>\n    <li>Concept Presentation: 2/15/2023</li>\n    <li>Meeting with Design Team: 2/30/2023</li>\n    <li>Test Pilot Locations: 3/05/2023</li>\n    <li>Product Launch: 3/15/2023</li>\n</ol>\n\n<h2>High level requirements</h2>\n<table>\n    <thead>\n        <tr>\n            <td>Requirement</td>\n            <td>User Story</td>\n            <td>Importance</td>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Must be mobile responsive on both android and iOS devices</td>\n            <td>As a retail team member I want to scan products\n                directly into the app so that I do not have to use\n                spreadsheets or outdated devices.</td>\n            <td>High</td>\n        </tr>\n        <tr>\n            <td>Must only allow authorized staff to access the app</td>\n            <td>As an end-user, I want to have the correct user\n                permissions so that I can successfully update stock\n                levels</td>\n            <td>High</td>\n        </tr>\n    </tbody>\n</table>\n\n\n\n<h2>Project risks</h2>\n<table>\n    <thead>\n        <tr>\n            <th>Risk</th>\n            <th>Probability</th>\n            <th>Impact</th>\n            <th>Mitigation</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Project delay due to slowness and bugs</td>\n            <td>Medium</td>\n            <td>Medium</td>\n            <td>Ensure we have up-to-date software</td>\n        </tr>\n        <tr>\n            <td>Exceeding our budget</td>\n            <td>Medium</td>\n            <td>High</td>\n            <td>Ensure we have a clear budget</td>\n        </tr>\n    </tbody>\n</table>\n\n<!--Fill out the below given this prompt \"${prompt}\"-->`",
    "temperature": 0.7,
    "maxTokens": 2000,
    "topP": 1,
    "bestOf": 1,
    "n": 1,
    "stop": "<!--",
    "frequencyPenalty": 0,
    "presencePenalty": 0,
    "required": "action, input"
  }
]