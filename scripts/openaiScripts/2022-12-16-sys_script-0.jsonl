{"prompt":"{\"prompt\":\"Validate Change Success Score Properties\",\"table\":\"sys_properties\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar validationErrors = new sn_chg_score.ChangeSuccessScoreProperties().validateProperty(current);\\n\\tif (!validationErrors || !Array.isArray(validationErrors))\\n\\t\\treturn;\\n\\n\\tfor (var i = 0; i < validationErrors.length; i++)\\n\\t\\tgs.addErrorMessage(validationErrors[i]);\\n\\n\\tcurrent.setAbortAction(true);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"new sn_chg_score.ChangeSuccessScoreProperties().isSuccessScoreProperty(current)\",\n\t\"name\": \"Validate Change Success Score Properties\"\n}```"}
{"prompt":"{\"prompt\":\"Validate duplicate search source\",\"table\":\"ais_search_profile_ais_search_source_m2m\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ais_search_profile_ais_search_source_m2m\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"50\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tvar gr = new GlideRecord('ais_search_profile_ais_search_source_m2m');\\n\\t\\tgr.addQuery('profile', current.profile);\\n\\t\\tgr.addQuery('search_source', current.search_source);\\n\\t\\tgr.query();\\n\\t\\tif (gr.next()) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('The selected search source was not added because it is already linked to this search profile.'));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate duplicate search source\"\n}```"}
{"prompt":"{\"prompt\":\"Rule validation on Identifier Entry form\",\"table\":\"cmdb_identifier_entry\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_identifier_entry\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"999\",\n\t\"add_message\": \"false\",\n\t\"script\": \"new IdentificationRuleValidator(current.sys_id).validate();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"gs.isInteractive() && !current.isNewRecord()\",\n\t\"name\": \"Rule validation on Identifier Entry form\"\n}```"}
{"prompt":"{\"prompt\":\"Clear Alias Override\",\"table\":\"scheduled_import_set\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"scheduled_import_set\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar dataSource = new GlideRecord('sys_data_source');\\n\\t\\tif (dataSource.get(current.getValue('data_source'))) {\\n\\t\\tif (dataSource.type == 'data_stream' && current.connection_override.parent.sys_id.nil()) \\n\\t\\t\\tcurrent.setValue(\\\"connection_override\\\", \\\"\\\");\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.connection_override.nil()\",\n\t\"name\": \"Clear Alias Override\"\n}```"}
{"prompt":"{\"prompt\":\"Save yyyy-MM-dd for Date Types\",\"table\":\"sc_item_variable_assignment\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_item_variable_assignment\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"1000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t// Add your code here\\n\\tvar dt = current.item_variable.type == 9 ? new GlideDate() : new GlideDateTime();\\n\\tdt.setDisplayValue(current.getValue('value'));\\n\\tcurrent.setValue('value', dt.getValue());\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.item_variable.type == 9 || current.item_variable.type == 10\",\n\t\"name\": \"Save yyyy-MM-dd for Date Types\"\n}```"}
{"prompt":"{\"prompt\":\"Stamp Root Parent and Parents on Content\",\"table\":\"gsw_content\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"gsw_content\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar util = new GuidedSetupUtilSNC();\\n\\n\\tutil.stampParentsInContent(current);\\n\\tutil.stampRootParentInContent(current);\\n\\n\\tif (previous != null\\n\\t\\t&& previous.getValue(util.ATTR_ROOT_PARENT) != current.getValue(util.ATTR_ROOT_PARENT))\\n\\t\\tutil.stampRootParentOnChildren(current);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"parentVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Stamp Root Parent and Parents on Content\"\n}```"}
{"prompt":"{\"prompt\":\"Service Push Notification Subscriptions\",\"table\":\"m2m_sp_status_subscription\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"m2m_sp_status_subscription\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar pack = new GlideRecord(\\\"sys_package\\\");\\n\\tif (!pack.get(\\\"source\\\", \\\"com.glide.service-portal.service-status\\\"))\\n\\t\\treturn;\\n\\t\\tvar notes = new GlideRecord(\\\"sysevent_email_action\\\");\\n\\tnotes.addQuery(\\\"sys_package\\\", pack.getUniqueValue());\\n\\tnotes.query();\\n\\tvar device = _getPrimaryEmail();\\n\\t\\t\\n\\twhile (notes.next()) {\\n\\t\\tvar msg = new GlideRecord(\\\"cmn_notif_message\\\");\\n\\t\\tmsg.addQuery(\\\"user\\\", gs.getUserID());\\n\\t\\tmsg.addQuery(\\\"configuration_item\\\", current.cmdb_ci_service);\\n\\t\\tmsg.addQuery(\\\"device\\\", device);\\n\\t\\tmsg.addQuery(\\\"notification\\\", notes.getUniqueValue());\\n\\t\\tmsg.query();\\n\\t\\tif (msg.hasNext())\\n\\t\\t\\tcontinue;\\n\\t\\tmsg.initialize();\\n\\t\\tmsg.user = gs.getUserID();\\n\\t\\tmsg.configuration_item = current.cmdb_ci_service;\\n\\t\\tmsg.device = device;\\n\\t\\tmsg.notification = notes.getUniqueValue();\\n\\t\\tmsg.insert();\\n\\t}\\n\\t\\n\\tfunction _getPrimaryEmail() {\\n\\t\\tvar user_id = gs.getUserID();\\n\\t\\tvar gr = new GlideRecord('cmn_notif_device');\\n\\t\\tgr.addQuery('user', user_id);\\n\\t\\tgr.addQuery('primary_email', true);\\n\\t\\tgr.setLimit(1);\\n\\t\\tgr.query();\\n\\t\\tif (gr.next())\\n\\t\\t\\t return gr.getUniqueValue();\\n\\n\\t\\tgr.initialize();\\n\\t\\tgr.user = user_id;\\n\\t\\tgr.name = 'Primary email';\\n\\t\\tgr.primary_email = true;\\n\\t\\tgr.type = 'Email';\\n\\t\\tgr.email_address = gs.getUser().getEmail();\\n\\t\\treturn gr.insert();\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.sys_user.nil()\",\n\t\"name\": \"Service Push Notification Subscriptions\"\n}```"}
{"prompt":"{\"prompt\":\"Avoid duplicate hostnames\",\"table\":\"sys_cs_hostname_allow_list\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cs_hostname_allow_list\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (current.hostname != previous.hostname) {\\t\\n\\t\\tvar hostnameHelper = new global.AllowedHostnameHelper();\\n\\t\\tif (hostnameHelper.checkHostnameExists(current.hostname)) {\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage('This hostname already exists in the list.'));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t}\\t\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Avoid duplicate hostnames\"\n}```"}
{"prompt":"{\"prompt\":\"Geocode Address\",\"table\":\"cmn_map_page\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmn_map_page\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (!current.center_address.nil()) {\\n\\t var point=GoogleMapsHelper.google_getLatLong(current.center_address + '');\\n\\t if (point[0] && point[1]) {\\n\\t\\t\\tcurrent.center_latitude = point[0];\\n\\t\\t\\tcurrent.center_longitude = point[1];\\n\\t }\\n}\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Geocode Address\"\n}```"}
{"prompt":"{\"prompt\":\"Allow to save signature before action\",\"table\":\"sys_sg_button\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_button\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\n\\tif(!current.write_back_action_item || !(current.write_back_action_item.type.equals(\\\"script\\\"))) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Save signature before action execution is not allowed unless action item type is script!\\\"));\\n\\t\\tcurrent.save_signature_before_action_execution = false;\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"save_signature_before_action_execution=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Allow to save signature before action\"\n}```"}
{"prompt":"{\"prompt\":\"Create ML update request schedule\",\"table\":\"ml_solution\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ml_solution\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar solDef = new MLGroupbyUtils().getGlideRecord(current.ml_capability_definition);\\n\\tnew MLRequestSchedule().deleteExistingUpdateRequestSchedule(solDef.sys_id);\\n\\tnew MLRequestSchedule().insertUpdateRequestSchedule(solDef.sys_id, solDef.solution_name, solDef.update_frequency.toString());\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"capability=clustering_trainer^ORcapability=similarity_trainer^state=solution_complete^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Create ML update request schedule\"\n}```"}
{"prompt":"{\"prompt\":\"Initialize inputs and type_vals\",\"table\":\"sys_pd_activity\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_pd_activity\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"activity_definitionVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Initialize inputs and type_vals\"\n}```"}
{"prompt":"{\"prompt\":\"Reclassify\",\"table\":\"discovery_classy_proc\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"discovery_classy_proc\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t// find any related application instances in the old table and update them to the new table...\\n\\tvar old_table = '' + previous.table;\\n\\tvar new_table = '' + current.table;\\n\\tvar gr = new GlideRecord(old_table);\\n\\tgr.addQuery('classifier', current.getUniqueValue());\\n\\tgr.query();\\n\\twhile (gr.next()) {\\n\\t\\tgr.sys_class_name = new_table;\\n\\t\\tgr.update();\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.table.changes();\",\n\t\"name\": \"Reclassify\"\n}```"}
{"prompt":"{\"prompt\":\"Delete Live Profile\",\"table\":\"sys_user\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_user\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tnew LiveFeedUtil().deleteProfileUserID(new GlideappLiveProfile().getID(current.getUniqueValue()));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete Live Profile\"\n}```"}
{"prompt":"{\"prompt\":\"Parent Bumper\",\"table\":\"sc_cat_item_dt_mtom\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_cat_item_dt_mtom\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var parent = new GlideRecord('sc_cat_item_delivery_task');\\r\\nvar gotten = parent.get(current.dt_parent);\\r\\n\\r\\nif (gotten == true)\\r\\n\\tparent.update();\\r\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Parent Bumper\"\n}```"}
{"prompt":"{\"prompt\":\"Check Domains\",\"table\":\"service_in_scope\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"service_in_scope\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"90\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!(new global.SPMDomainUtils().isInSameDomain(current.service_scope.getRefRecord(), current.cmdb_ci_service.getRefRecord()))\",\n\t\"name\": \"Check Domains\"\n}```"}
{"prompt":"{\"prompt\":\"Maintain order when step made inactive\",\"table\":\"sys_embedded_tour_step\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_embedded_tour_step\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\n\\tvar gr, gr1;\\n\\tvar stepType = current.step_type.toString();\\n\\t\\n\\tif (stepType === 'step' || stepType === '') {\\n\\t\\t\\t\\tif (current.active == false && current.order == -1) {\\n\\t\\t\\t\\t\\t\\tgr = new GlideRecord('sys_embedded_tour_step');\\n\\t\\t\\t\\t\\t\\tgr.addQuery('guide', current.guide);\\n\\t\\t\\t\\t\\t\\tgr.addQuery('active', true);\\n\\t\\t\\t\\t\\t\\tgr1 = gr.addQuery('step_type', 'step');\\n\\t\\t\\t\\t\\t\\tgr1.addOrCondition('step_type', '');\\n\\t\\t\\t\\t\\t\\tgr.orderBy('order');\\n\\t\\t\\t\\t\\t\\tgr.query();\\n\\t\\t\\t\\t\\t\\tvar i = 1;\\n\\t\\t\\t\\t\\t\\twhile (gr.next()) {\\n\\t\\t\\t\\t\\t\\t\\t\\tgr.order = i;\\n\\t\\t\\t\\t\\t\\t\\t\\tgr.update();\\n\\t\\t\\t\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Maintain order when step made inactive\"\n}```"}
{"prompt":"{\"prompt\":\"Discovery - Flush ProbeResults cache\",\"table\":\"discovery_sensor\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"discovery_sensor\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"ProbeResultsCache.getInstance().flushCache(''+current.reacts_to_probe);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"true\",\n\t\"name\": \"Discovery - Flush ProbeResults cache\"\n}```"}
{"prompt":"{\"prompt\":\"Create default level upon type creation\",\"table\":\"cmn_skill_level_type\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmn_skill_level_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar gr = new GlideRecord('cmn_skill_level');\\n\\tgr.initialize();\\n\\tgr.setValue('name', 'Default');\\n\\tgr.setValue('value', 1);\\n\\tgr.setValue('description', 'Default Skill Level');\\n\\tgr.setValue('skill_level_type', current.sys_id);\\n\\tgr.insert();\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Create default level upon type creation\"\n}```"}
{"prompt":"{\"prompt\":\"Set Domain of NPS Result\",\"table\":\"asmt_nps_result\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_nps_result\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t// nps result domain = assessable record domain\\n\\t//if assessable record's record is not domain separated, nps result domain = metric domain (if is global)\\n\\tvar sourceRecord = new GlideRecord(current.source_table);\\n\\tsourceRecord.get(current.source_id);\\n\\t\\n\\tif (tableHasColumn(current.source_table))\\n\\t\\tcurrent.sys_domain = sourceRecord.sys_domain;\\n\\telse if (isGlobal(current.nps_metric.sys_domain))\\n\\t\\tcurrent.sys_domain = current.nps_metric.sys_domain;\\n\\tfunction tableHasColumn(tableName) {\\n\\t\\tvar gr = new GlideRecord(tableName);\\n\\t\\tgr.initialize();\\n\\t\\tvar ge = gr.getElement(\\\"sys_domain\\\");\\n\\t\\treturn ge != null;\\n\\t}\\n\\tfunction isGlobal(domain) {\\n\\tif (domain.nil())\\n\\t\\treturn true;\\n\\tif (domain.indexOf(\\\"global\\\") >= 0)\\n\\t\\treturn true;\\n\\treturn false;\\n}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"GlidePluginManager.isActive('com.glide.domain')\",\n\t\"name\": \"Set Domain of NPS Result\"\n}```"}
{"prompt":"{\"prompt\":\"Role Delegation Functions\",\"table\":\"global\",\"when\":\"after\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/**\\n Service-now.com\\n\\n Description: Functions called by role delegation Record Producers and Workflows\\n**/ \\n\\nfunction getDelegatableRoles(group) {\\n\\t answer = \\\"\\\";\\n\\n\\t if (gs.hasRole(\\\"admin\\\")) {\\t// admin can grant any grantable role in any group\\n\\t\\t\\tvar role = new GlideRecord(\\\"sys_user_role\\\");\\n\\t\\t\\trole.addQuery(\\\"grantable\\\", true);\\n\\t\\t\\trole.addQuery(\\\"can_delegate\\\", true);\\n\\t\\t\\trole.query();\\n\\t\\t\\tvar i = 0;\\n\\t\\t\\twhile (role.next()) {\\n\\t\\t\\t\\t if (i > 0)\\n\\t\\t\\t\\t\\t\\tanswer += \\\",\\\";\\n\\t\\t\\t\\t answer += role.sys_id;\\n\\t\\t\\t\\t i++;\\n\\t\\t\\t}\\n\\t } else {\\t// non-admin role delegator can delegate roles they have\\n\\t\\t\\tvar roles = new GlideRecord(\\\"sys_user_has_role\\\");\\n\\t\\t\\troles.addQuery(\\\"user\\\", gs.getUserID());\\n\\t\\t\\troles.addQuery(\\\"role.can_delegate\\\", true);\\n\\t\\t\\troles.addQuery(\\\"role.grantable\\\", true);\\n\\t\\t\\troles.query();\\n\\t\\t\\tvar i = 0;\\n\\t\\t\\twhile (roles.next()) {\\n\\t\\t\\t\\t if (i > 0)\\n\\t\\t\\t\\t\\t\\tanswer += \\\",\\\";\\n\\t\\t\\t\\t answer += roles.role;\\n\\t\\t\\t\\t i++;\\n\\t\\t\\t}\\n\\t }\\n\\t return answer;\\n}\\n\\nfunction getMyRoleDelegationGroups() {\\n\\t// admin can delegate to all groups\\n\\tif (gs.hasRole(\\\"admin\\\"))\\n\\t\\treturn \\\"\\\";\\n\\n\\t// find groups where user has the role_delegator role in that group\\n\\tvar hasRoles = new GlideRecord(\\\"sys_user_has_role\\\");\\n\\thasRoles.addQuery(\\\"user\\\", gs.getUserID());\\n\\thasRoles.addQuery(\\\"role.name\\\", \\\"role_delegator\\\");\\n\\thasRoles.query();\\n\\tvar al = new Packages.java.util.ArrayList();\\n\\twhile (hasRoles.next()) {\\n\\t\\tif (!al.contains(hasRoles.sys_id))\\n\\t\\t\\tal.add(hasRoles.granted_by.sys_id);\\n\\t}\\n\\n\\tvar answer = \\\"sys_idIN\\\";\\n\\tfor (var i = 0; i < al.size(); i++) {\\n\\t\\tif (i > 0)\\n\\t\\t\\tanswer += \\\",\\\";\\n\\t\\tanswer += al.get(i);\\n\\t}\\n\\treturn answer;\\n}\\n\\nfunction getRoleDelegatorOptions() {\\n\\tif (current.variables.role_delegator_group == \\\"\\\")\\n\\t\\treturn '';\\n\\n\\tvar userIDs = [];\\n\\tvar userGR = new GlideRecord('sys_user_grmember');\\n\\tuserGR.addQuery(\\\"group\\\", current.variables.role_delegator_group);\\n\\tuserGR.query();\\n\\twhile (userGR.next())\\n\\t\\tuserIDs.push(userGR.user.toString());\\n\\t\\n\\treturn 'sys_idIN' + userIDs.join(',');\\n}\\n\\nfunction getRoleDelegatorGroupOptions() {\\n\\tif (current.variables.role_delegator_user == \\\"\\\")\\n\\t\\treturn '';\\n\\n\\tvar groupIDs = [];\\n\\tvar userGR = new GlideRecord('sys_user_grmember');\\n\\tuserGR.addQuery(\\\"user\\\", current.variables.role_delegator_user);\\n\\tuserGR.query();\\n\\twhile (userGR.next())\\n\\t\\tgroupIDs.push(userGR.group.toString());\\n\\t\\n\\treturn 'sys_idIN' + groupIDs.join(',');\\n}\\n\\nfunction getUsersForRoleDelegation() {\\n\\tif (current.variables.delegate_roles_group == \\\"\\\")\\n\\t\\treturn '';\\n\\n\\tvar userIDs = [];\\n\\tvar userGR = new GlideRecord('sys_user_grmember');\\n\\tuserGR.addQuery(\\\"group\\\", current.variables.delegate_roles_group);\\n\\tif (!gs.hasRole(\\\"admin\\\"))\\n\\t\\tuserGR.addQuery(\\\"user\\\", \\\"!=\\\", gs.getUserID());\\n\\tuserGR.query();\\n\\twhile (userGR.next())\\n\\t\\tuserIDs.push(userGR.user.toString());\\n\\t\\n\\treturn 'sys_idIN' + userIDs.join(',');\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Role Delegation Functions\"\n}```"}
{"prompt":"{\"prompt\":\"Read only Type when not initial state\",\"table\":\"change_request\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"90\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Type is read only for in-progress Change Requests\\\"));\\n\\tcurrent.setAbortAction(true);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"typeVALCHANGES^chg_modelISEMPTY^EQ\",\n\t\"condition\": \"gs.getProperty(ChangeRequestSNC.ENFORCE_DATA_REQ_PROP) === \\\"true\\\" && !new ChangeRequest(previous).isInitialState()\",\n\t\"name\": \"Read only Type when not initial state\"\n}```"}
{"prompt":"{\"prompt\":\"Update date operation type\",\"table\":\"sys_rte_eb_to_date_operation\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_rte_eb_to_date_operation\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tcurrent.type = \\\"d939451e730000102b6265a751ab9e6e\\\";\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update date operation type\"\n}```"}
{"prompt":"{\"prompt\":\"Create response channels\",\"table\":\"sys_cs_auto_resolution_configuration\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cs_auto_resolution_configuration\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (AutoResolutionResponseChannelHelper.shouldCreateResponseChannels(current.sys_id))\\n\\t\\tAutoResolutionResponseChannelHelper.createResponseChannelForARConfig(current.sys_id);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Create response channels\"\n}```"}
{"prompt":"{\"prompt\":\"Set reminder changes to false\",\"table\":\"sn_hr_core_task\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"false\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_task\",\n\t\"advanced\": \"false\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"set_reminder=false^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Set reminder changes to false\"\n}```"}
{"prompt":"{\"prompt\":\"Warn Outbound HTTP log level change\",\"table\":\"sys_properties\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar value = current.value;\\n\\t\\tif (value == 'all' || value == 'elevated') {\\n\\t\\t\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Use caution when enabling the All and Elevated log levels as they can capture sensitive data such as authorization headers or session cookies. Revert back to the Basic log level after troubleshooting.\\\"));\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"nameSTARTSWITHglide.outbound_http_log.override.level^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Warn Outbound HTTP log level change\"\n}```"}
{"prompt":"{\"prompt\":\"Change Model: Set work start\",\"table\":\"change_request\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tcurrent.work_start = new GlideDateTime();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"chg_model=007c4001c343101035ae3f52c1d3aeb2^ORchg_model=e55d0bfec343101035ae3f52c1d3ae49^ORchg_model=62d10fa1c303101035ae3f52c1d3aec1^stateCHANGESTO-1^work_startISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Change Model: Set work start\"\n}```"}
{"prompt":"{\"prompt\":\"Check scope in solution name\",\"table\":\"ml_capability_definition_base\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ml_capability_definition_base\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar solutionLabel = current.getValue(\\\"solution_label\\\");\\n\\tvar solutionName = current.getValue(\\\"solution_name\\\");\\n\\tvar name = \\\"ml_\\\" + gs.getNewAppScopeCompanyPrefix() + '_'+ getScope(current) +'_' + getDomainName() +'_' + solutionLabel.toLowerCase().replace(/[^a-zA-Z0-9_]/g, '_');\\n\\n\\twhile (name.indexOf(\\\"__\\\") != -1) {\\n\\t\\tname = name.replace(/__/g, \\\"_\\\");\\n\\t}\\n\\n\\t// Replace any trailing underscores\\n\\twhile (name != '' && name.charAt(name.length - 1) == '_') {\\n\\t\\tname = name.substring(0, name.length - 1);\\n\\t}\\n\\t\\n\\tvar source = current.getValue(\\\"request_source\\\");\\n\\tif (JSUtil.areEqual(source, 'api')) {\\n\\t\\tname = generateUniqueName(name);\\n\\t}\\n\\n\\tif (!isSolutionDefinitionPresent(name)) {\\n\\t\\tif (name != solutionName)\\n\\t\\t\\tcurrent.setValue('solution_name',name);\\n\\t} else {\\n\\t\\tgs.addErrorMessage(\\\"Solution name should be unique\\\");\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\t\\n\\tfunction isSolutionDefinitionPresent(solutionName) {\\n\\t\\tif (!solutionName)\\n\\t\\t\\treturn false;\\n\\t\\tvar gr = new GlideRecord('ml_capability_definition_base');\\n\\t\\tgr.addQuery('solution_name',solutionName);\\n\\t\\tgr.query();\\n\\t\\tif(gr.hasNext()){\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\t\\n\\tfunction getScope(current) {\\n\\t\\tvar scope = gs.getCurrentApplicationScope();\\n\\t\\ttry {\\n\\t\\t\\t// use scope key in solution_properties json to create\\n\\t\\t\\t// solution name for api created solutions \\n\\t\\t\\tvar solutionProperties = current.getValue('solution_properties');\\n\\t\\t\\tif (JSUtil.notNil (solutionProperties)) {\\n\\t\\t\\t\\tvar solutionPropertiesJson = JSON.parse(solutionProperties);\\n\\t\\t\\t\\tif ('scope' in solutionPropertiesJson) {\\n\\t\\t\\t\\t\\tscope = solutionPropertiesJson.scope;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} catch (ex) {\\n\\t\\t\\tscope = gs.getCurrentApplicationScope();\\n\\t\\t}\\n\\t\\treturn scope;\\n\\t}\\n\\t\\n\\tfunction getDomainName() {\\n\\t\\t// The domain name prefix is by default global.\\n\\t\\tvar domain_name = \\\"global\\\";\\n\\t\\tvar domain_sys_id = current.getValue('sys_domain');\\n\\n\\t\\tif (domain_sys_id === null ) {\\n\\t\\t\\treturn domain_name;\\n\\t\\t}\\n\\n\\t\\tvar name = current.sys_domain.name;\\n\\t\\tif(JSUtil.notNil(name)) {\\n\\t\\t\\tdomain_name = name.toLowerCase().replace(/[^a-zA-Z0-9_]/g, '_');\\n\\t\\t}\\n\\n\\t\\treturn domain_name;\\n\\t}\\n\\t\\n\\tfunction generateUniqueName(name) {\\n\\t\\tvar existingNames = getExistingSolutionNamesStartingWith(name);\\n\\t\\t// this while loop will execute for 100 iterations and\\n\\t\\t// try to generate a unique name\\n\\t\\twhile (JSUtil.contains(existingNames, name)) {\\n\\t\\t\\tvar lastIndexOfSeparator = name.lastIndexOf(\\\"_\\\");\\n\\t\\t\\tvar suffix = name.substring(lastIndexOfSeparator + 1);\\n\\t\\t\\tvar newSuffix = 1;\\n\\t\\t\\tif (!isNaN(suffix)) {\\n\\t\\t\\t\\tnewSuffix = parseInt(suffix) + 1;\\n\\t\\t\\t\\tname = name.substring(0, lastIndexOfSeparator);\\n\\t\\t\\t}\\n\\t\\t\\tname = name + '_' + newSuffix;\\n\\t\\t}\\n\\t\\treturn name;\\n\\t}\\n\\t\\n\\tfunction getExistingSolutionNamesStartingWith(name) {\\n\\t\\tvar existingNames = [];\\n\\t\\tvar gr = new GlideRecord('ml_capability_definition_base');\\n\\t\\tgr.addQuery('solution_name','STARTSWITH', name);\\n\\t\\t// we will try to get upto 100 names with the same prefix\\n\\t\\t// if we are still not able to generate unique name, we will \\n\\t\\t// throw exception\\n\\t\\tgr.setLimit(100);\\n\\t\\tgr.query();\\n\\t\\twhile (gr.next()) {\\n\\t\\t\\texistingNames.push(gr.getValue('solution_name'));\\n\\t\\t}\\n\\t\\treturn existingNames;\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Check scope in solution name\"\n}```"}
{"prompt":"{\"prompt\":\"Fetch input data for playbook preview\",\"table\":\"sys_pd_context\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_pd_context\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tg_scratchpad.playbook_preview_table = current.input_table;\\n\\tg_scratchpad.playbook_preview_sysId = current.input_record;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Fetch input data for playbook preview\"\n}```"}
{"prompt":"{\"prompt\":\"Auto assessment business rule\",\"table\":\"incident\",\"when\":\"async\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"incident\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"300\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAsync(current){\\n (new sn_assessment_core.AssessmentCreation()).conditionTrigger(current, '249e70b0875013005d90bba826cb0bbf'); \\n }\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(new global.AssessmentUtils().conditionCheck(current, 'stateCHANGESTO7^EQ'))\",\n\t\"name\": \"Auto assessment business rule\"\n}```"}
{"prompt":"{\"prompt\":\"Copy Fulfillment instructions to HR Case\",\"table\":\"sn_hr_core_case\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_case\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"1000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tcurrent.fulfillment_instructions = new sn_hr_core.hr_FulfillmentInstructions().getInstructions(current);\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"active=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Copy Fulfillment instructions to HR Case\"\n}```"}
{"prompt":"{\"prompt\":\"Notification Device View Filter\",\"table\":\"global\",\"when\":\"after\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function cmn_notif_deviceGetViewName() {\\n\\tif (gs.hasRole(\\\"itil\\\")) \\n\\t\\t return; \\n\\tif (view.startsWith(\\\"ess\\\"))\\n\\t\\t return;\\n\\tif (view === \\\"concourse_notification_preferences\\\")\\n\\t\\t return;\\n\\n\\tanswer = \\\"ess\\\";\\n}\\n\\nfunction cmn_notif_device_listGetViewName() {\\n\\tcmn_notif_deviceGetViewName();\\n}\\n\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Notification Device View Filter\"\n}```"}
{"prompt":"{\"prompt\":\"Set intent name same as primary\",\"table\":\"sys_nlu_intent\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_nlu_intent\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar gr = new GlideRecord(\\\"sys_nlu_intent\\\");\\n\\tgr.addQuery(\\\"primary_intent\\\", current.sys_id);\\n\\tgr.setValue(\\\"name\\\", current.name);\\n\\tgr.updateMultiple();\\t\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"nameVALCHANGES^primary_intentISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Set intent name same as primary\"\n}```"}
{"prompt":"{\"prompt\":\"Restrict multiple content fields on edit\",\"table\":\"sn_actsub_activitytype_template_field\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_actsub_activitytype_template_field\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tvar gr = new GlideRecord(ActivityConstants.TABLE_ACTIVITY_TYPE_TEMPLATE_FIELD);\\n\\t\\tgr.addQuery(\\\"template\\\", current.template);\\n\\t\\tgr.addQuery(\\\"position\\\", ActivityConstants.POSITION_CONTENT);\\n\\t\\tgr.query();\\n\\t\\tif (gr.next()) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Only one field can be displayed as content on the activity tile.\\\"));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"positionCHANGESTOcontent^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Restrict multiple content fields on edit\"\n}```"}
{"prompt":"{\"prompt\":\"Sync table name of variables\",\"table\":\"sc_cat_item_producer\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_cat_item_producer\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\tnew SNCCatalogUtil().syncVariableTableName(current.getUniqueValue(), null);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.table_name.changes()\",\n\t\"name\": \"Sync table name of variables\"\n}```"}
{"prompt":"{\"prompt\":\"Make quantity received empty\",\"table\":\"alm_transfer_order_line_task\",\"when\":\"before_display\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"alm_transfer_order_line_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// For tasks of stage = 'received', check if the consumable needs to be received in multiple quantity. If true then set 'quantity_received' to empty when the task is open\\n\\tif(current.getValue('stage') === 'received' && (current.transfer_order_line.model.sys_class_name.toString() === 'cmdb_consumable_product_model' ||\\tcurrent.transfer_order_line.model.asset_tracking_strategy.toString() === 'track_as_consumable') && parseInt(current.getValue('state')) === 1){\\n\\tcurrent.quantity_received = '';\\n\\tcurrent.setWorkflow(false);\\n\\tcurrent.update();\\n}\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Make quantity received empty\"\n}```"}
{"prompt":"{\"prompt\":\"Set Name\",\"table\":\"cmdb_ci_endpoint_tcp\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci_endpoint_tcp\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var bsm = new SNC.BusinessServiceManager();\\nvar name = bsm.generateTcpEpName(current);\\ncurrent.setValue('name', name);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set Name\"\n}```"}
{"prompt":"{\"prompt\":\"Resume On-Call workflows\",\"table\":\"task\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar escRespGr = new GlideRecord('on_call_escalation_response');\\n\\t\\tescRespGr.addQuery('source', current.getUniqueValue());\\n\\t\\tescRespGr.addQuery('user', current.assigned_to);\\n\\t\\tescRespGr.query();\\n\\t\\twhile (escRespGr.next()) {\\n\\t\\t\\t\\tnew Workflow().broadcastEvent(escRespGr.wf_context, 'resume');\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"assigned_toISNOTEMPTY^assigned_toVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Resume On-Call workflows\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent state update when Change on hold\",\"table\":\"change_task\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"function onBefore(current, previous) {\\n}\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"stateVALCHANGES^change_request.on_hold=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent state update when Change on hold\"\n}```"}
{"prompt":"{\"prompt\":\"Check related records on update\",\"table\":\"sys_ui_hp_publisher\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ui_hp_publisher\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\tif(current.type == 2) {\\n\\t\\tif (current.reference_table != previous.reference_table) {\\n\\t\\t\\t_validateFieldType(current);\\n\\t\\t}\\n\\t} else if (current.type == 4) {\\n\\t\\tvar childPublisher = new GlideRecord(\\\"sys_ui_hp_group\\\");\\n\\t\\tchildPublisher.addQuery(\\\"child_publisher\\\", current.sys_id);\\n\\t\\tchildPublisher.query();\\n\\t\\tif(childPublisher.next()) {\\n\\t\\t\\tcurrent.type.setError(gs.getMessage(\\\"Publisher is part of an existing group\\\"));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction _validateFieldType(current) {\\n\\tvar reference = new GlideRecord(\\\"sys_ui_hp_reference\\\");\\n\\treference.addQuery(\\\"publisher_reference\\\", current.sys_id);\\n\\treference.query();\\n\\t\\n\\tif(reference.next()) {\\n\\t\\tvar reference_table = reference.getValue(\\\"reference_table\\\");\\n\\t\\tvar reference_field = reference.getValue(\\\"reference_field\\\");\\n\\t\\t\\n\\t\\tvar gr = new GlideRecord(reference_table);\\n\\t\\tvar element = gr.getElement(reference_field);\\n\\t\\tvar ed = element.getED();\\n\\t\\tif(current.reference_table != ed.getReference()) {\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage('Configured publisher references are of different type \\\"{0}\\\"', ed.getReference()));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Check related records on update\"\n}```"}
{"prompt":"{\"prompt\":\"Validation For End Point Types\",\"table\":\"gsw_content_information\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"gsw_content_information\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar ret = new GuidedSetupUtilSNC().validateConfigForEndPointTypes(current);\\n\\tif (!ret) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validation For End Point Types\"\n}```"}
{"prompt":"{\"prompt\":\"Validate translatable fields\",\"table\":\"sn_hr_core_template\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_template\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"The following mandatory field is not filled in: Short description for employee\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"short_description_for_employeeISEMPTY^show_translated_fields=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate translatable fields\"\n}```"}
{"prompt":"{\"prompt\":\"SLA Engine version changed\",\"table\":\"sys_properties\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"110\",\n\t\"add_message\": \"false\",\n\t\"script\": \"changeSLAEngineVersionOption();\\r\\n\\r\\nfunction changeSLAEngineVersionOption() {\\r\\n\\t if (current.value == '2010')\\r\\n\\t\\t\\tSLAEngineChange.switchTo2010();\\r\\n\\t else if (current.value == '2011' && SLAEngineChange.checkSLAcalc2011())\\r\\n\\t\\t\\tSLAEngineChange.switchTo2011();\\r\\n}\\r\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.name == \\\"com.snc.sla.engine.version\\\" && current.value.changes()\",\n\t\"name\": \"SLA Engine version changed\"\n}```"}
{"prompt":"{\"prompt\":\"Initial State: Reassign on delete\",\"table\":\"sttrm_state\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sttrm_state\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t// If the initial state is deleted, set initial on the next available state\\n\\tvar stateGr = new GlideRecord(\\\"sttrm_state\\\");\\n\\tstateGr.addQuery(\\\"sttrm_model\\\", current.getValue(\\\"sttrm_model\\\"));\\n\\tstateGr.orderBy(\\\"state_sequence\\\");\\n\\tstateGr.setLimit(1);\\n\\tstateGr.query();\\n\\t\\n\\tif(stateGr.next()) {\\n\\t\\tstateGr.initial_state = true;\\n\\t\\tstateGr.update();\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"initial_state=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Initial State: Reassign on delete\"\n}```"}
{"prompt":"{\"prompt\":\"Update Workspace DA Mapping\",\"table\":\"link_generator_mapping\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"link_generator_mapping\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tnew linkGeneratorWorkspace().updateWorkspaceDecoratorForLinkMapping(current);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"type=agent_workspace^ORtypeCHANGESFROMagent_workspace^workspace_decoratorISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Update Workspace DA Mapping\"\n}```"}
{"prompt":"{\"prompt\":\"SNC Create Baseline\",\"table\":\"cmdb_baseline\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_baseline\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"SNC.CMDBUtil.baselineSchedule(current.name.toString());\\r\\ngs.addInfoMessage(gs.getMessage(\\\"Baseline creation has been scheduled. You will receive an email when it has completed if your user record has an email address.\\\"));\\r\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"SNC Create Baseline\"\n}```"}
{"prompt":"{\"prompt\":\"App Customization Scratchpad\",\"table\":\"sys_store_app\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_store_app\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (sn_app_customization.AppCustomizationAPI.isAppCustomizationCapableByScopeName(current.scope)) {\\n\\t\\tg_scratchpad.isAppCustomizationCapable = true;\\n\\t} else {\\n\\t\\tg_scratchpad.isAppCustomizationCapable = false;\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"App Customization Scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"Delete update set after push back out\",\"table\":\"sys_sync_history\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sync_history\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var update_set = new GlideRecord(\\\"sys_update_set\\\");\\nif (update_set.get(current.update_set))\\n\\tupdate_set.deleteRecord();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.type == \\\"push_commit\\\" && current.stage == \\\"backedout\\\"\",\n\t\"name\": \"Delete update set after push back out\"\n}```"}
{"prompt":"{\"prompt\":\"Service Discovery - Device Complete\",\"table\":\"discovery_device_history\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"discovery_device_history\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(current, previous) {\\n\\t\\tvar gr = new GlideRecord('sa_deferred_service_discovery');\\n\\t\\tgr.addQuery('discovery_status',current.status);\\n\\t\\tgr.query();\\n\\t\\tif (gr.next()) {\\n\\t\\t\\t\\tgs.print(\\\"Deferred Service Discovery found\\\");\\n\\t\\t\\t\\tvar clientId = gr.getValue('client_id');\\n\\t\\t\\t\\tvar dh = new SNC.DomainHelper();\\n\\t\\t\\t\\tvar entryPointId = gr.getValue('entry_point');\\n\\t\\t\\t\\tdh.adjustDomainByCiSysId(entryPointId);\\n\\t\\t\\t\\tif (clientId != null) {\\n\\t\\t\\t\\t\\t\\tif(current.status.state !== \\\"Completed\\\")\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\tvar patternDebuggerManager = new SNC.PatternDebuggerManager();\\n\\t\\t\\t\\t\\t\\tpatternDebuggerManager.handleHostDetectionResult(gr.getUniqueValue(),clientId);\\n\\t\\t\\t\\t} \\n\\t\\t\\t\\telse {\\n\\t\\t\\t// if last state is Active, Windows Cluster VIP, we need to trigger the probe that\\n\\t\\t\\t// finds physical IPs and do some maintenance of relevant tables\\n\\t\\t\\tif (current.last_state == 'Active, Windows Cluster VIP') {\\n\\t\\t\\t\\tgs.print(\\\"Cluster VIP identified: \\\" + gr.getValue('ip_address'));\\n\\t\\t\\t\\t// duplicate the relevant record in sa_deferred_service_discovery\\n\\t\\t\\t\\tgs.print(\\\"Inserting new record to sa_deferred_service_discovery for IP \\\" + gr.getValue('ip_address'));\\n\\t\\t\\t\\tvar newSaDefferedStatus = new GlideRecord('sa_deferred_service_discovery');\\n\\t\\t\\t\\tnewSaDefferedStatus.setValue('entry_point',gr.getValue('entry_point'));\\n\\t\\t\\t\\tnewSaDefferedStatus.setValue('additional_parameters',gr.getValue('additional_parameters'));\\n\\t\\t\\t\\tnewSaDefferedStatus.setValue('ip_address',gr.getValue('ip_address'));\\n\\t\\t\\t\\tvar newRecord = newSaDefferedStatus.insert();\\n\\t\\t\\t\\tgs.print(\\\"New record inserted to sa_deferred_service_discovery\\\");\\n\\t\\t\\t\\t// clear the discovery status field in sa_endpoint_status\\n\\t\\t\\t\\tvar saEndpointStatus = new GlideRecord(\\\"sa_endpoint_status\\\");\\n\\t\\t\\t\\tsaEndpointStatus.addQuery(\\\"endpoint_id\\\",gr.getValue(\\\"entry_point\\\"));\\n\\t\\t\\t\\tsaEndpointStatus.query();\\n\\t\\t\\t\\tif (saEndpointStatus.next()) {\\n\\t\\t\\t\\t\\tgs.print(\\\"Updating the sa_endpoint_status table entry of endpoint: \\\" + gr.getValue(\\\"entry_point\\\"));\\n\\t\\t\\t\\t\\tsaEndpointStatus.setValue(\\\"discovery_status\\\", null);\\n\\t\\t\\t\\t\\tsaEndpointStatus.update();\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// launch the probe that finds physical IPs\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// Use the common MID selector to find MID\\n\\t\\t\\t\\t\\tvar selector = new CommonMIDServerSelector();\\n\\t\\t\\t\\t\\tvar mid = selector.findAgent(gr.getValue('ip_address'), null, 'ServiceMapping');\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// If MID is not found, return\\n\\t\\t\\t\\t\\tif (mid == null) {\\n\\t\\t\\t\\t\\t\\t\\tgs.log(\\\"No MID server found for IP \\\" + gr.getValue('ip_address'));\\n\\t\\t\\t\\t\\t\\t\\tsaEndpointStatus.setValue(\\\"error\\\", \\\"No MID server found for IP \\\" + gr.getValue('ip_address'));\\n\\t\\t\\t\\t\\t\\t\\tsaEndpointStatus.update();\\n\\t\\t\\t\\t\\t\\t\\tgr.deleteRecord();\\n\\t\\t\\t\\t\\t\\t\\tdh.restoreCurrentSessionParams();\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tvar midServer = \\\"mid.server.\\\" + mid;\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tvar discoveryStatusGr = new GlideRecord(\\\"discovery_status\\\");\\n\\t\\t\\t\\t\\t// GlideRecord.get 1 arg form falls back to 'name' if not found by sys_id, 2 arg form throws exception if arg2 is null.\\n\\t\\t\\t\\t\\tif (current.status)\\n\\t\\t\\t\\t\\t\\tdiscoveryStatusGr.get('sys_id', current.status);\\n\\t\\t\\t\\t\\tif (discoveryStatusGr.isValid()) {\\n\\t\\t\\t\\t\\t\\tgs.print(\\\"Launching probe: Windows - Get Physical Address for VIP\\\");\\n\\t\\t\\t\\t\\t\\tvar probe = new SncProbe.get('Windows - Get Physical Address for VIP');\\n\\t\\t\\t\\t\\t\\tprobe.setSource(gr.getValue('ip_address'));\\n\\t\\t\\t\\t\\t\\tprobe.addParameter(\\\"endpoint_id\\\", gr.getValue(\\\"entry_point\\\"));\\n\\t\\t\\t\\t\\t\\tprobe.addParameter(\\\"deferred\\\", newRecord);\\n\\t\\t\\t\\t\\t\\tprobe.setTopic('WMIRunner');\\n\\t\\t\\t\\t\\t\\tprobe.create(midServer);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// Delete the old record\\n\\t\\t\\t\\tgr.deleteRecord();\\n\\t\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t// var discoveryRunner = new SNC.ServiceWatchTaskManager();\\n\\t\\t\\t\\t\\t\\t// For now we do not report on discovery completion at this point since it created identity matching collisions with horizontal discovery.\\n\\t\\t\\t\\t\\t\\t// discoveryRunner.startDeferredDiscovery(gr.getUniqueValue(), current.status);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tdh.restoreCurrentSessionParams();\\n\\n\\t\\t}\\n \\t\\n\\t\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.workflow_state == 'completed' || current.workflow_state == 'rejected' || current.workflow_state == 'offline'\",\n\t\"name\": \"Service Discovery - Device Complete\"\n}```"}
{"prompt":"{\"prompt\":\"Clear profile on remove WS-Security type\",\"table\":\"sys_soap_message_function\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_soap_message_function\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar x509SysId = new ChoiceListHelper(\\\"sys_soap_message_function\\\", \\\"ws_security_type\\\").getChoiceSysId(\\\"X.509\\\");\\n\\t\\tvar userNameSysId = new ChoiceListHelper(\\\"sys_soap_message_function\\\", \\\"ws_security_type\\\").getChoiceSysId(\\\"Username\\\");\\n\\n\\t\\t// case: remove X.509 then clear X.509 profile\\n\\t\\tif (!gs.nil(current.ws_security_x509_profile) && current.ws_security_type.indexOf(x509SysId) == -1) {\\n\\t\\t\\tcurrent.ws_security_x509_profile = \\\"\\\";\\n\\t\\t\\tcurrent.use_ws_security = false;\\n\\t\\t}\\n\\n\\t\\t// case: remove Username then clear Username profile\\n\\t\\tif (!gs.nil(current.ws_security_username_profile) && current.ws_security_type.indexOf(userNameSysId) == -1) {\\n\\t\\t\\tcurrent.ws_security_username_profile = \\\"\\\";\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"ws_security_username_profileISNOTEMPTY^ws_security_typeNOT LIKE2105f20ed7101200b93ca5f75e61032c^NQws_security_x509_profileISNOTEMPTY^ws_security_typeNOT LIKE46f4f20ed7101200b93ca5f75e61030f^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear profile on remove WS-Security type\"\n}```"}
{"prompt":"{\"prompt\":\"Set NLU Model Dirty (nlu_utterance)\",\"table\":\"sys_nlu_utterance\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_nlu_utterance\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\t(new NLUModel(current.intent.model)).setDirty();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set NLU Model Dirty (nlu_utterance)\"\n}```"}
{"prompt":"{\"prompt\":\"Close skip previous tasks\",\"table\":\"alm_transfer_order_line_task\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"alm_transfer_order_line_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/** All tasks for the in-flight TOLs are created at once and these tasks should be closed in the order mentioned. \\n\\tWhen a task with higher order than some other tasks is closed, This business rule will close skip the tasks whose order is less than the current closing task.\\n\\tThis business rule will only run when there are more than 2 open/pending/work in progress tasks for the TOL. This ensures that the business rule will run only for in-flight TOLs as for any new TOL that is created, will have a workflow associated with it and thus creating one task at a time.\\n**/\\n\\ncloseSkipPreviousTasks();\\n\\nfunction closeSkipPreviousTasks() {\\n\\t\\tvar taskCount = getOpenTaskCount();\\n\\t\\tvar firstOpenTaskGr = getFirstOpenTask();\\n\\n\\t\\tif (!gs.nil(firstOpenTaskGr)) {\\n\\t\\t\\t\\tif (taskCount >= 2 && firstOpenTaskGr.getValue('order') < current.getValue('order')) {\\n\\t\\t\\t\\t\\t\\t// Close skip the tasks whose order is less than the current\\n\\t\\t\\t\\t\\t\\tcloseBeforeTasks();\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfunction closeBeforeTasks() {\\n\\t\\t\\t\\tvar tolTaskGr = new GlideRecord('alm_transfer_order_line_task');\\n\\t\\t\\t\\ttolTaskGr.addQuery('transfer_order_line', current.transfer_order_line);\\n\\t\\t\\t\\t// state = 1 = Open, state = 2 = Work In Progress, state = -5 = Pending\\n\\t\\t\\t\\ttolTaskGr.addQuery('state', 'IN', '-5,1,2');\\n\\t\\t\\t\\ttolTaskGr.addQuery('order', '<', parseInt(current.order));\\n\\t\\ttolTaskGr.orderBy('order');\\n\\t\\t\\t\\ttolTaskGr.query();\\n\\t\\t\\t\\twhile (tolTaskGr.next()) {\\n\\t\\t\\t\\t\\t\\ttolTaskGr.setValue('state', 7);\\n\\t\\t\\t\\t\\t\\ttolTaskGr.update();\\n\\t\\t\\t\\t}\\n\\t\\t\\n\\t\\t}\\n\\n\\t\\tfunction getFirstOpenTask() {\\n\\t\\t\\t\\tvar tolTaskGr = new GlideRecord('alm_transfer_order_line_task');\\n\\t\\t\\t\\ttolTaskGr.addQuery('transfer_order_line', current.transfer_order_line);\\n\\t\\t\\t\\t// state = 1 = Open, state = 2 = Work In Progress, state = -5 = Pending\\n\\t\\t\\t\\ttolTaskGr.addQuery('state', 'IN', '-5,1,2');\\n\\t\\t\\t\\ttolTaskGr.orderBy('order');\\n\\t\\t\\t\\ttolTaskGr.setLimit(1);\\n\\t\\t\\t\\ttolTaskGr.query();\\n\\t\\t\\t\\tif (tolTaskGr.next()) {\\n\\t\\t\\t\\t\\t\\treturn tolTaskGr;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\t\\tfunction getOpenTaskCount() {\\n\\t\\t\\t\\ttaskCount = 0;\\n\\t\\t\\t\\tvar taskGr = new GlideAggregate('alm_transfer_order_line_task');\\n\\t\\t\\t\\ttaskGr.addQuery('transfer_order_line', current.transfer_order_line);\\n\\t\\t\\t\\t// state = 1 = Open, state = 2 = Work In Progress, state = -5 = Pending\\n\\t\\t\\t\\ttaskGr.addQuery('state', 'IN', '-5,1,2');\\n\\t\\t\\t\\ttaskGr.addAggregate('COUNT', 'order');\\n\\t\\t\\t\\ttaskGr.orderByAggregate('COUNT', 'order');\\n\\t\\t\\t\\ttaskGr.setGroup(false);\\n\\t\\t\\t\\ttaskGr.query();\\n\\t\\t\\t\\tif (taskGr.next()) {\\n\\t\\t\\t\\t\\t\\ttaskCount = parseInt(taskGr.getAggregate('COUNT', 'order'));\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn taskCount;\\n\\t\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"state=3^ORstate=7^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Close skip previous tasks\"\n}```"}
{"prompt":"{\"prompt\":\"Set Domain for M2M Cat Assessable Recs\",\"table\":\"asmt_m2m_category_assessment\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_m2m_category_assessment\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar catDomain = current.category.sys_domain;\\n\\tvar assessableDomain = current.assessment_record.sys_domain;\\n\\t//if metric type is non global, assessable record domain must be same as metric type domain\\n\\tif (new AssessmentUtils().domainIsGlobal(catDomain) || catDomain == assessableDomain)\\n\\t\\tcurrent.sys_domain = assessableDomain;\\n\\telse {\\n\\t\\tgs.addErrorMessage(gs.getMessage('Incompatible domains for Category and Assessable Record'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"GlidePluginManager.isActive('com.glide.domain')\",\n\t\"name\": \"Set Domain for M2M Cat Assessable Recs\"\n}```"}
{"prompt":"{\"prompt\":\"Unset default all other models\",\"table\":\"chg_model\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"chg_model\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar chgModelGr = new GlideRecord(\\\"chg_model\\\");\\n\\tchgModelGr.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.sys_id);\\n\\tchgModelGr.addQuery(\\\"default_change_model\\\", \\\"1\\\");\\n\\tchgModelGr.addQuery(\\\"table_name\\\", current.getValue(\\\"table_name\\\"));\\n\\tchgModelGr.query();\\n\\twhile (chgModelGr.next()) {\\n\\t\\tchgModelGr.setValue(\\\"default_change_model\\\", \\\"0\\\");\\n\\t\\tchgModelGr.update();\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"default_change_modelCHANGESTOtrue^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Unset default all other models\"\n}```"}
{"prompt":"{\"prompt\":\"Check default values\",\"table\":\"sys_ui_hp_publisher\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ui_hp_publisher\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar excludedItems = current.exclusion_choice_list.toString();\\n\\tvar defaultValues = current.default_choice.toString();\\n\\tvar excludedItemsArray = excludedItems.split(\\\",\\\");\\n\\tvar defaultValuesArray = defaultValues.split(\\\",\\\");\\n\\tvar hasOverlap = false;\\n\\t\\n\\tfor(var i=0;i<defaultValuesArray.length;i++){\\n\\t\\tif(excludedItemsArray.indexOf(defaultValuesArray[i]) > -1){\\n\\t\\t\\thasOverlap =true;\\n\\t\\t}\\n\\t}\\n\\t\\n\\tif(hasOverlap){\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Default values contains excluded items\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\t\\n\\t\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"type=1^exclusion_choice_listISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Check default values\"\n}```"}
{"prompt":"{\"prompt\":\"delete orphan multi row question answers\",\"table\":\"sc_cart_item\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_cart_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tgs.eventQueue('sc_cart_item.multi_row.orphan.delete', null, current.getUniqueValue());\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"delete orphan multi row question answers\"\n}```"}
{"prompt":"{\"prompt\":\"sc_task_events\",\"table\":\"sc_task\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.operation() != 'insert' && current.comments.changes()) {\\r\\n\\t gs.eventQueue(\\\"sc_task.commented\\\", current, gs.getUserID(), gs.getUserName());\\r\\n}\\r\\n\\r\\nif (current.operation() != 'insert' && current.work_notes.changes()) {\\r\\n\\t gs.eventQueue(\\\"sc_task.worknoted\\\", current, gs.getUserID(), gs.getUserName());\\r\\n}\\r\\n\\r\\nif (current.operation() == 'update') {\\r\\n\\t gs.eventQueue(\\\"sc_task.updated\\\", current, gs.getUserID(), gs.getUserName());\\r\\n}\\r\\n\\r\\nif (current.state.changes() ) {\\r\\n\\t gs.eventQueue(\\\"sc_task.state.changed\\\", current, current.state, previous.state);\\r\\n}\\r\\n\\r\\nif (current.assigned_to.changes() || current.work_start.changes()) {\\r\\n\\t gs.eventQueue(\\\"sc_task.assigned.to.user\\\", current, current.assigned_to.getDisplayValue() , previous.assigned_to.getDisplayValue());\\r\\n}\\r\\n\\r\\nif (current.assignment_group.changes() || current.work_start.changes()) {\\r\\n\\t gs.eventQueue(\\\"sc_task.assigned.to.group\\\", current, current.assignment_group.getDisplayValue() , previous.assignment_group.getDisplayValue());\\r\\n}\\r\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.work_start.nil()\",\n\t\"name\": \"sc_task_events\"\n}```"}
{"prompt":"{\"prompt\":\"Set unique table name on insert\",\"table\":\"sys_sg_universal_link_applet_mapping\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_universal_link_applet_mapping\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\n\\t\\tvar gr = new GlideRecord(current.sys_class_name);\\n\\t\\tgr.addQuery('source_table_name', current.source_table_name);\\n\\t\\tgr.query();\\n\\t\\tif (gr.hasNext()) {\\n\\t\\t\\t\\tvar msg = gs.getMessage(\\\"A {0} record with the selected table value already exists. Please update the existing record. Duplicate records cannot exist for a single table.\\\", current.sys_class_name);\\n\\t\\t\\t\\tgs.addErrorMessage(msg);\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"source_table_nameISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Set unique table name on insert\"\n}```"}
{"prompt":"{\"prompt\":\"Mandatory Closure Information\",\"table\":\"change_request\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"900\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar abort = false;\\n\\tif (current.close_code.nil()) {\\n\\t\\tabort = false;\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Close code is mandatory when closing a Change Request\\\"));\\n\\t}\\n\\n\\tif (current.close_notes.nil()) {\\n\\t\\tabort = true;\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Close notes are mandatory when closing a Change Request\\\"));\\n\\t}\\n\\n\\tif (!current.close_code.nil() && !validCloseCode(current.close_code)) {\\n\\t\\tabort = true;\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Close code cannot be set to an invalid value: {0}\\\", current.close_code));\\n\\t}\\n\\t\\n\\tif (abort)\\n\\t\\tcurrent.setAbortAction(true);\\n})(current, previous);\\n\\nfunction validCloseCode(closeCode) {\\n\\tcloseCode = closeCode + \\\"\\\";\\n\\tif (!closeCode)\\n\\t\\treturn true;\\n\\n\\tvar choices = GlideChoiceList.getChoiceList(\\\"change_request\\\", \\\"close_code\\\");\\n\\tfor (var i = 0; i < choices.getSize(); i++)\\n\\t\\tif (choices.getChoice(i).getValue() + \\\"\\\" === closeCode)\\n\\t\\t\\treturn true;\\n\\treturn false;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"state=3^EQ\",\n\t\"condition\": \"gs.getProperty(ChangeRequestSNC.ENFORCE_DATA_REQ_PROP) === \\\"true\\\" && current.chg_model.nil()\",\n\t\"name\": \"Mandatory Closure Information\"\n}```"}
{"prompt":"{\"prompt\":\"Block steps with same escalation level\",\"table\":\"cmn_rota_esc_step_def\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmn_rota_esc_step_def\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar gr = new GlideRecord('cmn_rota_esc_step_def');\\n\\tgr.addQuery('escalation_set', current.escalation_set);\\n\\tgr.addQuery('escalation_level', current.escalation_level);\\n\\tgr.setLimit(1);\\n\\tif (current.operation() == 'update')\\n\\t\\tgr.addQuery('sys_id','!=', current.getUniqueValue());\\n\\tgr.query();\\n\\tif (gr.hasNext()) {\\n\\t\\tvar msg = gs.getMessage('Step with escalation level - {0} already exists for escalation set {1}', [current.escalation_level, current.escalation_set.getDisplayValue()]);\\n\\t\\tgs.addErrorMessage(msg);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Block steps with same escalation level\"\n}```"}
{"prompt":"{\"prompt\":\"Insert Order\",\"table\":\"sys_aw_my_list\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_aw_my_list\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar gr = new GlideRecord('sys_aw_my_list');\\n\\tgr.addEncodedQuery('sys_created_by=javascript:gs.getUserName()^active=true^ORDERBYDESCorder');\\n\\tgr.query();\\n\\t\\n\\tif (gr.next()) {\\n\\t\\tcurrent.order = parseInt(gr.getValue('order'), 10) + 10;\\n\\t} \\n\\telse {\\n\\t\\tcurrent.order = 10;\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Insert Order\"\n}```"}
{"prompt":"{\"prompt\":\"Flush Form Cache\",\"table\":\"sys_data_policy2\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_data_policy2\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.cacheFlush('syscache_realform');\\r\\ngs.cacheFlush('syscache_jelly_script');\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Flush Form Cache\"\n}```"}
{"prompt":"{\"prompt\":\"Setting state based on dates\",\"table\":\"sn_shn_notes\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_shn_notes\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t/*\\n\\tStatus - 1 :Active\\n\\t2 - Inactive\\n\\t3 - Expired\\n\\t*/\\n\\t\\n\\tif(current.effective_immediately == true){\\n\\t\\tcurrent.effective_on = \\\"\\\";\\n\\t}\\n\\tvar now = new GlideDateTime().getValue();\\n\\t\\n\\t//Mark active if effective immediately is true and now < expiry\\n\\tif(current.getValue(\\\"effective_immediately\\\") == true && now < current.expires_on){\\n\\t\\t current.status = 1;\\n\\t }else if(now >= current.expires_on){\\n\\t\\t current.status = 3;\\n\\t }else if (current.getValue(\\\"effective_immediately\\\") == false && now < current.effective_on){\\n\\t\\t //Mark inactive if now < effective on\\n\\t\\t current.status = 2;\\n\\t }else if(current.getValue(\\\"effective_immediately\\\") == false && current.effective_on <= now){\\n\\t\\t //Mark active if effective on < now\\n\\t\\t current.status = 1;\\n\\t }\\n\\t\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"effective_immediatelyVALCHANGES^OReffective_onVALCHANGES^ORexpires_onVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Setting state based on dates\"\n}```"}
{"prompt":"{\"prompt\":\"Delete Dictionary\",\"table\":\"sys_db_view\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_db_view\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// prevent transaction cancellation by quota rules\\nvar t = null;\\nvar isUncancelable = false;\\ntry {\\n\\t// store original uncancelable state\\n\\tt = GlideTransaction.get();\\n\\tif (t != null) {\\n\\t\\tisUncancelable = t.isUncancelable();\\n\\t\\tt.setCannotCancel(true);\\n\\t}\\n\\n\\tgs.print('Removing dictionary entries for ' + current.name);\\n\\tvar dict = new GlideRecord('sys_dictionary');\\n\\tdict.initialize();\\n\\tdict.setWorkflow(true);\\n\\tdict.addQuery('name', current.name);\\n\\tdict.query();\\n\\tdict.deleteMultiple();\\n\\n} finally {\\n\\t// restore original uncancelable state\\n\\tif (t != null)\\n\\t\\tt.setCannotCancel(isUncancelable);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.name.nil()\",\n\t\"name\": \"Delete Dictionary\"\n}```"}
{"prompt":"{\"prompt\":\"Set use basic auth flag false\",\"table\":\"sys_soap_message\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_soap_message\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\t //This function will be automatically called when this rule is processed.\\n\\t \\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"authentication_type!=basic_simple^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Set use basic auth flag false\"\n}```"}
{"prompt":"{\"prompt\":\"getGroupMembersM2M\",\"table\":\"\",\"when\":\"after\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// Only show members of current group when selecting the roster members\\r\\n//\\r\\n// 'lookup' is the GlideRecord that we will be using to select the users for the M2M list\\r\\n//\\r\\n\\r\\n// Get the list of users in this group\\r\\ngs.log(\\\"Getting users from group (\\\" + current.rota.group + \\\")\\\");\\r\\nvar userIds = new Array();\\r\\nvar userGR = new GlideRecord('sys_user_grmember');\\r\\nuserGR.addQuery(\\\"group\\\", current.rota.group);\\r\\nuserGR.query();\\r\\nwhile (userGR.next()) {\\r\\n\\t\\tuserIds.push(userGR.user.toString());\\r\\n}\\r\\n\\r\\nvar encoded = 'sys_idIN' + userIds.join(',');\\r\\nlookup.addEncodedQuery(encoded);\\r\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"getGroupMembersM2M\"\n}```"}
{"prompt":"{\"prompt\":\"Notify incorrect renewal duration\",\"table\":\"ast_contract\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ast_contract\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"150\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar renOpt = {\\n\\t\\t\\\"1 year\\\": { \\\"y\\\": 1, \\\"m\\\": 0, \\\"d\\\": 0 },\\n\\t\\t\\\"2 years\\\": { \\\"y\\\": 2, \\\"m\\\": 0, \\\"d\\\": 0 },\\n\\t\\t\\\"3 years\\\": { \\\"y\\\": 3, \\\"m\\\": 0, \\\"d\\\": 0 }\\n\\t};\\n\\n\\tvar renLen = renOpt[current.renewal_options + \\\"\\\"];\\n\\n\\tvar endDate = new GlideDate();\\n\\tendDate.setValue(current.renewal_end_date);\\n\\n\\tvar compDate = new GlideDate();\\n\\tcompDate.setValue(current.renewal_date);\\n\\tif (renLen.y !== 0)\\n\\t\\tcompDate.addYearsUTC(renLen.y);\\n\\tif (renLen.m !== 0)\\n\\t\\tcompDate.addMonthsUTC(renLen.m);\\n\\tif (renLen.d !== 0)\\n\\t\\tcompDate.addDaysUTC(renLen.d);\\n\\n\\tcompDate.addDaysUTC(-1); // Last day of the year, not same day next year.\\n\\n\\tif (!endDate.equals(compDate))\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"The date range between the Renewal start date and Renewal end date do not match the selected option.\\\"));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"renewable=true^renewal_options!=^renewal_dateISNOTEMPTY^renewal_end_dateISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Notify incorrect renewal duration\"\n}```"}
{"prompt":"{\"prompt\":\"ContractHistory\",\"table\":\"ast_contract\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ast_contract\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"115\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var cmu = new ContractManagementUtils();\\nif (!gs.nil(current.oldStartDate) || !gs.nil(current.oldEndDate)) {\\n\\t\\tcmu.appendContractHistory(previous, current.oldStartDate, current.oldEndDate);\\n} else if (!previous.starts.nil() || !previous.ends.nil() || !previous.terms_and_conditions.nil()) {\\n\\t\\tcmu.appendContractHistory(previous);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.isInManageLifecycle && (current.starts.changes() || current.ends.changes() || current.terms_and_conditions.changes())\",\n\t\"name\": \"ContractHistory\"\n}```"}
{"prompt":"{\"prompt\":\"Abort adding same flow twice\",\"table\":\"em_alert_man_m2m_rule_flow\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"em_alert_man_m2m_rule_flow\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tgs.include('EvtMgmtAlertManagementCommons'); \\n\\tvar evtMgmtAlertManagementCommons = new EvtMgmtAlertManagementCommons(); \\n\\tif (evtMgmtAlertManagementCommons.activeFlowExist(current)) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Abort adding action '{0}', same subflow can't be added twice.\\\", current.sub_flow.name));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\t\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"active=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Abort adding same flow twice\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Type Metadata Combination\",\"table\":\"cmdb_policy_type\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_policy_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t/*\\n\\tSTRY53422744\\n\\tIt is possible that a policy may have automatic subflow (e.x. retire subflow) \\n\\tor manual process (e.x. manual attestation) or both. However, when creating or\\n\\tupdating policy type metadata, we should not allow a policy to neither have a subflow\\n\\tnor a manual process, i.e. a policy that does nothing. Complete state permutation and \\n\\tcorresponding logic flow can be found in STRY53422744.\\n\\t*/\\n\\t\\n\\tif(current.is_subflow_optional.toString() === 'true' && current.has_manual_process.toString() === 'false'){\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Policy must have either a subflow or manual process.\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate Type Metadata Combination\"\n}```"}
{"prompt":"{\"prompt\":\"change reopen\",\"table\":\"change_request\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"101\",\n\t\"add_message\": \"false\",\n\t\"script\": \"\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"stateVALCHANGES^stateIN-5,-4,-3,-2,-1,0^active=false^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"change reopen\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent dup key and key table records\",\"table\":\"sys_sg_custom_map_provider\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_custom_map_provider\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar existingCustomProvider = new GlideRecord(\\\"sys_sg_custom_map_provider\\\");\\n\\texistingCustomProvider.addQuery(\\\"key\\\", current.key);\\n\\texistingCustomProvider.addQuery(\\\"key_table\\\", current.key_table);\\n\\texistingCustomProvider.setLimit(1);\\n\\texistingCustomProvider.query();\\n\\t\\n\\tif(!existingCustomProvider.next()\\n\\t\\t|| previous == null \\n\\t\\t|| existingCustomProvider.getUniqueValue() === current.getUniqueValue())\\n\\t\\treturn;\\n\\n\\tcurrent.setAbortAction(true);\\n\\tgs.addErrorMessage(gs.getMessage(\\\"A custom map provider already exists for the specified key and key table.\\\"));\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent dup key and key table records\"\n}```"}
{"prompt":"{\"prompt\":\"Restrict Empty AV, BV and measure\",\"table\":\"sn_gf_goal_target\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_gf_goal_target\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\tgs.addErrorMessage(gs.getMessage('Measure, Target Value and Base Value fields are mandatory if Actual Value is not empty'));\\n\\tcurrent.setAbortAction(true);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"type!=milestone^actual_valueISNOTEMPTY^measureISEMPTY^ORbase_valueISEMPTY^ORmeasureISEMPTY^ORtarget_valueISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Restrict Empty AV, BV and measure\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent duplicates\",\"table\":\"trigger_rule_table_cfg\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"trigger_rule_table_cfg\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\tvar gr = new GlideRecord(\\\"trigger_rule_table_cfg\\\");\\n\\tgr.addQuery(\\\"table\\\", current.getValue(\\\"table\\\"));\\n\\tgr.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.getUniqueValue());\\n\\tgr.addActiveQuery();\\n\\tgr.query();\\n\\n\\tif (gr.hasNext()) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Trigger Rule Table Config table must be unique\\\"));\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent duplicates\"\n}```"}
{"prompt":"{\"prompt\":\"Remove member from live group\",\"table\":\"vtb_board_member\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"vtb_board_member\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"110\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar groupsForThisBoard = new GlideRecord(\\\"live_group_profile\\\");\\n\\tgroupsForThisBoard.addQuery(\\\"table\\\", \\\"vtb_board\\\");\\n\\tgroupsForThisBoard.addQuery(\\\"document\\\", current.board);\\n\\tgroupsForThisBoard.query();\\n\\n\\tvar groupIDs = [];\\n\\tvar collaborationManager = new GlideCollaborationManager();\\n\\twhile(groupsForThisBoard.next()) {\\n\\t\\tif(checkExistingMembership(current.user, groupsForThisBoard.sys_id)) {\\n\\t\\t\\tcollaborationManager.removeMemberFromGroup(\\\"sys_user.\\\" + current.user, \\\"live_group_profile.\\\" + groupsForThisBoard.sys_id);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction checkExistingMembership(user, group) {\\n\\t\\tvar membership = new GlideRecord(\\\"live_group_member\\\");\\n\\t\\tmembership.addQuery(\\\"group\\\", group);\\n\\t\\tmembership.addQuery(\\\"member.document\\\", user);\\n\\t\\tmembership.query();\\n\\n\\t\\treturn membership.next();\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Remove member from live group\"\n}```"}
{"prompt":"{\"prompt\":\"Abort if relationship same scope as list\",\"table\":\"sys_ui_related_list_relationship_entry\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ui_related_list_relationship_entry\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"110\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tcurrent.setAbortAction(true);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.isActionAborted() && current.sys_relationship.sys_scope.toString() === current.sys_ui_related_list.sys_scope.toString()\",\n\t\"name\": \"Abort if relationship same scope as list\"\n}```"}
{"prompt":"{\"prompt\":\"Validate schema namespace uniqueness\",\"table\":\"sys_graphql_schema\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_graphql_schema\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar gr = new GlideAggregate(\\\"sys_graphql_schema\\\");\\n\\tgr.addQuery(\\\"namespace\\\", current.namespace);\\n\\tgr.addQuery(\\\"application_namespace\\\", current.application_namespace);\\n\\tgr.addAggregate(\\\"COUNT\\\");\\n\\tgr.query();\\n\\tif ((gr.next()) && (gr.getAggregate('COUNT') > 0)) {\\n\\t\\tgs.addErrorMessage(\\\"Schema namespace \\\" + current.namespace + \\\" already exists for application namespace \\\" +\\n\\t\\t\\t\\t\\t\\t\\tcurrent.application_namespace);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.namespace.toString() !== previous.namespace.toString()\",\n\t\"name\": \"Validate schema namespace uniqueness\"\n}```"}
{"prompt":"{\"prompt\":\"Flush probe cache\",\"table\":\"sys_properties\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar gr = new GlideRecord(\\\"discovery_probe_results_cache\\\");\\n\\tgr.query();\\n\\tgr.deleteMultiple();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=glide.discovery.populate_software_instance_table^value=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Flush probe cache\"\n}```"}
{"prompt":"{\"prompt\":\"Validate oauth scope in profile\",\"table\":\"oauth_entity_profile_scope\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"oauth_entity_profile_scope\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*undefined when async or display*/) {\\n\\tif (current.oauth_entity_profile.oauth_entity != current.oauth_entity_scope.oauth_entity) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('Invalid scopes. The scopes must be from same provider as in profile.'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, typeof previous != 'undefined' ?\\tprevious : null);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate oauth scope in profile\"\n}```"}
{"prompt":"{\"prompt\":\"Blacklist search source tables\",\"table\":\"sys_search_source\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_search_source\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar tableName = String(current.source_table);\\n\\tvar blacklist = new SearchSourceTableBlacklist().get();\\n\\tif (blacklist.indexOf(tableName) > -1) {\\n\\t\\tgs.addInfoMessage('Search sources cannot be created for blacklisted tables.');\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Blacklist search source tables\"\n}```"}
{"prompt":"{\"prompt\":\"Avoid Duplicate Entry\",\"table\":\"sn_prod_cat_rel_m2m_product_catalog_item\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_prod_cat_rel_m2m_product_catalog_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar productCatalogGr = new GlideRecord('sn_prod_cat_rel_m2m_product_catalog_item');\\n\\tproductCatalogGr.addQuery('product_model', current.product_model.sys_id);\\n\\tproductCatalogGr.addQuery('catalog_item', current.catalog_item.sys_id);\\n\\tproductCatalogGr.query();\\n\\tif(productCatalogGr.hasNext()){\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Product Model and Catalog Item mapping already exists.\\\"));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Avoid Duplicate Entry\"\n}```"}
{"prompt":"{\"prompt\":\"Check form screen configuration\",\"table\":\"sys_sg_form_screen\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_form_screen\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /* null when async */) {\\n\\tvar dynamicMode = 'dynamic';\\n\\tvar formSegmentTable = 'sys_sg_form_segment';\\n\\tvar formScreenColumnName = 'form';\\n\\tvar dynamicSegmentProtection = new DynamicSegmentProtection();\\n\\n\\tvar mode = dynamicSegmentProtection.defineConfigurationMode(current.sys_class_name, current.sys_id);\\n\\tif (mode == dynamicMode)\\n\\t\\tcheckDynamicConfiguration(current);\\n\\n\\tfunction checkDynamicConfiguration(formScreenGR) {\\n\\t\\tvar orderColumn = 'order';\\n\\t\\tvar formSegmentGR = new GlideRecord(formSegmentTable);\\n\\t\\tformSegmentGR.addQuery(formScreenColumnName, formScreenGR.sys_id);\\n\\t\\tformSegmentGR.orderBy(orderColumn);\\n\\t\\tformSegmentGR.query();\\n\\t\\tvar index = 0;\\n\\t\\twhile (formSegmentGR.next()) {\\n\\t\\t\\tif (formSegmentGR.sys_class_name == formSegmentTable) {\\n\\t\\t\\t\\tvar message = gs.getMessage('Misconfiguration found in {0}: {1}.', [formSegmentTable, formSegmentGR.sys_id]);\\n\\t\\t\\t\\tdynamicSegmentProtection.checkStaticSegment(formSegmentGR, index, message);\\n\\t\\t\\t}\\n\\n\\t\\t\\tindex++;\\n\\t\\t}\\n\\t}\\n})(current, previous);\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Check form screen configuration\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent application inconsistency\",\"table\":\"sys_update_set\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_update_set\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"50\",\n\t\"add_message\": \"false\",\n\t\"script\": \"\\n\\t\\t\\tvar updateXmlGR = new GlideRecord('sys_update_xml');\\n\\t\\t\\tupdateXmlGR.addQuery('update_set', current.sys_id);\\n\\t\\t\\tupdateXmlGR.setLimit(1);\\n\\t\\t\\tupdateXmlGR.query();\\n\\t\\t\\tif (updateXmlGR.hasNext()) {\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('You cannot change the application of an update set that contains updates'));\\n\\t\\t\\t}\\n\\t\\t\\t\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.application.changes()\",\n\t\"name\": \"Prevent application inconsistency\"\n}```"}
{"prompt":"{\"prompt\":\"Update TimeZone on Personal Schedule\",\"table\":\"sys_user\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_user\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar agentScheduleUtil = new AgentScheduleUtil();\\n\\tif(agentScheduleUtil){\\n\\t\\tvar userPersonalScheduleGR = agentScheduleUtil.getAgentPersonalSchedule(current.sys_id);\\n\\t\\tif(userPersonalScheduleGR.next()){\\n\\t\\t\\tvar scheduleGR = new GlideRecord(\\\"cmn_schedule\\\");\\n\\t\\t\\tscheduleGR.addQuery('sys_id',userPersonalScheduleGR.getValue('personal_schedule'));\\n\\t\\t\\tscheduleGR.query();\\n\\t\\t\\twhile(scheduleGR.next()){\\n\\t\\t\\t\\tscheduleGR.setValue('time_zone',current.getValue('time_zone'));\\n\\t\\t\\t\\tscheduleGR.update();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"time_zoneVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Update TimeZone on Personal Schedule\"\n}```"}
{"prompt":"{\"prompt\":\"Ensure valid system filter type\",\"table\":\"sys_email_account\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_email_account\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tif (previous.isValidRecord() && previous.type == current.type && previous.system_address_filter == current.system_address_filter)\\n\\t\\t\\t\\treturn;\\n\\n\\t\\tif (current.type == 'smtp') {\\n\\t\\t\\t\\tif (current.system_address_filter && current.system_address_filter.type == 'inbound') {\\n\\t\\t\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('Outbound email account \\\\'{0}\\\\' is misconfigured with an inbound system filter \\\\'{1}\\\\'', [current.name, current.system_address_filter.name]));\\n\\t\\t\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t\\tif (current.system_address_filter && current.system_address_filter.type == 'outbound') {\\n\\t\\t\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('Inbound email account \\\\'{0}\\\\' is misconfigured with an outbound system filter \\\\'{1}\\\\'', [current.name, current.system_address_filter.name]));\\n\\t\\t\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\t}\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Ensure valid system filter type\"\n}```"}
{"prompt":"{\"prompt\":\"Keep active as false for draft item\",\"table\":\"sc_cat_item\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_cat_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"state=draft^ORstate=in_review^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Keep active as false for draft item\"\n}```"}
{"prompt":"{\"prompt\":\"Sync Template Inputs with Flow Inputs\",\"table\":\"sys_app_template_input_var\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_app_template_input_var\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"1000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar templateAPI = new sn_templates.TemplateScriptableAPI();\\n\\tvar sysFlowId = templateAPI.syncFlowInputs(current);\\n\\t\\n\\tif (sysFlowId !== null)\\n\\t\\tcurrent.flow_input_variable = sysFlowId;\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Sync Template Inputs with Flow Inputs\"\n}```"}
{"prompt":"{\"prompt\":\"Set Current Agenda Item\",\"table\":\"cab_meeting\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cab_meeting\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\tnew CABMeeting(current).firstPendingAgendaItemToInProgress();\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"stateCHANGESTOin_progress^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Set Current Agenda Item\"\n}```"}
{"prompt":"{\"prompt\":\"Sync default value\",\"table\":\"sys_dictionary\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_dictionary\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"synchronizeDefaultValue(current);\\n\\nfunction synchronizeDefaultValue(gr) {\\n\\tif (gr.default_value.changes()) {\\n\\t\\tgr.dynamic_default_value = getDynamicDefaultValue(gr.default_value.toString());\\n\\t\\tgr.use_dynamic_default = (gr.dynamic_default_value == '') ? false : true;\\n\\t} else if (gr.dynamic_default_value.changes()) {\\n\\t\\tgr.default_value = getDefaultValue(gr);\\n\\t\\tgr.use_dynamic_default = (gr.default_value == '') ? false : true;\\n\\t} else if (gr.use_dynamic_default.changesTo(false)) {\\n\\t\\tgr.default_value = '';\\n\\t\\tgr.dynamic_default_value = '';\\n\\t}\\n}\\n\\nfunction getDynamicDefaultValue(defaultValue) {\\n\\tdefaultValue = defaultValue.trim();\\n\\tif (isValidJavascriptCall(defaultValue)) {\\n\\t\\tdefaultValue = defaultValue.substring(\\\"javascript:\\\".length);\\n\\t\\tif (defaultValue.endsWith(';'))\\n\\t\\t\\tdefaultValue = defaultValue.substring(0, defaultValue.length - 1);\\n\\t\\t\\n\\t\\tvar dyn = new GlideRecord('sys_filter_option_dynamic');\\n\\t\\tdyn.addQuery('script', defaultValue).addOrCondition('script', defaultValue + ';');\\n\\t\\tdyn.query();\\n\\t\\tif (dyn.next())\\n\\t\\t\\treturn dyn.sys_id.toString();\\n\\t}\\n\\t\\n\\treturn '';\\n}\\n\\nfunction isValidJavascriptCall(str) {\\n\\tif (str.indexOf('javascript:') != 0)\\n\\t\\t\\treturn false;\\n\\t\\t\\t\\n\\tif (str.substring('javascript:'.length) == '')\\n\\t\\treturn false;\\n\\t\\t\\n\\treturn true;\\n}\\n\\nfunction getDefaultValue(gr) {\\n\\tif (gr.dynamic_default_value.script.nil())\\n\\t\\treturn '';\\n\\t\\n\\treturn 'javascript:' + gr.dynamic_default_value.script;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.default_value.changes() || current.dynamic_default_value.changes() || current.use_dynamic_default.changesTo(false)\",\n\t\"name\": \"Sync default value\"\n}```"}
{"prompt":"{\"prompt\":\"Reorder test parameter sets order\",\"table\":\"sys_atf_parameter_set\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_atf_parameter_set\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\t\\tvar testId = current.getValue('test');\\n\\t\\t\\tvar atfTest = new GlideRecord(\\\"sys_atf_test\\\");\\n\\n\\t\\t\\t// dont re-order param_set before a mass delete triggered by the parent sys_atf_test being deleted\\n\\t\\t\\tif (atfTest.get(testId)) {\\n\\t\\t\\t\\tnew ATFOrderUpdate().reorderAfterRemove('sys_atf_parameter_set', current);\\n\\t\\t\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Reorder test parameter sets order\"\n}```"}
{"prompt":"{\"prompt\":\"Generate Safe Input Variable Name\",\"table\":\"sys_app_template_input_var\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_app_template_input_var\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// If the name is changed for any reason a info message will be displayed to the user, as well as, logged.\\n\\tvar templateAPI = new sn_templates.TemplateScriptableAPI();\\n\\tvar cleanVarName = templateAPI.generateCleanFlowVariableName(current.name);\\n\\n\\tif (cleanVarName !== current.getValue('name')) {\\t\\n\\t\\t// Inform the user that a change in the variable name was made.\\n\\t\\tvar infoMessage = gs.getMessage(\\\"Template Input Variable name was modified. new name: '{0}', previous name: '{1}'\\\", [cleanVarName, current.name]);\\n\\t\\tgs.addInfoMessage(infoMessage);\\n\\n\\t\\t// Set the name to be the clean variable name.\\n\\t\\tcurrent.name = cleanVarName;\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Generate Safe Input Variable Name\"\n}```"}
{"prompt":"{\"prompt\":\"Abort if attribute is for table\",\"table\":\"ais_datasource_field_attribute\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ais_datasource_field_attribute\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\t\\n\\t\\tif (current.attribute.applies_to == 1) {\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif (current.attribute.attribute == \\\"dot_walk_fields\\\") {\\n\\t\\t\\t\\tvar elementDescriptor = GlideTableDescriptor.get(current.source).getElementDescriptor(current.field);\\n\\t\\t\\t\\t// only inlcude dot-walk attribute when column is reference\\n\\t\\t\\t\\tif (!elementDescriptor.isReference()) {\\n\\t\\t\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\t}\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Abort if attribute is for table\"\n}```"}
{"prompt":"{\"prompt\":\"Sync to Product catalog item\",\"table\":\"cmdb_model\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_model\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.sys_class_name == 'cmdb_hardware_product_model' || current.sys_class_name == 'cmdb_consumable_product_model')\\n\\t\\t(new ProductCatalogUtils()).updateProductCatalog(current, 'model', 'pc_hardware_cat_item');\\nelse if (current.sys_class_name == 'cmdb_software_product_model')\\n\\t\\t(new ProductCatalogUtils()).updateProductCatalog(current, 'model', 'pc_software_cat_item');\\nelse if ((GlideDBObjectManager.get().getBase(current.getTableName()) != 'cmdb_serviceorder_product_model') && (GlideDBObjectManager.get().getBase(current.getTableName()) != 'cmdb_servicetask_product_model'))\\n\\t\\t(new ProductCatalogUtils()).updateProductCatalog(current, 'model', 'pc_product_cat_item');\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(current.model_number.changes() || current.cost.changes() || current.description.changes() || current.short_description.changes()) && !current.product_catalog_item.nil()\",\n\t\"name\": \"Sync to Product catalog item\"\n}```"}
{"prompt":"{\"prompt\":\"Service Lifecycle Constraint\",\"table\":\"cmdb_ci_service\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci_service\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar serviceStatusChoices = new GlideChoiceList().getChoiceList('cmdb_ci_service', 'service_status');\\n\\tvar retiring = serviceStatusChoices.getChoice('retiring');\\n\\tvar retired = serviceStatusChoices.getChoice('retired');\\n\\tvar obsolete = serviceStatusChoices.getChoice('obsolete');\\n\\tvar operational = serviceStatusChoices.getChoice('operational').getLabel().toLowerCase();\\n\\tvar lifeCycleLabels = [];\\n\\tif (retiring)\\n\\t\\tlifeCycleLabels.push(retiring.getLabel().toLowerCase());\\n\\tif (retired)\\n\\t\\tlifeCycleLabels.push(retired.getLabel().toLowerCase());\\n\\tif (obsolete)\\n\\t\\tlifeCycleLabels.push(obsolete.getLabel().toLowerCase());\\n\\t\\n\\tvar labelString = lifeCycleLabels.join(gs.getMessage(' or '));\\t\\n\\tgs.addErrorMessage(gs.getMessage('{0} can only move forward to {1} from {2}.', [current.service_status.getED().getLabel(), labelString , operational]));\\n\\tcurrent.setAbortAction(true);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"service_statusCHANGESFROMoperational^EQ\",\n\t\"condition\": \"(new global.SPMUtilsFactory().getUtils().isValidServiceOrOffering(current.sys_class_name)) && !(current.service_status == 'retiring' || current.service_status == 'retired' || current.service_status == 'obsolete')\",\n\t\"name\": \"Service Lifecycle Constraint\"\n}```"}
{"prompt":"{\"prompt\":\"SLA Workflow Condition Check\",\"table\":\"wf_workflow_version\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"wf_workflow_version\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"abortConditionsOnSLAWorkflows();\\n\\nfunction abortConditionsOnSLAWorkflows() {\\n\\tif (!SLAvalidation.workflowConditionEmpty(current.workflow, current.condition_type, current.condition)) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"SLA Workflows should not specify conditions\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t }\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"SLAvalidation.isInSLAworkflow(current.workflow) && (!current.condition_type.nil() || !current.condition.nil())\",\n\t\"name\": \"SLA Workflow Condition Check\"\n}```"}
{"prompt":"{\"prompt\":\"Timer Trigger Insert\",\"table\":\"sys_flow_timer_trigger\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_flow_timer_trigger\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tsn_flow_trigger.FlowTriggerAPI.createTimerTrigger(current);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Timer Trigger Insert\"\n}```"}
{"prompt":"{\"prompt\":\"Backout history version for push\",\"table\":\"sys_sync_history\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sync_history\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"//Set all to not_pushed\\nvar push = new SNC.PushAPI();\\npush.updateHistoryVersionStateForBackedOutHistory(current.sys_id, current.type);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.type != \\\"pull\\\" && current.stage == \\\"backedout\\\"\",\n\t\"name\": \"Backout history version for push\"\n}```"}
{"prompt":"{\"prompt\":\"Verify LDAP result set row is greater th\",\"table\":\"sys_data_source\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"false\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_data_source\",\n\t\"advanced\": \"false\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"ldapprobe_result_set_rows<=0^type=LDAP^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Verify LDAP result set row is greater th\"\n}```"}
{"prompt":"{\"prompt\":\"Can node be deleted\",\"table\":\"sys_cb_node\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cb_node\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar OUTCOME_MESSAGE = gs.getMessage(\\\"There are conversation paths that would be orphaned if this Decision Outcome record is deleted. Please delete those conversation paths before deleting this Decision Outcome\\\");\\n\\tvar DECISION_MESSAGE = gs.getMessage(\\\"There are conversation paths that would be orphaned if this Decision record is deleted. Please delete those conversation paths before deleting this Decision\\\");\\n\\tvar COLLECTOR_MESSAGE = gs.getMessage(\\\"There are conversation paths that would be orphaned if this Thread Colletor record is deleted. Please delete those conversation paths before deleting this Thread Colletor.\\\");\\n\\tvar DEFAULT_MESSAGE = gs.getMessage(\\\"There are conversation paths that would be orphaned if this record is deleted. Please delete those conversation paths before deleting this Thread Colletor.\\\");\\n\\t\\n\\tvar nodeUtil = new ConversationNodeUtil();\\n\\tif (!nodeUtil.canNodeBeDeleted(current)) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.debug(\\\"Aborting delete of node {0} ({1})\\\", current.getValue(\\\"name\\\"), current.getValue(\\\"sys_id\\\"));\\n\\t\\t\\n\\t\\tswitch (current.getRecordClassName()) {\\n\\t\\t\\tcase \\\"sys_cb_decision\\\":\\n\\t\\t\\t\\tgs.addInfoMessage(DECISION_MESSAGE);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"sys_cb_outcome\\\":\\n\\t\\t\\t\\tgs.addInfoMessage(OUTCOME_MESSAGE);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"sys_cb_collector\\\":\\n\\t\\t\\t\\tgs.addInfoMessage(COLLECTOR_MESSAGE);\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\tdefault :\\n\\t\\t\\t\\tgs.addInfoMessage(DEFAULT_MESSAGE);\\n\\t\\t}\\n\\t\\treturn;\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.getRecordClassName() == 'sys_cb_decision' || current.getRecordClassName() == 'sys_cb_outcome' || current.getRecordClassName() == 'sys_cb_collector'\",\n\t\"name\": \"Can node be deleted\"\n}```"}
{"prompt":"{\"prompt\":\"Save Assignment Date or Due date source\",\"table\":\"sn_hr_core_template\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_template\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.use_assignment_date) \\n\\t\\tcurrent.due_date_source = '';\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.use_assignment_date\",\n\t\"name\": \"Save Assignment Date or Due date source\"\n}```"}
{"prompt":"{\"prompt\":\"cancel flow on request cancelled/deleted\",\"table\":\"sc_req_item\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_req_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"-100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t// If request has a flow desinger execution associated with it, cancel it.\\n\\tif ((current.stage == 'Request Cancelled' || current.operation() == 'delete') && current.flow_context && !current.flow_context.nil())\\n\\t\\tnew sn_fd.FlowAPI.cancel(current.flow_context, \\\"manually by \\\" + gs.getSession().getUserName());\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(current.stage.changes() && (current.stage==\\\"Request Cancelled\\\") ) || (current.operation() == 'delete')\",\n\t\"name\": \"cancel flow on request cancelled/deleted\"\n}```"}
{"prompt":"{\"prompt\":\"PA Threshold Element\",\"table\":\"pa_thresholds\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_thresholds\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"50\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\tif (!current.breakdown || current.breakdown == '') {\\n\\t\\tcurrent.breakdown = '';\\n\\t\\tcurrent.element = '';\\n\\t\\tcurrent.breakdown_level2 = '';\\n\\t\\tcurrent.element_level2 = '';\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\tif (!current.element || current.element == '') {\\n\\t\\tcurrent.element = 'unmatched';\\n\\t}\\n\\t\\n\\tvar breakdownChanged = (current.breakdown != previous.breakdown);\\n\\tvar elementChanged = (current.element != previous.element);\\n\\tif (breakdownChanged && !elementChanged) {\\n\\t\\tcurrent.element = 'unmatched';\\n\\t}\\n\\t\\n\\tif (!current.breakdown_level2 || current.breakdown_level2 == '') {\\n\\t\\tcurrent.element_level2 = '';\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\tif (!current.element_level2 || current.element_level2 == '') {\\n\\t\\tcurrent.element_level2 = 'unmatched';\\n\\t}\\n\\t\\n\\tvar breakdownL2Changed = (current.breakdown_level2 != previous.breakdown_level2);\\n\\tvar elementL2Changed = (current.element_level2 != previous.element_level2);\\n\\tif (breakdownL2Changed && !elementL2Changed) {\\n\\t\\tcurrent.element_level2 = 'unmatched';\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"PA Threshold Element\"\n}```"}
{"prompt":"{\"prompt\":\"PA Validate facts table\",\"table\":\"pa_scripts\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_scripts\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (SNC.PAScript.isScriptReferencedByIndicatorsOrBrakdowns(current.sys_id)) {\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Facts table cannot be changed because there is at least one Breakdown or Indicator depending on this Script\\\"));\\n\\tcurrent.setAbortAction(true);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"tableVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"PA Validate facts table\"\n}```"}
{"prompt":"{\"prompt\":\"Clear SSL For MID Server\",\"table\":\"ldap_server_config\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ldap_server_config\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"current.ssl = false;\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.mid_server != null && current.mid_server != ''\",\n\t\"name\": \"Clear SSL For MID Server\"\n}```"}
{"prompt":"{\"prompt\":\"SLA Definition Empty Schedule Warning\",\"table\":\"contract_sla\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"contract_sla\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"SLAvalidation.warnEmptySchedules(current);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.schedule_source+\\\"\\\" == 'sla_definition' && JSUtil.notNil(current.schedule)\",\n\t\"name\": \"SLA Definition Empty Schedule Warning\"\n}```"}
{"prompt":"{\"prompt\":\"Enforce unique value\",\"table\":\"sn_hr_core_service\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_service\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar serviceGr = new GlideRecord(\\\"sn_hr_core_service\\\");\\n\\tserviceGr.addQuery(\\\"value\\\", current.value);\\n\\tserviceGr.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.getUniqueValue());\\n\\tserviceGr.query();\\n\\t\\n\\tif (serviceGr.hasNext()) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"'{0}' is not a unique HR Service value\\\", [current.value]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.value.nil() && current.value.changes()\",\n\t\"name\": \"Enforce unique value\"\n}```"}
{"prompt":"{\"prompt\":\"Set active field in ts_index_group\",\"table\":\"ts_index_name\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ts_index_name\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var grGroups = new GlideRecord('ts_index_group');\\ngrGroups.addEncodedQuery('tablesLIKE' + current.table);\\ngrGroups.query();\\nvar tsUtil = new GlideTSUtil();\\nwhile (grGroups.next() ) {\\n\\tvar groupGR = getIndexGroupRecord(grGroups.name);\\n\\tif (groupGR && groupGR.tables) {\\n\\t\\tvar active = tsUtil.isIndexGroupActive(grGroups.tables);\\n\\t\\tif (active != groupGR.getBooleanAttribute('active')) {\\n\\t\\t\\ttsUtil.flushIndexGroupCache();\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction getIndexGroupRecord(name) {\\n\\tvar gr = new GlideRecord('ts_index_group');\\n\\tgr.addQuery('name', name);\\n\\tgr.query();\\n\\tif (gr.next())\\n\\t\\t\\treturn gr;\\n\\t\\n\\treturn null;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.state.changes() || current.format.changes()\",\n\t\"name\": \"Set active field in ts_index_group\"\n}```"}
{"prompt":"{\"prompt\":\"Disallow escalation set with same order\",\"table\":\"cmn_rota_escalation_set\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmn_rota_escalation_set\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar escalationSetGr = new GlideRecord('cmn_rota_escalation_set');\\n\\tif (current.getValue('cmn_rota')) {\\n\\t\\tescalationSetGr.addQuery('cmn_rota', current.getValue('cmn_rota'));\\n\\t}\\n\\telse if (current.getValue('group_escalation')) {\\n\\t\\tescalationSetGr.addQuery('group_escalation', current.getValue('group_escalation'));\\n\\t}\\n\\t\\n\\tescalationSetGr.addQuery('order', current.getValue('order'));\\n\\tescalationSetGr.addQuery('sys_id', 'NOT IN', current.getUniqueValue());\\n\\tescalationSetGr.addActiveQuery();\\n\\tescalationSetGr.setLimit(1);\\n\\tescalationSetGr.query();\\n\\tif (escalationSetGr.hasNext()) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('Escalation set with order - {0} already exists', current.order));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.getValue('default') ==\\t\\\"0\\\"\",\n\t\"name\": \"Disallow escalation set with same order\"\n}```"}
{"prompt":"{\"prompt\":\"Allow only whitelist fields for Header\",\"table\":\"ticket_configuration\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ticket_configuration\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar notAllowedFields = \\\"number,short_description,sys_created_on,sys_updated_on,\\tsys_mod_count,state,watch_list,comments,comments_and_work_notes,work_notes,work_notes_list,user_input\\\";\\n\\tnotAllowedFields = notAllowedFields.replace(/\\\\s/g,'');\\n\\tnotAllowedFields = notAllowedFields.split(',');\\n\\tvar infoFields = current.info_fields + '';\\n\\tinfoFields = infoFields.split(',');\\n\\tvar notAllowedConfigFields = [];\\n\\tfor(var i=0; i < infoFields.length; i++) {\\n\\t\\tvar notAllowedField = infoFields[i];\\n\\t\\tif (notAllowedFields.indexOf(notAllowedField) >= 0)\\n\\t\\t\\tnotAllowedConfigFields.push(notAllowedField);\\n\\t}\\n\\tif (notAllowedConfigFields.length > 0) {\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\tvar resFields = [];\\n\\t\\t\\t\\tvar gr = new GlideRecord(current.table);\\n\\t\\t\\t\\tfor (var j = 0; j < notAllowedConfigFields.length; j++)\\n\\t\\t\\t\\t\\t\\tresFields.push(gr.getElement(notAllowedConfigFields[j]).getED().getLabel());\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"The following fields '{0}' are not allowed in info region\\\", resFields.join(', ')));\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.operation() == 'insert' || current.info_fields.changes()\",\n\t\"name\": \"Allow only whitelist fields for Header\"\n}```"}
{"prompt":"{\"prompt\":\"Password Reset Property Validation\",\"table\":\"sys_properties\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// make sure request expiry is greater than sms expiry\\n// num_enroll >= num_reset\\nvalidateProperties();\\n\\t\\nfunction validateProperties() {\\n\\tvar nonNegative = gs.getMessage('pwd_non_negative', current.name);\\n\\tvar reqAndSms = gs.getMessage('The number of minutes before a password reset request expires cannot be less than the number of minutes before the SMS code expires');\\n\\tvar enrollAndReset = gs.getMessage('pwd_cannot_be_less_than', ['password_reset.qa.num_enroll', \\t'password_reset.qa.num_reset']);\\n\\t\\t\\t\\tenrollAndReset += gs.getMessage(' If you are trying to change both values, change one value at a time');\\n\\tvar positive = gs.getMessage('pwd_cannot_be_less_than', [current.name, 1]);\\n\\tvar defaultSoftPINMinimumLength = 6;\\n\\tvar softpinMinLengthErr = gs.getMessage('pwd_cannot_be_less_than', [current.name, defaultSoftPINMinimumLength]);\\n\\t\\n\\tif (current.name == 'password_reset.request.expiry') {\\n\\t\\tassertGreaterOrEqual(current.value, '0', nonNegative);\\n\\t\\t\\n\\t\\tvar sms_expiry = getPropertyValue('password_reset.sms.expiry');\\n\\t\\tassertGreaterOrEqual(current.value, sms_expiry, reqAndSms);\\n\\t\\t\\n\\t\\tvar max_sms_expiry = getMaxExpiryParam();\\n\\t\\tassertGreaterOrEqual(current.value, max_sms_expiry, gs.getMessage('The number of minutes before a password reset request expires cannot be less than the number of minutes for any SMS parameter setting'));\\t\\t\\n\\t\\t\\n\\t}\\n\\tif (current.name == 'password_reset.sms.expiry') {\\n\\t\\tvar request_expiry = getPropertyValue('password_reset.request.expiry');\\n\\t\\tassertGreaterOrEqual(request_expiry, current.value, reqAndSms);\\n\\t\\t\\n\\t\\tassertGreaterOrEqual(current.value, '0', nonNegative);\\n\\t}\\n\\t\\n\\tif (current.name == 'password_reset.qa.num_enroll') {\\n\\t\\tvar num_reset = getPropertyValue('password_reset.qa.num_reset');\\n\\t\\tassertGreaterOrEqual(current.value, num_reset, enrollAndReset);\\n\\t\\t\\n\\t\\tassertGreaterOrEqual(current.value, '0', nonNegative);\\n\\t}\\n\\t\\n\\tif (current.name == 'password_reset.qa.num_reset') {\\n\\t\\tvar num_enroll = getPropertyValue('password_reset.qa.num_enroll');\\n\\t\\tassertGreaterOrEqual(num_enroll, current.value, enrollAndReset);\\n\\t\\t\\n\\t\\tassertGreaterOrEqual(current.value, '1', positive);\\n\\t}\\n\\t\\n\\tif (current.name == 'password_reset.sms.default_complexity')\\n\\t\\tassertGreaterOrEqual(current.value, '1', nonNegative);\\n\\t\\n\\tif (current.name == 'password_reset.activity_monitor.incident_threshold') {\\n\\t\\tif (assertGreaterOrEqual(current.value, '1', positive))\\n\\t\\t\\texpireActivityMonitor();\\n\\t}\\n\\t\\n\\tif (current.name == 'password_reset.activity_monitor.incident_window') { \\n\\t\\tif (assertGreaterOrEqual(current.value, '1', positive))\\n\\t\\t\\texpireActivityMonitor();\\n\\t}\\n\\n\\tif (current.name == 'password_reset.history.limit') {\\n\\t\\tassertGreaterOrEqual(current.value, '1', positive);\\n\\t}\\n\\n\\tif (current.name == 'password_reset.softpin.min_length'){\\n\\t\\tassertGreaterOrEqual(current.value, defaultSoftPINMinimumLength, softpinMinLengthErr);\\n\\t}\\n\\t\\n\\tif (current.name == 'password_reset.enroll_reminder.email_template') {\\n\\t\\tvar emailTemplateId = verifyEmailTemplate(current.value);\\n\\t\\tif(gs.nil(emailTemplateId)){\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage('Could not find the \\\\'{0}\\\\' email template for enrollment reminder emails.', current.value));\\n\\t\\t\\treturn;\\n\\t\\t} \\n\\t\\tnew pwdEnrollmentReminder().updateEnrollmentReminderEmailTemplate(emailTemplateId);\\n\\t}\\n}\\n\\n// return the max sms expiry parameter\\n// set for sms verifications..\\n// this is done in linearly..\\n// TODO: there may be better ways to do this\\nfunction getMaxExpiryParam() {\\n\\tvar max = 0;\\n\\t\\tvar pr = new GlideRecord('pwd_verification_param');\\n\\tpr.addQuery('name','expiry');\\n\\tpr.addNotNullQuery('verification');\\n\\t\\tpr.query();\\n\\twhile(pr.next()) {\\n\\t\\tvar verificationId = pr.getValue('verification');\\n\\t\\tvar vr = new GlideRecord('pwd_verification');\\n\\t\\t\\t\\tvr.addQuery('sys_id', verificationId);\\n\\t\\tvr.addNotNullQuery('type');\\n\\t\\tvr.query();\\n\\t\\tif(vr.next()) {\\n\\t\\t\\tvar typeId = vr.getValue('type');\\n\\t\\t\\tvar tr = new GlideRecord('pwd_verification_type');\\n\\t\\t\\ttr.addQuery('sys_id', typeId);\\n\\t\\t\\ttr.query();\\n\\t\\t\\tif (tr.next()) {\\n\\t\\t\\t\\tvar paramValue = pr.getValue('value');\\n\\t\\t\\t\\tif (parseInt(paramValue) > max)\\n\\t\\t\\t\\t\\tmax = parseInt(paramValue); \\n\\t\\t\\t}\\n\\t\\t\\ttr.close();\\n\\t\\t}\\n\\t\\tvr.close();\\n\\t}\\n\\tpr.close();\\n\\treturn max;\\n}\\n\\n\\n// if propLarger >= propSmaller we are good\\n// otherwise do not allow\\nfunction assertGreaterOrEqual(propLarger, propSmaller, errMsg) {\\n\\tif (parseInt(propLarger) < parseInt(propSmaller)) {\\n\\t\\tgs.addErrorMessage(errMsg);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn false;\\n\\t}\\n\\treturn true;\\n}\\n\\nfunction getPropertyValue(prop) {\\n\\tvar val = '0';\\n\\t\\tvar gr = new GlideRecord('sys_properties');\\n\\tgr.addActiveQuery();\\n\\tgr.addQuery('name',prop);\\n\\tgr.query();\\n\\tif (gr.next())\\n\\t\\tval = gr.getValue('value');\\n\\n\\tgr.close();\\t\\n\\treturn val;\\n}\\n\\n// in case of activity monitor parameters change, expire all rows\\n// whose expiration time is greater than current time\\nfunction expireActivityMonitor() {\\n\\tif (previous.value != current.value) {\\n\\t\\tvar now = GlideDateTime();\\n\\t\\tvar expiration = GlideDateTime();\\n\\t\\texpiration.addSeconds(-2);\\n\\t\\t\\n\\t\\tvar gr = new GlideRecord('pwd_activity_monitor');\\n\\t\\tgr.addQuery('expiration', '>=', now.getValue());\\n\\t\\tgr.query();\\n\\t\\twhile (gr.next()) {\\n\\t\\t\\tgr.setValue('expiration', expiration.getValue());\\n\\t\\t\\tgr.update();\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction verifyEmailTemplate(name){\\n\\tvar gr = new GlideRecord('sysevent_email_template');\\n\\tgr.addQuery('name', name);\\n\\tgr.query();\\n\\tif(gr.next())\\n\\t\\treturn gr.sys_id;\\n\\treturn null;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.name.startsWith('password_reset')\",\n\t\"name\": \"Password Reset Property Validation\"\n}```"}
{"prompt":"{\"prompt\":\"Source Instance Validate\",\"table\":\"instance\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"instance\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"current.instance_id = \\\"source_instance\\\";\\nif (gs.nil(current.instance_name))\\n\\tcurrent.instance_name = \\\"Source Instance\\\";\\nif (gs.nil(current.instance_url))\\n\\tcurrent.instance_url = gs.getProperty(\\\"glide.servlet.uri\\\") + \\\"\\\";\\n\\nif (current.isNewRecord())\\n\\tcheckForDuplicates();\\n\\nfunction checkForDuplicates() {\\n\\tvar gr = new GlideRecord(\\\"instance\\\");\\n\\tgr.addQuery(\\\"source\\\", true);\\n\\tgr.addQuery(\\\"primary\\\", true);\\n\\tgr.query();\\n\\tif (gr.next()) {\\n\\t\\tgs.addErrorMessage('Duplicate record: primary source already exists.');\\n\\t\\tcurrent.setAbortAction(true);\\t\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.source == true && current.primary == true\",\n\t\"name\": \"Source Instance Validate\"\n}```"}
{"prompt":"{\"prompt\":\"Domain Plugin Status\",\"table\":\"ml_solution_definition\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ml_solution_definition\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tg_scratchpad.DomainPluginActive = GlidePluginManager.isActive('com.glide.domain.msp_extensions.installer');\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Domain Plugin Status\"\n}```"}
{"prompt":"{\"prompt\":\"Sync dynamic default value on display\",\"table\":\"sys_dictionary\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_dictionary\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"checkDefaultValue();\\n\\nfunction checkDefaultValue() {\\n\\tif (current.default_value.trim().indexOf(\\\"javascript:\\\") != 0)\\n\\t\\treturn;\\n\\t\\n\\tvar scr = current.default_value.trim();\\n\\tscr = scr.substring(\\\"javascript:\\\".length);\\n\\tif (scr == \\\"\\\")\\n\\t\\treturn;\\n\\n\\tif (scr.endsWith(\\\";\\\"))\\n\\t\\tscr = scr.substring(0, scr.length - 1);\\n\\t\\n\\tvar dyn = new GlideRecord(\\\"sys_filter_option_dynamic\\\");\\n\\tdyn.addQuery(\\\"script\\\", scr).addOrCondition(\\\"script\\\", scr + \\\";\\\");\\n\\tdyn.query();\\n\\tif (!dyn.next())\\n\\t\\treturn;\\n\\t\\n\\tif (current.dynamic_default_value == dyn.sys_id && current.use_dynamic_default == true)\\n\\t\\treturn;\\n\\t\\n\\tcurrent.dynamic_default_value = dyn.sys_id;\\n\\tcurrent.use_dynamic_default = true;\\n\\tcurrent.setWorkflow(false);\\n\\tcurrent.autoSysFields(false);\\n\\tcurrent.update();\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.default_value.nil()\",\n\t\"name\": \"Sync dynamic default value on display\"\n}```"}
{"prompt":"{\"prompt\":\"SNC - Run parent workflows (Approval)\",\"table\":\"sysapproval_approver\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sysapproval_approver\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// Run any workflows for our parent so they can check the approval states\\n//\\n// 3.20.2011 - modified to use generic approval for any table via the document id/source_table, \\n// the check for sysapproval remains to provide backwards compatibility for records already in \\n// play that were entered into approval using the sysapproval to store taskID. \\n// Going forward, all records will get a document_id and a source table, but if they are null, this\\n// function assumes sysapproval column in the task table.\\n\\nrunWorkflow_userApprove();\\n\\nfunction runWorkflow_userApprove() {\\n\\t\\tvar approvalUtils = new WorkflowApprovalUtils();\\n\\tapprovalUtils.approve();\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.state.changesTo('approved') || current.state.changesTo('rejected') || current.operation() == 'delete'\",\n\t\"name\": \"SNC - Run parent workflows (Approval)\"\n}```"}
{"prompt":"{\"prompt\":\"Dot Walking Safety (To)\",\"table\":\"sys_script\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_script\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var template = current.template;\\nvar dotIndex = template.indexOf(\\\"...\\\");\\nvar toIndex = template.indexOf(\\\"=\\\", dotIndex + 3);\\nwhile (dotIndex >= 0 && toIndex >= 0) {\\n\\tvar subStr = template.substring(dotIndex, toIndex);\\n\\tif (subStr.indexOf(\\\"^\\\") < 0) {\\n\\t\\tcurrent.template.setError(\\\"Invalid value for 'Set field values'\\\");\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tbreak;\\n\\t}\\n\\telse {\\n\\t\\tdotIndex = template.indexOf(\\\"...\\\", dotIndex + 3);\\n\\t\\ttoIndex = template.indexOf(\\\"=\\\", dotIndex + 3);\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Dot Walking Safety (To)\"\n}```"}
{"prompt":"{\"prompt\":\"Check only one default\",\"table\":\"asmt_bubble_chart\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_bubble_chart\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var gr = new GlideRecord(\\\"asmt_bubble_chart\\\");\\ngr.addQuery(\\\"metric_type\\\", current.metric_type);\\ngr.addQuery(\\\"isdefault\\\", true);\\ngr.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.sys_id);\\ngr.query();\\nif (gr.hasNext()) {\\n\\tvar errMsg = gs.getMessage('You may only have a single default Bubble Chart for the metric type : {0}', current.getDisplayValue('metric_type'));\\n\\tgs.addErrorMessage(errMsg);\\n\\tcurrent.setAbortAction(true);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.isdefault == true\",\n\t\"name\": \"Check only one default\"\n}```"}
{"prompt":"{\"prompt\":\"Restrict HR results for non-HR users\",\"table\":\"asmt_metric_result\",\"when\":\"before\",\"actions\":\"r\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"true\",\n\t\"collection\": \"asmt_metric_result\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"900\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) { //added condition so that for attachment type questions it will give access since mobile client uploads attachment after marking the instance complete so need to query the metric result table to update attachments so that attachments are visible under 'View User's Response'\\n\\t\\tif (!gs.getUser().hasRole('sn_hr_core.basic'))\\n\\t\\t\\t\\tcurrent.addNullQuery('instance').addOrCondition('metric.datatype', '=', 'attachment').addOrCondition('instance.metric_type.sys_scope', '!=', 'd4ac3fff5b311200a4656ede91f91af2');\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Restrict HR results for non-HR users\"\n}```"}
{"prompt":"{\"prompt\":\"PA Unmatched Managed Element\",\"table\":\"pa_indicators\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_indicators\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"500\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*undefined when async or display*/) {\\n\\n\\tif (!current.managed_breakdown || current.managed_breakdown === '') {\\n\\t\\tcurrent.managed_element = '';\\n\\t} else if (!current.managed_element || current.managed_element === '') {\\n\\t\\tcurrent.managed_element = 'unmatched';\\n\\t}\\t \\n\\t\\n})(current, typeof previous != 'undefined' ?\\tprevious : null);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"PA Unmatched Managed Element\"\n}```"}
{"prompt":"{\"prompt\":\"Set RCA Type field\",\"table\":\"sys_restricted_caller_access\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_restricted_caller_access\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.getValue(\\\"rca_type\\\") == \\\"generated\\\")\\n\\t\\treturn;\\n\\t\\n\\tif (current.getValue(\\\"sys_scope\\\") == current.getValue(\\\"target_scope\\\"))\\n\\t\\tcurrent.setValue(\\\"rca_type\\\", \\\"real_rca\\\");\\n\\telse\\n\\t\\tcurrent.setValue(\\\"rca_type\\\", \\\"requested\\\");\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set RCA Type field\"\n}```"}
{"prompt":"{\"prompt\":\"Add members to live group\",\"table\":\"vtb_board_member\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"vtb_board_member\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(current, previous) {\\n\\tvar groupsForThisBoard = new GlideRecord(\\\"live_group_profile\\\");\\n\\tgroupsForThisBoard.addQuery(\\\"table\\\", \\\"vtb_board\\\");\\n\\tgroupsForThisBoard.addQuery(\\\"document\\\", current.board);\\n\\tgroupsForThisBoard.query();\\n\\t\\n\\tvar groupIDs = [];\\n\\tvar collaborationManager = new GlideCollaborationManager();\\n\\twhile(groupsForThisBoard.next()) {\\t\\t\\n\\t\\t\\tcollaborationManager.addMemberToGroup(\\\"sys_user.\\\" + current.user, \\\"live_group_profile.\\\" + groupsForThisBoard.sys_id);\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Add members to live group\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent duplicate active per table\",\"table\":\"sys_email_client_configuration\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_email_client_configuration\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar existing = new GlideRecord('sys_email_client_configuration');\\n\\texisting.addActiveQuery();\\n\\texisting.addQuery('table', current.table);\\n\\texisting.addQuery('sys_id', '!=', current.getUniqueValue());\\n\\texisting.query();\\n\\tif (existing.next()) {\\n\\t\\tvar msgArray = [current.table, existing.name];\\n\\t\\tgs.addInfoMessage(gs.getMessage('table must be unique: {0} already exists in configuration: {1}', msgArray));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"active=true^tableISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent duplicate active per table\"\n}```"}
{"prompt":"{\"prompt\":\"Generate notifications\",\"table\":\"cab_agenda_item\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cab_agenda_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tnew CABAgendaItem(current).generateFutureItemNotifications();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"stateCHANGESTOin_progress^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Generate notifications\"\n}```"}
{"prompt":"{\"prompt\":\"Block OOB Event functionalities\",\"table\":\"agent_schedule_task_config\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"agent_schedule_task_config\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"can_create_eventsVALCHANGES^ORcan_edit_eventsVALCHANGES^ORare_background_eventsVALCHANGES^ORcan_toggle_activeVALCHANGES^ORhiddenVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Block OOB Event functionalities\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Table Creation\",\"table\":\"v_table_creator\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"v_table_creator\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var v = validateTablename();\\r\\nif (v && current.getTableName() != 'v_table_editor') {\\r\\n\\tv = validateRequiredFields();\\r\\n}\\r\\n\\r\\n\\r\\nfunction validateTablename() {\\r\\n\\tif (!current.name.changes())\\r\\n\\t\\treturn true;\\r\\n\\r\\n\\tvar tgr = new GlideRecord(\\\"sys_dictionary\\\");\\r\\n\\ttgr.addQuery(\\\"name\\\", current.name);\\r\\n\\ttgr.query();\\r\\n\\tif (tgr.next()) {\\r\\n\\t\\tcurrent.name.setError(gs.getMessage(\\\"table name\\\") + \\\" '\\\" + current.name + \\\"' \\\" + gs.getMessage(\\\"already exists\\\"));\\r\\n\\t\\tcurrent.setAbortAction(true);\\r\\n\\t\\treturn false;\\r\\n\\t}\\r\\n\\r\\n\\treturn true;\\r\\n}\\r\\n\\r\\nfunction validateRequiredFields() {\\r\\n\\tvar fgr = new GlideRecord(\\\"v_field_creator\\\");\\r\\n\\tfgr.addQuery(\\\"table_creator\\\", current.sys_id);\\r\\n\\tfgr.query();\\r\\n\\tif (!fgr.next() && current.extends_table.nil()) {\\r\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Invalid table, please add at least 1 field\\\"));\\r\\n\\t\\tcurrent.setAbortAction(true);\\r\\n\\t\\treturn false;\\r\\n\\t} else {\\r\\n\\t\\tif (fgr.label.nil())\\r\\n\\t\\t\\toutputInvalidBlankField();\\r\\n\\r\\n\\t\\tif (fgr.type == \\\"reference\\\" && fgr.reference_table.nil()) {\\r\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Invalid table, reference table name cannot be blank when it is a reference field\\\"));\\r\\n\\t\\t\\tcurrent.setAbortAction(true);\\r\\n\\t\\t\\treturn false;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\twhile (fgr.next()) {\\r\\n\\t\\t\\tif (fgr.label.nil()) {\\r\\n\\t\\t\\t\\toutputInvalidBlankField();\\r\\n\\t\\t\\t\\treturn false;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\treturn true;\\r\\n}\\r\\n\\r\\nfunction outputInvalidBlankField() {\\r\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Invalid table, field label cannot be blank\\\"));\\r\\n\\t\\tcurrent.setAbortAction(true);\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate Table Creation\"\n}```"}
{"prompt":"{\"prompt\":\"Create TemplateDetails Record\",\"table\":\"sys_app_template\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_app_template\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar templateDetailsGR = new GlideRecord('sys_app_template_detail');\\n\\t\\n\\ttemplateDetailsGR.newRecord();\\n\\ttemplateDetailsGR.setValue('template', current.sys_id);\\n\\t\\n\\tif (!templateDetailsGR.insert()) {\\n\\t\\tvar errorMessage = gs.getMessage(\\\"Failed to create sys_app_template_detail record for template with sys_id: '{0}'\\\", [current.sys_id]);\\n\\t\\tgs.addErrorMessage(errorMessage);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Create TemplateDetails Record\"\n}```"}
{"prompt":"{\"prompt\":\"Set Aggregated when Automated is changed\",\"table\":\"sa_agg_alert_filter\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sa_agg_alert_filter\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n// whenever Automated field changes, set Aggregated field to match\\n\\tcurrent.aggregated = current.automated;\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"automatedVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Set Aggregated when Automated is changed\"\n}```"}
{"prompt":"{\"prompt\":\"Deactivate module if app is inactive\",\"table\":\"sys_app_module\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_app_module\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"SNC.Apps.changeActiveStateForItem(current);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"gs.hasRole(\\\"admin\\\") && current.active == true\",\n\t\"name\": \"Deactivate module if app is inactive\"\n}```"}
{"prompt":"{\"prompt\":\"Duplicate Run Level Mapping Check\",\"table\":\"sys_run_level_op_toggle_m2m\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_run_level_op_toggle_m2m\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar match = new GlideRecord('sys_run_level_op_toggle_m2m');\\n\\tmatch.addQuery('level', current.level);\\n\\tmatch.addQuery('toggle', current.toggle);\\n\\tmatch.addQuery('toggle_level', current.toggle_level);\\n\\tmatch.query();\\n\\tif (match.hasNext()) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"This Run Level Mapping is already defined.\\\"));\\t\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Duplicate Run Level Mapping Check\"\n}```"}
{"prompt":"{\"prompt\":\"Auto-create name\",\"table\":\"sys_sync_history\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sync_history\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"switch (current.type.toString()) {\\n\\tcase 'push':\\n\\tcurrent.name = gs.getMessage(\\\"Pushed to {0}\\\", current.instance.getDisplayValue());\\n\\tbreak;\\n\\t\\t\\n\\tcase 'pull':\\n\\tcurrent.name = gs.getMessage(\\\"Pulled from {0}\\\", current.instance.getDisplayValue());\\n\\tbreak;\\n\\t\\t\\n\\tdefault:\\n\\tcurrent.name = gs.getMessage(\\\"{0} on {1}\\\", current.type.getDisplayValue(), current.instance.getDisplayValue());\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.name.nil()\",\n\t\"name\": \"Auto-create name\"\n}```"}
{"prompt":"{\"prompt\":\"Translated Text Synchronize\",\"table\":\"sys_translated_text\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_translated_text\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"1000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\nvar ownerID = current.documentkey;\\nvar ownerTbl = current.tablename;\\n\\nif (!ownerID.nil() && !ownerTbl.nil()) {\\n\\tvar owner = new GlideRecord(ownerTbl);\\n\\tif (!gs.nil(owner) && owner.get(ownerID)) {\\n\\t\\tvar ownerAttr = owner.getAttribute(\\\"update_synch\\\");\\n\\t\\tif (ownerAttr!= null && !\\\"false\\\".equals(ownerAttr))\\n\\t\\t\\tgs.updateSave(owner);\\n\\t}\\n}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Translated Text Synchronize\"\n}```"}
{"prompt":"{\"prompt\":\"Adjust order on step delete\",\"table\":\"help_guidance_step\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"help_guidance_step\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar field, value;\\n\\tif(current.parent) {\\n\\t\\tfield =\\tcurrent.parent.getName();\\n\\t\\tvalue = current.parent + '';\\n\\t} else {\\n\\t\\tfield =\\tcurrent.guidance.getName();\\n\\t\\tvalue = current.guidance + '';\\n\\t}\\n\\tvar setupUtil = new SNHelpSetupUtil();\\n\\tsetupUtil.adjustOrder(field, value, current);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"guidance.type=global_setup^ORguidance.type=personal_setup^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Adjust order on step delete\"\n}```"}
{"prompt":"{\"prompt\":\"Delete sys_trigger record\",\"table\":\"spotlight_groups\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"spotlight_groups\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar triggerGR = new GlideRecord(\\\"sys_trigger\\\");\\n\\tif(triggerGR.get(previous.trigger))\\n\\t\\ttriggerGR.deleteRecord();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!previous.trigger.nil()\",\n\t\"name\": \"Delete sys_trigger record\"\n}```"}
{"prompt":"{\"prompt\":\"Create HR Profile for users\",\"table\":\"sn_hr_core_case\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_case\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"99\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\t\\n\\t\\t\\tvar userOpenedFor = current.opened_for;\\n\\t\\tcheckAndCreateHRProfile(userOpenedFor);\\n\\t\\t\\n\\t\\tvar userSubjectPerson = current.subject_person;\\n\\t\\tif(userSubjectPerson)\\n\\t\\t\\tcheckAndCreateHRProfile(userSubjectPerson);\\n\\t\\t\\t\\t\\n})(current, previous);\\n\\n\\nfunction checkAndCreateHRProfile(user){\\n\\t\\n\\t\\tvar gr = new GlideRecord('sn_hr_core_profile');\\n\\t\\t\\tgr.addQuery('user', user);\\n\\t\\tgr.query();\\n\\t\\n\\t\\tif(!gr.next()){\\n\\t\\t\\tvar hrProfile = new hr_Profile();\\n\\t\\t\\t\\thrProfile.createProfileFromUser(user);\\t\\n\\t\\t}\\n\\t\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"opened_forVALCHANGES^opened_forISNOTEMPTY^NQsubject_personVALCHANGES^subject_personISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Create HR Profile for users\"\n}```"}
{"prompt":"{\"prompt\":\"Set Length for Decimal\",\"table\":\"sys_dictionary\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_dictionary\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\t\\t\\n\\t\\t\\t// Add your code here\\n\\tvar ml = current.max_length;\\n\\tif (ml < 15) \\n\\t\\tcurrent.max_length = 15;\\n\\t\\n })(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(current.internal_type.toString() === 'decimal') && current.max_length.changes()\",\n\t\"name\": \"Set Length for Decimal\"\n}```"}
{"prompt":"{\"prompt\":\"Tracks approval source\",\"table\":\"sysapproval_approver\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sysapproval_approver\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var controller = new GlideController();\\nvar approvalSource = controller.getGlobal(\\\"approvalSource\\\");\\nvar emailGlobal = undefined;\\nif (typeof email !== \\\"undefined\\\")\\n\\t emailGlobal = email;\\nif (approvalSource == \\\"email\\\" || typeof emailGlobal !== \\\"undefined\\\")\\n\\tcurrent.approval_source = \\\"email\\\";\\n\\nelse {\\n\\tvar device = GlideMobileExtensions.getDeviceType();\\n\\tif (device == \\\"m\\\" || device == \\\"mobile\\\")\\n\\t\\tcurrent.approval_source = \\\"ui.mobile\\\";\\n\\telse if (device == \\\"tablet\\\")\\n\\t\\tcurrent.approval_source = \\\"ui.tablet\\\";\\n\\telse\\n\\t\\tcurrent.approval_source = \\\"ui.desktop\\\";\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"state=approved^ORstate=rejected^EQ\",\n\t\"condition\": \"current.state.changes()\",\n\t\"name\": \"Tracks approval source\"\n}```"}
{"prompt":"{\"prompt\":\"delete report_stats_execution on delete\",\"table\":\"report_stats\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"report_stats\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t//delete report_stats_executions rows\\n\\tvar sysId = (current.report_sys_id != null && current.report_sys_id.toString().length > 0) ? current.report_sys_id : current.widget_sys_id;\\n\\tvar field = (current.report_sys_id != null && current.report_sys_id.toString().length > 0) ? 'report_sys_id' : 'widget_sys_id';\\n\\t\\t\\n\\ttry{\\n\\t\\tvar grStatsExecution = new GlideRecord('report_stats_executions');\\n\\t\\tif (grStatsExecution.isValid()){ //if table exists\\n\\t\\t\\tgrStatsExecution.addQuery(field,sysId);\\n\\t\\t\\tgrStatsExecution.query();\\n\\t\\t\\tgrStatsExecution.deleteMultiple();\\n\\t\\t}\\n\\n\\t\\t//if it's a report delete report_executions rows\\n\\t\\tif (current.report_sys_id != null) {\\n\\t\\t\\tvar grReportExecutions = new GlideRecord('report_executions');\\n\\t\\t\\tif (grReportExecutions.isValid()) { //if table exists\\n\\t\\t\\t\\tgrReportExecutions.addQuery('report_sys_id',sysId);\\n\\t\\t\\t\\tgrReportExecutions.query();\\n\\t\\t\\t\\tgrReportExecutions.deleteMultiple();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tgs.addInfoMessage(gs.getMessage('Statistics for {0}={1} were deleted.',[field,sysId]));\\n\\t} catch(e){\\n\\t\\tgs.addErrorMessage(gs.getMessage('An error occurred when deleting statistics for {0}={1}',[field,sysId]));\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"delete report_stats_execution on delete\"\n}```"}
{"prompt":"{\"prompt\":\"Rule validation on Identifier Entry list\",\"table\":\"cmdb_identifier_entry\",\"when\":\"before\",\"actions\":\"r\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"true\",\n\t\"collection\": \"cmdb_identifier_entry\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"999\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var query = current.getEncodedQuery();\\nif (query.indexOf('sys_id=') != 0 &&\\n\\tquery.indexOf('sys_idIN') != 0 &&\\n\\tquery.indexOf('identifier=') != 0)\\n\\tnew IdentificationRuleValidator().validate();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"gs.isInteractive()\",\n\t\"name\": \"Rule validation on Identifier Entry list\"\n}```"}
{"prompt":"{\"prompt\":\"Start schema check\",\"table\":\"sys_schema_check\",\"when\":\"async\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_schema_check\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var sc = new SchemaCompare(current.target_database.prefix, current.sys_id);\\r\\nsc.startCompare();\\r\\nsc.close();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Start schema check\"\n}```"}
{"prompt":"{\"prompt\":\"Clear unauth flag on change\",\"table\":\"task_outage\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"task_outage\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"//This clears the unauthorised field if it has been set on change request if the outage is of any type except 'planned'\\n(function executeRule(current, previous /*null when async*/) {\\n\\tvar chgGr = current.task.getRefRecord();\\n\\tchgGr.setValue('unauthorized', false);\\n\\tchgGr.update();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"outage.type!=planned^task.sys_class_name=change_request^task.ref_change_request.unauthorized=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear unauth flag on change\"\n}```"}
{"prompt":"{\"prompt\":\"Restrict Search Config CB deletion\",\"table\":\"sn_ace_content_block\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_ace_content_block\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('Search Config content block cannot be deleted'));\\n\\t\\tcurrent.setAbortAction(true);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"type=9b2e3d0e6b110110da18ec188e44af13^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Restrict Search Config CB deletion\"\n}```"}
{"prompt":"{\"prompt\":\"Create m2m_kb_task record\",\"table\":\"kb_knowledge\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"kb_knowledge\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.sys_id && current.source) {\\n\\t\\tvar gr = new GlideRecord(\\\"m2m_kb_task\\\");\\n\\t\\tgr.initialize();\\n\\t\\tgr.setValue('kb_knowledge',current.sys_id);\\n\\t\\tgr.setValue('task',current.source);\\n\\t\\tvar attachid = gr.insert();\\n\\t\\tif(attachid) {\\n\\t\\t\\tvar message = gs.getMessage(\\\"This Knowledge Article:{0} has been saved as a draft and attached to the parent record: {1}\\\",[current.number, current.getDisplayValue('source')]);\\n\\t\\t\\tgs.addInfoMessage(message);\\n\\t\\t}\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"sourceISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Create m2m_kb_task record\"\n}```"}
{"prompt":"{\"prompt\":\"Set Name field\",\"table\":\"sc_ic_section\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_ic_section\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"110\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function() {\\n\\tvar sectionLabel = (current.label + \\\"\\\").trim();\\n\\tcurrent.name = \\\"Section \\\" + current.index + (!JSUtil.nil(sectionLabel) ? \\\" (\\\" + sectionLabel + \\\")\\\" : \\\"\\\")\\n})()\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set Name field\"\n}```"}
{"prompt":"{\"prompt\":\"Survey recipients list types\",\"table\":\"asmt_m2m_recipientslist_survey\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_m2m_recipientslist_survey\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar rlm2m = new GlideRecord('asmt_m2m_recipientslist_survey');\\n\\trlm2m.addQuery('metric_type', current.metric_type + '');\\n\\trlm2m.addQuery('recipients_list', current.recipients_list + '');\\n\\trlm2m.addQuery('sys_id', '!=', current.getUniqueValue());\\n\\trlm2m.query();\\n\\t\\n\\tif (rlm2m.hasNext()) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('This recipients list already exists.'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Survey recipients list types\"\n}```"}
{"prompt":"{\"prompt\":\"Hide mobile layouts if mobile not active\",\"table\":\"sc_layout\",\"when\":\"before\",\"actions\":\"r\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"true\",\n\t\"collection\": \"sc_layout\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\t if (!GlidePluginManager.isActive('com.glide.ui.m'))\\n\\t\\t\\tcurrent.addQuery('target_type', '!=', 'mobile_screen');\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Hide mobile layouts if mobile not active\"\n}```"}
{"prompt":"{\"prompt\":\"Validate duplicate Language mapping\",\"table\":\"translator_mapping\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"translator_mapping\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar translatorMapping = new GlideRecord('translator_mapping');\\n\\ttranslatorMapping.addQuery('language',current.language);\\n\\ttranslatorMapping.query();\\n\\tif(translatorMapping.hasNext()){\\n\\t\\tgs.addErrorMessage(gs.getMessage('Translator mapping already exists for the selected language'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \" current.language!=previous.language\",\n\t\"name\": \"Validate duplicate Language mapping\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent updates\",\"table\":\"label_group_m2m\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"label_group_m2m\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.addErrorMessage(gs.getMessage('This type of record is not intended to be updated'));\\ncurrent.setAbortAction(true);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent updates\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent Duplicate Test Parameter Names\",\"table\":\"sys_atf_parameter_variable\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_atf_parameter_variable\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar atfParam = new GlideRecord('sys_atf_parameter_set');\\n\\t\\n\\tif (atfParam.getElement(current.element) != null) {\\n\\t\\tvar error = gs.getMessage(\\\"The column name {0} is already in use as a shared parameter name. Please use a different column name for this variable.\\\", [current.element]);\\n\\t\\tgs.addErrorMessage(error);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent Duplicate Test Parameter Names\"\n}```"}
{"prompt":"{\"prompt\":\"Refresh Impacted Services\",\"table\":\"change_request\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tnew TaskUtils().triggerRefreshImpactedServices(current);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(current.operation() === \\\"insert\\\" && !(new ChangeRequest(current).isNew())) || (new ChangeRequest(current).changesFromNew() && current.active == true)\",\n\t\"name\": \"Refresh Impacted Services\"\n}```"}
{"prompt":"{\"prompt\":\"Synchronize Group Permissions\",\"table\":\"sys_appcollab_group\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_appcollab_group\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tvar synchronizer = new sn_appcollab.CollabPermissionSynchronizer(current.descriptor);\\n\\t\\tsynchronizer.syncGroupPermissions(current.group, current.application);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Synchronize Group Permissions\"\n}```"}
{"prompt":"{\"prompt\":\"Change fetch type to background\",\"table\":\"sys_sg_related_lists_screen\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_related_lists_screen\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"fetch_type=not_required^ORfetch_type=dynamic_prefetch^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Change fetch type to background\"\n}```"}
{"prompt":"{\"prompt\":\"Unset dependent fields for root content\",\"table\":\"gsw_content_group\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"gsw_content_group\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"is_root_content=true^dependent_on_contentsISNOTEMPTY^ORdependent_on_pluginsISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Unset dependent fields for root content\"\n}```"}
{"prompt":"{\"prompt\":\"Handle updates moving between sets\",\"table\":\"sys_update_xml\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_update_xml\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"processUpdateSetChange();\\n\\nfunction processUpdateSetChange() {\\n\\tvar newUpdateSet = new GlideRecord('sys_update_set');\\n\\tnewUpdateSet.get(current.update_set);\\n\\n\\tif (current.application.nil() && newUpdateSet.application == 'global')\\n\\t\\tcurrent.application = 'global';\\n\\tif (newUpdateSet.application.scope != current.application.scope) {\\n\\t\\tcurrent.update_set = previous.update_set;\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(\\\"Cannot move update to a set for a different scope\\\");\\n\\t\\treturn;\\n\\t}\\n\\n\\tvar versions = new GlideRecord('sys_update_version');\\n\\tversions.addQuery(\\\"name\\\", current.name);\\n\\tversions.addQuery(\\\"source\\\", previous.update_set);\\n\\tversions.addQuery(\\\"source_table\\\", \\\"sys_update_set\\\");\\n\\tversions.query();\\n\\n\\t//Don't use updateMultiple here\\n\\twhile (versions.next()) {\\n\\t\\tversions.setValue(\\\"source\\\", current.update_set);\\n\\t\\tversions.update();\\n\\t}\\n}\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"previous.update_set != current.update_set\",\n\t\"name\": \"Handle updates moving between sets\"\n}```"}
{"prompt":"{\"prompt\":\"Copy user profile doc into interacton\",\"table\":\"interaction\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"interaction\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tnew sn_cs.ChannelUserProfileUtils().updateInteractionFromUserProfile(current);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"channel_user_profileISNOTEMPTY^channel_user_profile.user_tableISNOTEMPTY^EQ\",\n\t\"condition\": \"gs.nil(previous) || current.getValue('channel_user_profile') != previous.getValue('channel_user_profile');\",\n\t\"name\": \"Copy user profile doc into interacton\"\n}```"}
{"prompt":"{\"prompt\":\"Approval Publication\",\"table\":\"sysapproval_approver\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sysapproval_approver\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\tvar gr = new GlideRecord('sn_publications_publication');\\n\\tif(gr.get(current.document_id)){\\n\\t\\tvar start = (new GlideDateTime(gr.getValue(\\\"publish_date\\\"))).getNumericValue();\\t\\n\\t\\tvar now = new GlideDateTime().getNumericValue();\\n\\n\\t\\tif(now >= start){\\n\\t\\t\\t\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('You are not able to approve because you missed the publish date.'));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\n\\t\\t\\t}\\n\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"\\n\\t\\t\\t\\tsource_table=sn_publications_publication^stateCHANGESTOapproved^EQ\",\n\t\"condition\": \"new PublicationsUtil().checkApprovalEligibility(current. document_id)\",\n\t\"name\": \"Approval Publication\"\n}```"}
{"prompt":"{\"prompt\":\"Initialize Cloud Resources and LDC Count\",\"table\":\"discovery_status\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"discovery_status\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\tvar i;\\n\\tvar finalCIsList;\\n\\tvar datacenterCount;\\n\\tvar statusSysID = current.getUniqueValue();\\n\\tvar scheduleSysID = current.getValue('dscheduler');\\n\\tvar cloudResourceDiscoveryUtil = new CloudResourceDiscoveryUtil();\\n\\tvar cloudResourceDiscoHandler = new CloudResourceDiscoveryCountHandler();\\n\\t\\n\\t/*\\n\\t*\\tWhen a discovery is triggered for a schedule and if it's not a vCenter one's i.e., Schedule\\n\\t*\\tassociated to a Cloud Service Account whose datacenter type is not \\\"cmdb_ci_vcenter_datacenter\\\",\\n\\t*\\tthen for such kind of discovery run, we cache the discovered data into a cache table\\n\\t*\\t(\\\"discoveyr_cloud_temp_results\\\" table) and resource counts are updated by another business\\n\\t*\\trule (\\\"Update Cloud Resources Counts\\\") that is triggered when current Cloud Resource Discovery\\n\\t*\\trun completes or get cancelled.\\n\\t*\\t\\n\\t*\\tIf at all discovery triggered for vCenter Schedules then we don't cache result but just update\\n\\t*\\tthe resource counts at respective sensor(s) so in order to update, first we need have an entry for\\n\\t*\\tthat CI (e.g., \\\"cmdb_ci_vm_instance\\\") and its count set to 0 so that the count is updated\\n\\t*\\tby respective hooks added at both CAPI and Pattern levels.\\n\\t*/\\n\\t\\n\\tif (cloudResourceDiscoveryUtil.fetchDatacenterTypeFromSchedule(scheduleSysID) == 'cmdb_ci_vcenter_datacenter') {\\n\\t\\tfinalCIsList = cloudResourceDiscoHandler.fetchAllChildCIsForParentCI('cmdb_ci');\\n\\t\\t\\n\\t\\t// Initialize the CI counts to 0 for each CI in \\\"Discovery Cloud Results\\\" table\\n\\t\\tfor (i in finalCIsList)\\n\\t\\t\\tcloudResourceDiscoHandler.setCloudResourceCount(scheduleSysID, statusSysID, finalCIsList[i]+'', 0);\\n\\t}\\n\\t\\n\\tif (scheduleSysID) {\\n\\t\\tdatacenterCount = new DiscoveryScheduleManager().getDatacenterCountForSchedule(scheduleSysID);\\n\\t\\tcloudResourceDiscoHandler.setCloudResourceCount(scheduleSysID, statusSysID, 'cmdb_ci_logical_datacenter', datacenterCount);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.discover == \\\"Cloud Resources\\\" &&\\t(current.state == \\\"Starting\\\" || current.state == \\\"Active\\\")\",\n\t\"name\": \"Initialize Cloud Resources and LDC Count\"\n}```"}
{"prompt":"{\"prompt\":\"Set Variable Display Name Field\",\"table\":\"expert_ui_policy_action\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"expert_ui_policy_action\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var variable = current.expert_variable.getDisplayValue().split(\\\"IO:\\\")[1];\\r\\ngs.print(variable);\\r\\nvar option = new GlideRecord(\\\"expert_variable\\\");\\r\\nif (option.get(variable)) {gs.print(\\\"FOUND ONE\\\");\\r\\n\\tcurrent.variable = (option.name.nil()) ? option.question_text : option.name;\\r\\n}\\r\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.expert_variable.changes()\",\n\t\"name\": \"Set Variable Display Name Field\"\n}```"}
{"prompt":"{\"prompt\":\"Add Approver If Process Guide running\",\"table\":\"sysapproval_approver\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sysapproval_approver\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var binding = new GlideRecord('state_binding');\\r\\nbinding.addQuery('document_key', current.sysapproval);\\r\\nbinding.addQuery('pending_list', '!=', '');\\r\\nbinding.query();\\r\\nif(binding.next()) {\\r\\n\\tcurrent.state_binding = binding.sys_id;\\r\\n\\tcurrent.process_guide = binding.process_guide;\\r\\n\\tcurrent.process_step = binding.pending_list;\\r\\n\\tcurrent.iteration = calculateIteration(binding.sys_id, current.process_step);\\r\\n\\tcurrent.state = 'requested';\\r\\n}\\r\\n\\r\\nfunction calculateIteration(bindingId, step){\\r\\n\\tvar approval = new GlideRecord('sysapproval_approver');\\r\\n\\tapproval.addQuery('state_binding', bindingId);\\r\\n\\tapproval.addQuery('process_step', step);\\r\\n\\tapproval.addQuery('state', 'requested');\\r\\n\\tapproval.query();\\r\\n\\tif(approval.next())\\r\\n\\t\\t return approval.iteration;\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.state_binding.nil()\",\n\t\"name\": \"Add Approver If Process Guide running\"\n}```"}
{"prompt":"{\"prompt\":\"Affected ci notifications\",\"table\":\"task\",\"when\":\"async\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current != null) {\\n\\tvar thisTask = current.sys_id;\\n\\tvar noNotify = {};\\n\\tvar visited = {};\\n\\tvar maxLevel = parseInt(gs.getProperty('NotifyAffectedCI.max_rel_level'));\\n\\tvar maxCis = parseInt(gs.getProperty('NotifyAffectedCI.max_cis', '100000'));\\n\\t// max_events determines how many cis may be tracked in the noNotify array\\n\\t// increasing to a very large number ( > ~100K) might use too much memory\\n\\tvar maxEvents = parseInt(gs.getProperty('NotifyAffectedCI.max_events', '50000'));\\n\\tvar legacySubscriptionModel = gs.getProperty('glide.notification.use_legacy_subscription_model');\\n\\t// Need to limit size of the array in memory used to track visited CIs\\n\\tvar maxArrSize = parseInt(gs.getProperty('NotifyAffectedCI.max_visited_arr_size', '50000'));\\n\\n\\tvar eventCount = 0;\\n\\tvar ciAffectedNotificationTypes = getCIAffectedNotificationTypes();\\n\\tvar ciCount = 0;\\n\\tvar ciBatchSize = 100;\\n\\t\\n\\tvar affectedItem = new GlideRecord('task_ci');\\n\\taffectedItem.addQuery('task', thisTask);\\n\\taffectedItem.query();\\n\\tvar nextLevel = [];\\n\\twhile (affectedItem.next()) {\\n\\t\\tciCount++;\\n\\n\\t\\tif (maxCisReached())\\n\\t\\t\\tbreak;\\n\\n\\t\\tvar itemSysID = affectedItem.ci_item + '';\\n\\t\\tif (!visited[itemSysID]) {\\n\\t\\t\\tnextLevel.push(itemSysID);\\n\\t\\t\\tmarkAsVisited(itemSysID);\\n\\t\\t}\\n\\t}\\n\\t// send notifications for subscribed cis in nextlevel array\\n\\tnotifySubscribers(nextLevel);\\n\\t// walk the relationships of nextLevel Cis and notify\\n\\tif (!maxCisReached())\\n\\t\\tnotifyParentsByLevel(nextLevel, 1);\\n\\n}\\n\\n\\nfunction notifyParentsByLevel(cis, currentLevel) {\\n\\tif (currentLevel > maxLevel || cis.length < 1) return;\\n\\t\\n\\tfor (var index = 0; index < cis.length; index += ciBatchSize) {\\n\\t\\tvar nextCIs = [];\\n\\t\\tif (eventCount >= maxEvents) break;\\n\\n\\t\\tvar batch = cis.slice(index, index + ciBatchSize);\\n\\n\\t\\tvar rel = new GlideRecord('cmdb_rel_ci');\\n\\t\\trel.addQuery('child', 'IN', batch);\\n\\t\\trel.addNotNullQuery('type');\\n\\t\\trel.addNotNullQuery('parent');\\n\\t\\trel.query();\\n\\t\\twhile (rel.next()) {\\n\\t\\t\\tciCount++;\\n\\n\\t\\t\\tif (maxCisReached())\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tvar parentSysID = rel.parent + '';\\n\\t\\t\\tif (!visited[parentSysID]) {\\n\\t\\t\\t\\tnextCIs.push(parentSysID);\\n\\t\\t\\t\\tmarkAsVisited(parentSysID);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tnotifySubscribers(nextCIs);\\n\\n\\t\\tif(nextCIs.length > 0 && (currentLevel + 1) <= maxLevel && !maxCisReached())\\n\\t\\t\\tnotifyParentsByLevel(nextCIs, currentLevel + 1);\\n\\t}\\n\\n\\t\\n}\\n\\nfunction notifySubscribers(ciSysIds) {\\n\\tif (ciSysIds.length == 0)\\n\\t\\treturn;\\n\\n\\tvar ciList = [];\\n\\tfor (var index = 0; index < ciSysIds.length; index += ciBatchSize) {\\n\\t\\tvar batch = ciSysIds.slice(index, index + ciBatchSize);\\n\\n\\t\\tciList = [];\\n\\t\\tif(legacySubscriptionModel == 'true') {\\n\\t\\t\\tvar mGr = new GlideAggregate('cmn_notif_message');\\n\\t\\t\\tmGr.addQuery('configuration_item', 'IN', batch);\\n\\t\\t\\tmGr.addQuery('notification', 'IN', ciAffectedNotificationTypes);\\n\\t\\t\\tmGr.groupBy('configuration_item');\\n\\t\\t\\tmGr.query();\\n\\t\\t\\twhile (mGr.next()) {\\n\\t\\t\\t\\tvar ci = mGr.configuration_item + '';\\n\\t\\t\\t\\tciList.push(ci);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tvar nGr = new GlideAggregate('sys_notif_subscription');\\n\\t\\t\\tnGr.addActiveQuery();\\n\\t\\t\\tnGr.addQuery('affected_record', 'IN', batch);\\n\\t\\t\\tnGr.addQuery('notification', 'IN', ciAffectedNotificationTypes);\\n\\t\\t\\tnGr.groupBy('affected_record');\\n\\t\\t\\tnGr.query();\\n\\t\\t\\twhile (nGr.next()) {\\n\\t\\t\\t\\tvar ar = nGr.affected_record + '';\\n\\t\\t\\t\\tciList.push(ar);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (ciList.length > 0)\\n\\t\\t\\t\\t\\t\\tqueueCis(ciList);\\n\\t}\\n\\n}\\n\\nfunction queueCis(ciList) {\\n\\tvar ciDisplayName = '', ciSysId = '';\\n\\tvar ciGr = new GlideRecord('cmdb_ci');\\n\\tciGr.addQuery('sys_id', 'IN', ciList);\\n\\tciGr.query();\\n\\twhile (ciGr.next()){\\n\\t\\tciSysId = ciGr.sys_id;\\n\\t\\tciDisplayName = ciGr.getDisplayValue();\\n\\t\\tif (!noNotify[ciSysId]) {\\n\\t\\t\\tgs.eventQueue('ci.affected', current, ciSysId, ciDisplayName, 'cmdb_ci_affected');\\n\\t\\t\\tmarkAsNotified(ciSysId);\\n\\t\\t\\teventCount++;\\n\\t\\t\\tif (eventCount >= maxEvents) return;\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction getCIAffectedNotificationTypes() {\\n\\tvar gr = new GlideRecord('sysevent_email_action');\\n\\tgr.addQuery('event_name', 'ci.affected');\\n\\tgr.addActiveQuery();\\n\\tgr.query();\\n\\tvar ids = '';\\n\\twhile (gr.next()) {\\n\\t\\tids += gr.getValue('sys_id');\\n\\t\\tif(gr.hasNext())\\n\\t\\t\\tids += ',';\\n\\t}\\n\\n\\treturn ids;\\n}\\n\\nfunction markAsVisited(ci) {\\n\\tvar size = Object.keys(visited).length;\\n\\tif (size < maxArrSize)\\n\\t\\tvisited[ci] = true;\\n}\\n\\nfunction markAsNotified(ci) {\\n\\tif (visited[ci])\\n\\t\\treturn; // ci will not be visited twice so need to track\\n\\n\\tnoNotify[ci] = true;\\n}\\n\\nfunction maxCisReached() {\\n\\tif (isNaN(maxCis))\\n\\t\\treturn false;\\n\\treturn ciCount > maxCis;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"javascript:new AffectedUtils().hasAffected(current, \\\"task_ci\\\", \\\"task\\\");\",\n\t\"name\": \"Affected ci notifications\"\n}```"}
{"prompt":"{\"prompt\":\"Add Default Verification To Process\",\"table\":\"pwd_process\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pwd_process\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\t// Add your code here\\n\\t\\tvar verificationMapGr = new GlideRecord('pwd_map_proc_to_verification');\\n\\t\\tverificationMapGr.initialize();\\n\\t\\tverificationMapGr.setValue('process', current.sys_id);\\n\\t\\tverificationMapGr.setValue('verification', '12c34f0deb6001006a668c505206fefd');\\n\\t\\tverificationMapGr.insert();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Add Default Verification To Process\"\n}```"}
{"prompt":"{\"prompt\":\"REST Method: Check Variables\",\"table\":\"sys_rest_message_fn\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_rest_message_fn\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.include('RESTVariableBusinessRuleChecker');\\nvar checker = new RESTVariableBusinessRuleChecker();\\nvar grRestMessage = new GlideRecord('sys_rest_message');\\ngrRestMessage.get(current.rest_message);\\ngrRestMessage.next();\\n\\nchecker.check(grRestMessage, current.function_name);\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"gs.getProperty('com.glide.business_rule.outbound_rest', false)\",\n\t\"name\": \"REST Method: Check Variables\"\n}```"}
{"prompt":"{\"prompt\":\"Flush Form Cache\",\"table\":\"sys_script_client\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_script_client\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.cacheFlush('syscache_realform');\\r\\ngs.cacheFlush('syscache_jelly_script');\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Flush Form Cache\"\n}```"}
{"prompt":"{\"prompt\":\"Explain missing run button for test\",\"table\":\"sys_atf_test\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_atf_test\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif ((new GlideImpersonate()).isImpersonating())\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Running tests and test suites is disabled while impersonating another user.\\\"), \\\"ATFDisabledWhileImpersonating\\\");\\n\\n\\tif (!sn_atf.AutomatedTestingFramework.isRunnerEnabled()) {\\n\\t\\tvar message;\\n\\t\\tif (gs.getUser().hasRole('atf_test_admin') || gs.getUser().hasRole('admin'))\\n\\t\\t\\tmessage = gs.getMessage(\\\"enable_test_execution\\\", new ATFVariablesUtil().getATFPropertiesURL());\\n\\t\\telse\\n\\t\\t\\tmessage = gs.getMessage(\\\"Running tests and test suites is disabled. Only users with atf_test_admin or admin role can enable it\\\");\\n\\n\\t\\tgs.addInfoMessage(message, \\\"ATFRunnerDisabled\\\");\\n\\t}\\n\\n\\tif (!current.active)\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"This test cannot be run because it is inactive\\\"), \\\"ATFCurrentTestDisabled\\\");\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!sn_atf.AutomatedTestingFramework.isRunnerEnabled() || !current.active || ((new GlideImpersonate()).isImpersonating())\",\n\t\"name\": \"Explain missing run button for test\"\n}```"}
{"prompt":"{\"prompt\":\"Create Default Number Maintenance Field\",\"table\":\"sys_db_object\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_db_object\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"1000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"//This is only for UI initiated insert.\\tWe take advantage of 'action' being \\n// set incidentally earlier in the global space.\\tThis is not ideal.\\tSomething \\n// more explicit would be great.\\nvar action = GlideController.getGlobal(\\\"action\\\");\\nif (action != null) {\\n\\tvar uri = action.getGlideURI();\\n\\tvar prefix = uri.get(\\\"sys_db_object.number_ref.prefix\\\");\\n\\tvar startNum = uri.get(\\\"sys_db_object.number_ref.number\\\");\\n\\tvar maxDigits = uri.get(\\\"sys_db_object.number_ref.maximum_digits\\\");\\n\\t\\n\\tvar numberRef = SNC.TableEditor.createDefaultNumberField(current, prefix, startNum, maxDigits);\\n\\tcurrent.number_ref = numberRef;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.number_ref.nil()\",\n\t\"name\": \"Create Default Number Maintenance Field\"\n}```"}
{"prompt":"{\"prompt\":\"Update records that match filter\",\"table\":\"asmt_metric_category\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_metric_category\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"getDelta(current, previous);\\n\\nfunction getDelta(current, previous) {\\n\\tvar isDomainPluginActive = GlidePluginManager.isActive('com.glide.domain');\\n\\tvar asmtUtils = new global.AssessmentUtils();\\n\\n\\t// First generate new relationships, which are 'asmt_m2m_category_assessment' records.\\n\\tvar currM2mCatAsble = asmtUtils.generateM2mCategoryAssessmentsIfNotExisted(current, isDomainPluginActive);\\n\\t// Remove old relationships if any\\n\\tif (current.operation() != 'insert') {\\n\\t\\tasmtUtils.removeOldM2mCategoryAssessments(previous, currM2mCatAsble);\\n\\t}\\n}\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.filter.changes()\",\n\t\"name\": \"Update records that match filter\"\n}```"}
{"prompt":"{\"prompt\":\"Affected group notifications\",\"table\":\"task\",\"when\":\"async\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"99\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current != null) {\\n\\tvar thisTask = current.sys_id;\\n\\tvar noNotify = new Object();\\n\\tvar logMessage = gs.getProperty(\\\"glide.affected_notifications.log.enable\\\", \\\"false\\\");\\n\\n\\tvar affectedItem = new GlideRecord('task_group');\\n\\taffectedItem.addQuery('task', thisTask);\\n\\taffectedItem.query();\\n\\twhile (affectedItem.next()) {\\n\\t\\tvar itemSysID = affectedItem.group;\\n\\t\\tvar itemName = affectedItem.group.getDisplayValue();\\n\\t\\tif (!noNotify[itemSysID]) {\\n\\t\\t\\tnoNotify[itemSysID] = true;\\n\\t\\t\\tif (logMessage == \\\"true\\\") {\\n\\t\\t\\t\\tgs.log('### Notifying subscribers of ' + itemName, 'Business Rule: Affected group notifications');\\n\\t\\t\\t}\\n\\t\\t\\tgs.eventQueue('group.affected', current, itemSysID, itemName);\\n\\t\\t\\tnotifyParents('sys_user_group', itemSysID, logMessage);\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction notifyParents(table, itemSysID, logMessage) {\\n\\t var item = new GlideRecord(table);\\n\\t item.addQuery('sys_id', itemSysID);\\n\\t item.query();\\n\\t if (item.next()) {\\n\\t\\t\\tif (item.parent) {\\n\\t\\t\\t\\t var parentSysID = item.parent;\\n\\t\\t\\t\\t var parentName = item.parent.getDisplayValue();\\n\\t\\t\\t\\t if (!noNotify[parentSysID]) {\\n\\t\\t\\t\\t\\t\\tif (logMessage == \\\"true\\\") {\\n\\t\\t\\t\\t\\t\\t\\tgs.log('### Notifying subscribers of ' + parentName, 'Business Rule: Affected group notifications');\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tnoNotify[parentSysID] = true;\\n\\t\\t\\t\\t\\t\\tgs.eventQueue('group.affected', current, parentSysID, parentName);\\n\\t\\t\\t\\t\\t\\tnotifyParents(table, parentSysID, logMessage);\\n\\t\\t\\t\\t }\\n\\t\\t\\t}\\n\\t }\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"javascript:new AffectedUtils().hasAffected(current, \\\"task_group\\\", \\\"task\\\");\",\n\t\"name\": \"Affected group notifications\"\n}```"}
{"prompt":"{\"prompt\":\"Rename colliding private labels\",\"table\":\"label\",\"when\":\"async\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"label\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAsync(current) {\\n\\t(new LabelCollision()).renameCollidingPrivateLabels(current);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.viewable_by == 'everyone'\",\n\t\"name\": \"Rename colliding private labels\"\n}```"}
{"prompt":"{\"prompt\":\"Write scratchpad to task\",\"table\":\"wf_context\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"wf_context\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(current, previous) {\\n\\t if (current.state == \\\"executing\\\" || current.table != \\\"em_remediation_task\\\")\\n\\t\\t return;\\n\\tvar scratchpad = current.scratchpad;\\n\\tvar taskId = current.id;\\n\\t\\t\\n\\tvar grTask = new GlideRecord(\\\"task\\\");\\n\\tif (!grTask.get(taskId))\\n\\t\\treturn;\\n\\n\\t\\n\\tvar attach = new Attachment();\\n\\tif (!attach.isIndexed())\\n\\t\\tattach.write(\\\"em_remediation_task\\\", grTask.sys_id, \\\"scratchpad\\\", \\\"txt\\\", scratchpad);\\n\\t\\n\\tif (!grTask.closed_at) {\\n\\t\\tgrTask.closed_at = new GlideDateTime();\\n\\t\\tgrTask.update();\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Write scratchpad to task\"\n}```"}
{"prompt":"{\"prompt\":\"Affected location notifications\",\"table\":\"task\",\"when\":\"async\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"99\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current != null) {\\n\\tvar thisTask = current.sys_id;\\n\\tvar noNotify = new Object();\\n\\tvar logMessage = gs.getProperty(\\\"glide.affected_notifications.log.enable\\\", \\\"false\\\");\\n\\n\\tvar affectedItem = new GlideRecord('task_location');\\n\\taffectedItem.addQuery('task', thisTask);\\n\\taffectedItem.query();\\n\\twhile (affectedItem.next()) {\\n\\t\\tvar itemSysID = affectedItem.location;\\n\\t\\tvar itemName = affectedItem.location.getDisplayValue();\\n\\t\\tif (!noNotify[itemSysID]) {\\n\\t\\t\\tnoNotify[itemSysID] = true;\\n\\t\\t\\tif (logMessage == \\\"true\\\") {\\n\\t\\t\\t\\tgs.log('### Notifying subscribers of ' + itemName, 'Business Rule: Affected location notifications');\\n\\t\\t\\t}\\n\\t\\t\\tgs.eventQueue('location.affected', current, itemSysID, itemName);\\n\\t\\t\\tnotifyParents('cmn_location', itemSysID, logMessage);\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction notifyParents(table, itemSysID, logMessage) {\\n\\t var item = new GlideRecord(table);\\n\\t item.addQuery('sys_id', itemSysID);\\n\\t item.query();\\n\\t if (item.next()) {\\n\\t\\t\\tif (item.parent) {\\n\\t\\t\\t\\t var parentSysID = item.parent;\\n\\t\\t\\t\\t var parentName = item.parent.getDisplayValue();\\n\\t\\t\\t\\t if (!noNotify[parentSysID]) {\\n\\t\\t\\t\\t\\t\\tif (logMessage == \\\"true\\\") {\\n\\t\\t\\t\\t\\t\\t\\tgs.log('### Notifying subscribers of ' + parentName, 'Business Rule: Affected location notifications');\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tnoNotify[parentSysID] = true;\\n\\t\\t\\t\\t\\t\\tgs.eventQueue('location.affected', current, parentSysID, parentName);\\n\\t\\t\\t\\t\\t\\tnotifyParents(table, parentSysID, logMessage);\\n\\t\\t\\t\\t }\\n\\t\\t\\t}\\n\\t }\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"javascript:new AffectedUtils().hasAffected(current, \\\"task_location\\\", \\\"task\\\");\",\n\t\"name\": \"Affected location notifications\"\n}```"}
{"prompt":"{\"prompt\":\"Add display name\",\"table\":\"one_api_service_plan_feature\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"one_api_service_plan_feature\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar service = current.service_plan.name.toString();\\n\\tvar feature = current.feature.name.toString();\\n\\tvar name = service + \\\": \\\" + feature;\\n\\tcurrent.sys_name = name;\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Add display name\"\n}```"}
{"prompt":"{\"prompt\":\"Flush Service Portal SCSS Cache \",\"table\":\"sys_properties\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\tif (current.getValue('value') != previous.getValue('value'))\\n\\t\\tGlideCacheManager.flush('sp_scss_cache');\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"nameLIKEglide.service_portal.resize_text^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Flush Service Portal SCSS Cache \"\n}```"}
{"prompt":"{\"prompt\":\"Update VTB Card-Labels Count On Insert\",\"table\":\"label_entry\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"label_entry\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar gr = new GlideRecord(\\\"vtb_card\\\");\\n\\t\\tif (gr.get(current.table_key)) {\\n\\t\\t\\t\\tvar count = parseInt(gr.getValue(\\\"labels_count\\\"));\\n\\t\\t\\t\\tgr.setValue(\\\"labels_count\\\", count + 1);\\n\\t\\t\\t\\tgr.update();\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"table=vtb_card^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Update VTB Card-Labels Count On Insert\"\n}```"}
{"prompt":"{\"prompt\":\"Change Model: Populate scratchpad\",\"table\":\"change_request\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"50\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar changeRequest = new ChangeRequest(current);\\n\\tvar model = {\\n\\t\\t\\\"field\\\": changeRequest.getStateFieldName(),\\n\\t\\t\\\"available_states\\\": [],\\n\\t\\t\\\"field_choices\\\": {},\\n\\t\\t\\\"initial_state\\\": changeRequest.getInitialState(),\\n\\t\\t\\\"record_preset\\\": {},\\n\\t\\t\\\"hidden\\\": gs.getProperty(\\\"com.snc.change_management.change_model.type_compatibility\\\", false) === \\\"true\\\" && gs.getProperty(\\\"com.snc.change_management.change_model.hide\\\", false) === \\\"true\\\"\\n\\t};\\n\\tg_scratchpad.change_model = model;\\n\\t\\n\\tvar currentState = \\\"\\\";\\n\\tvar nextStates = changeRequest.getNextManualStates();\\n\\tif (current.isNewRecord())\\n\\t\\tcurrentState = changeRequest.getInitialState();\\n\\telse if (current.isActionAborted()) {\\n\\t\\tvar prevChgReqGr = new GlideRecord(current.getTableName());\\n\\t\\tprevChgReqGr.get(current.getUniqueValue());\\n\\t\\tvar prevChgReq = new ChangeRequest(prevChgReqGr);\\n\\t\\tcurrentState = prevChgReq.getState();\\n\\t\\tnextStates = prevChgReq.getNextManualStates();\\n\\t}\\n\\telse\\n\\t\\tcurrentState = changeRequest.getState();\\n\\t\\n\\t//All available states\\n\\tif (currentState)\\n\\t\\tmodel.available_states = [currentState].concat(nextStates);\\n\\t\\n\\tif (!current.chg_model.nil())\\n\\t\\tmodel.record_preset = new ChangeModel(current.chg_model.getRefRecord()).getRecordPresetValues();\\n\\t\\n\\t//All field choices\\n\\tvar choiceGr = new GlideSysChoice(current.getTableName(), changeRequest.getStateFieldName()).getChoices();\\n\\tvar order = 0;\\n\\twhile (choiceGr.next()) {\\n\\t\\tif (choiceGr.getValue(\\\"inactive\\\") === \\\"1\\\")\\n\\t\\t\\tcontinue;\\n\\t\\t\\n\\t\\tvar choice = {\\n\\t\\t\\t\\\"value\\\": choiceGr.getValue(\\\"value\\\"),\\n\\t\\t\\t\\\"label\\\": choiceGr.getDisplayValue(\\\"label\\\"),\\n\\t\\t\\t\\\"order\\\": order++\\n\\t\\t};\\n\\t\\t\\n\\t\\tmodel.field_choices[choice.value] = choice;\\n\\t}\\n\\t\\n\\tmodel.available_states.sort(function(a,b) {\\n\\t\\treturn model.field_choices[a].order - model.field_choices[b].order;\\n\\t});\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Change Model: Populate scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"Validate device type\",\"table\":\"on_call_user_contact_preference\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"on_call_user_contact_preference\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar onCallCommon = new OnCallCommon();\\n\\n\\tvar validDeviceType = 'Email';\\n\\n\\tif (onCallCommon.isNotifyPluginInstalled())\\n\\t\\tvalidDeviceType = validDeviceType + ',Voice,SMS';\\n\\n\\tif (onCallCommon.isSlackPluginInstalled())\\n\\t\\tvalidDeviceType = validDeviceType + ',Slack';\\n\\n\\tif (onCallCommon.isMobilePushInstalled())\\n\\t\\tvalidDeviceType = validDeviceType + ',Push';\\n\\n\\tvar devices = current.getValue('devices');\\n\\tvar deviceGr = new GlideRecord('cmn_notif_device');\\n\\tdeviceGr.addQuery('sys_id', 'IN', devices);\\n\\tdeviceGr.addQuery('type', 'NOT IN', validDeviceType);\\n\\tdeviceGr.setLimit(1);\\n\\tdeviceGr.query();\\n\\tif (deviceGr.next()) {\\n\\t\\tvar deviceType = deviceGr.type + '';\\n\\t\\tif (deviceType == 'Voice' || deviceType == 'SMS')\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage('Voice and SMS devices are supported when Notify is installed'));\\n\\t\\telse\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage('Devices of type {0} are not supported', deviceType));\\n\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.devices.nil()\",\n\t\"name\": \"Validate device type\"\n}```"}
{"prompt":"{\"prompt\":\"Create sys_trigger record\",\"table\":\"spotlight_groups\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"spotlight_groups\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tcurrent.trigger = createTriggerRecord(current);\\n\\n\\t\\tfunction createTriggerRecord(current) {\\n\\t\\t\\t\\tvar trigger = new GlideRecord(\\\"sys_trigger\\\");\\n\\t\\t\\t\\ttrigger.initialize();\\n\\t\\t\\t\\ttrigger.setValue(\\\"document\\\", current.sys_class_name);\\n\\t\\t\\t\\ttrigger.setValue(\\\"document_key\\\", current.sys_id);\\n\\t\\t\\t\\ttrigger.setValue(\\\"trigger_type\\\", current.run_type);\\n\\t\\t\\t\\ttrigger.setValue(\\\"run_dayofweek\\\", current.run_dayofweek);\\n\\t\\t\\t\\ttrigger.setValue(\\\"run_dayofmonth\\\", current.run_dayofmonth);\\n\\t\\t\\t\\ttrigger.setValue(\\\"run_time\\\", current.run_time);\\n\\t\\t\\t\\ttrigger.setValue(\\\"repeat\\\", current.run_period);\\n\\t\\t\\t\\ttrigger.setValue(\\\"job_id\\\", \\\"81c92ce9c0a8016400e5f0d2f784ea78\\\");\\n\\t\\t\\t\\tvar jobName = current.name + \\\" - Job\\\";\\n\\t\\t\\t\\ttrigger.setValue(\\\"name\\\", jobName);\\n\\t\\t\\t\\tvar script = \\\"//This trigger calculates the scores for \\\" + current.name + \\\"\\\\n\\\";\\n\\t\\t\\t\\tscript = script + \\\"SNC.SpotlightUtil.calculateSpotlightGroup('\\\" + current.sys_id + \\\"');\\\";\\n\\t\\t\\t\\ttrigger.setValue(\\\"script\\\", script);\\n\\t\\t\\t\\tvar nextAction = getNextActionForRunTypePeriodicalyAndOnce(trigger, current);\\n\\t\\t\\t\\tif (nextAction != null)\\n\\t\\t\\t\\t\\t\\ttrigger.setValue(\\\"next_action\\\", nextAction);\\n\\n\\t\\t\\t\\tvar triggerSysID = trigger.insert();\\n\\t\\t\\t\\treturn triggerSysID;\\n\\t\\t}\\n\\n\\t\\t//Need to set the next_action only for those 2 run types, all other types will \\n\\t\\t//be handled by the BR on sys_trigger table\\n\\t\\tfunction getNextActionForRunTypePeriodicalyAndOnce(trigger, current) {\\n\\t\\t\\t\\tvar type = current.run_type;\\n\\t\\t\\t\\tvar gdt = new GlideDateTime();\\n\\t\\t\\t\\t//In case of trigger once or trigger repeat\\n\\t\\t\\t\\tif (type == 0 || type == 1) {\\n\\t\\t\\t\\t\\t\\tvar rdt = new GlideDateTime(current.run_start);\\n\\t\\t\\t\\t\\t\\tif (rdt.getDate() == null)\\n\\t\\t\\t\\t\\t\\t\\t\\trdt = new GlideDateTime();\\n\\n\\t\\t\\t\\t\\t\\t//If run_start is in the future then we want to start on run_start\\n\\t\\t\\t\\t\\t\\tif (rdt.getNumericValue() > gdt.getNumericValue())\\n\\t\\t\\t\\t\\t\\t\\t\\treturn rdt;\\n\\n\\t\\t\\t\\t\\t\\t//If run_start is in the past then reschedule to prevent job executing now\\n\\t\\t\\t\\t\\t\\ttrigger.setValue(\\\"next_action\\\", rdt);\\n\\t\\t\\t\\t\\t\\treturn getRescheduledNextAction(trigger);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn null;\\n\\t\\t}\\n\\n\\n\\t\\tfunction getRescheduledNextAction(trigger) {\\n\\t\\t\\t\\tvar m = GlideARecurrence.get(trigger);\\n\\t\\t\\t\\tif (m == null)\\n\\t\\t\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t\\treturn m.next();\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.isNewRecord() && current.active\",\n\t\"name\": \"Create sys_trigger record\"\n}```"}
{"prompt":"{\"prompt\":\"Step Ext Input Protection Policy\",\"table\":\"sys_hub_step_ext_input\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_hub_step_ext_input\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t// If Step Instance cannot be updated, we cannot add or remove Inputs, so abort\\n\\tif (!isActionSnapshot() && (isAddingToReadOnlyStep() || isRemovingFromReadOnlyStep())) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(\\\"Cannot modify Inputs for a Step Instance \\\" +\\n\\t\\t\\t\\t\\t\\t\\t \\\"with restrictive security or protection policy\\\");\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\t// If no Step Instance is set, leave Input policy as specified\\n\\tif (gs.nil(current.model))\\n\\t\\treturn;\\n\\t\\n\\t// Otherwise, inherit sys_policy from Step Instance\\n\\tcurrent.sys_policy = current.model.sys_policy;\\n\\t\\n\\tfunction isAddingToReadOnlyStep() {\\n\\t\\treturn !gs.nil(current.model) && !current.model.getRefRecord().canWrite();\\n\\t}\\n\\t\\n\\tfunction isRemovingFromReadOnlyStep() {\\n\\t\\treturn !gs.nil(previous.model) && !previous.model.getRefRecord().canWrite();\\n\\t}\\n\\n\\tfunction isActionSnapshot() {\\n\\t\\tif (gs.nil(current.model) || gs.nil(current.model.action))\\n\\t\\t\\treturn false;\\n\\n\\t\\treturn current.model.action.sys_class_name == \\\"sys_hub_action_type_snapshot\\\";\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.model.changes()\",\n\t\"name\": \"Step Ext Input Protection Policy\"\n}```"}
{"prompt":"{\"prompt\":\"Show info message for GRCA read-only\",\"table\":\"sys_restricted_caller_access\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_restricted_caller_access\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tgs.addInfoMessage(gs.getMessage(\\\"This RCA record has an associated signature record and its fields have been made read-only. If this record is edited, its signature will become invalid and this RCA record will deny access by default.\\\"));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"target_scope=global^EQ\",\n\t\"condition\": \"new global.GRCASignatureUtils().hasSignatureRecord(current);\",\n\t\"name\": \"Show info message for GRCA read-only\"\n}```"}
{"prompt":"{\"prompt\":\"User field is mandatory\",\"table\":\"sys_on_call_contact_source\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_on_call_contact_source\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tgs.addErrorMessage(gs.getMessage(\\\"User field is mandatory\\\"));\\n\\tcurrent.setAbortAction(true);\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.table != \\\"sys_user\\\" && !current.user_field\",\n\t\"name\": \"User field is mandatory\"\n}```"}
{"prompt":"{\"prompt\":\"Update Contract Lifetime Cost\",\"table\":\"fm_contract_rate_card\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"fm_contract_rate_card\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"this.calcLifetime(current.contract);\\n\\nfunction calcLifetime(contract) {\\n\\t\\tvar expenseLines = new GlideRecord('fm_expense_line');\\n\\t\\texpenseLines.addQuery('source_id', contract.sys_id);\\n\\texpenseLines.query();\\n\\tvar amount = 0;\\n\\t\\twhile (expenseLines.next()) {\\n\\t\\tamount += parseFloat(expenseLines.amount);\\n\\t}\\n\\tvar gr = new GlideRecord('ast_contract');\\n\\tgr.get(contract.sys_id);\\n\\tgr.lifetime_cost = amount;\\n\\tgr.update();\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.last_processed.changes()\",\n\t\"name\": \"Update Contract Lifetime Cost\"\n}```"}
{"prompt":"{\"prompt\":\"Application Design Access Business Rule\",\"table\":\"sys_scope_design_access\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_scope_design_access\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"source_scope=global^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Application Design Access Business Rule\"\n}```"}
{"prompt":"{\"prompt\":\"Implicit dependency - Parent change\",\"table\":\"gsw_content\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"gsw_content\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tnew GuidedSetupUtilSNC().updateImplicitDependencyFromParent(current);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"parentVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Implicit dependency - Parent change\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Table Config width\",\"table\":\"sys_ux_ribbon_config_setting\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ux_ribbon_config_setting\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"92\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar ribbon = new GlideRecord(current.getTableName());\\n\\tribbon.addActiveQuery();\\n\\tribbon.addQuery('table', current.table);\\n\\tribbon.addQuery('configuration', current.configuration);\\n\\tribbon.addQuery('sys_id','!=', current.getUniqueValue());\\n\\tribbon.addQuery('ribbon.sys_domain', current.ribbon.sys_domain);\\n\\tribbon.query();\\n\\tvar sum = parseInt(current.width);\\n\\twhile (ribbon.next() && sum <= 12) {\\n\\t\\tsum += parseInt(ribbon.width);\\n\\t}\\n\\n\\tif (sum > 12) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"The combined width of the ribbon widgets must equal 12 or less for the {0} table and Ribbon Configuration\\\", [current.table]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.isActionAborted() && (current.operation() == 'insert' || current.configuration.changes() || current.table.changes() || current.width.changes() || current.active.changes())\",\n\t\"name\": \"Validate Table Config width\"\n}```"}
{"prompt":"{\"prompt\":\"Sync \\\"cab_date\\\" and \\\"cab_date_time\\\"\",\"table\":\"change_request\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"950\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (current.cab_date_time.changes())\\n\\t\\tcurrent.setValue(\\\"cab_date\\\", current.getValue(\\\"cab_date_time\\\"));\\n\\telse\\n\\t\\tcurrent.setValue(\\\"cab_date_time\\\", current.getValue(\\\"cab_date\\\"));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.cab_date.changes() || current.cab_date_time.changes() || (!current.cab_date.nil() && current.cab_date_time.nil())\",\n\t\"name\": \"Sync \\\"cab_date\\\" and \\\"cab_date_time\\\"\"\n}```"}
{"prompt":"{\"prompt\":\"Workflow Release Lock\",\"table\":\"change_request\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"9000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// Releases the lock on current that might have been placed during a workflow reset\\r\\n// from business rule 'SNC Approval - Reset conditions'\\r\\n\\r\\n\\r\\nif (typeof chg_wf_lock != \\\"undefined\\\") {\\r\\n\\r\\n\\t gs.print(gs.getMessage('Workflow Release Lock business rule is releasing the record lock for {0}', current.getDisplayValue()));\\r\\n\\t chg_wf_lock.release();\\r\\n}\\r\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Workflow Release Lock\"\n}```"}
{"prompt":"{\"prompt\":\"Change Model: Set work end\",\"table\":\"change_request\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tcurrent.work_end = new GlideDateTime();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"chg_model=007c4001c343101035ae3f52c1d3aeb2^ORchg_model=e55d0bfec343101035ae3f52c1d3ae49^ORchg_model=62d10fa1c303101035ae3f52c1d3aec1^stateCHANGESTO0^work_endISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Change Model: Set work end\"\n}```"}
{"prompt":"{\"prompt\":\"Choices unload - before\",\"table\":\"sys_choice\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_choice\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var agg = new GlideAggregate(\\\"sys_choice\\\");\\nagg.addQuery(\\\"name\\\", current.name);\\nagg.addQuery(\\\"element\\\", current.element);\\nagg.addAggregate(\\\"COUNT\\\");\\nagg.query();\\nvar count = 0;\\n\\n//do not add a base version for an empty choice list\\nif(agg.next()){\\n\\t\\tcount = agg.getAggregate(\\\"COUNT\\\");\\n\\t\\tif(count > 0)\\n\\t\\t\\t\\tgs.unloadChoices(current.name, current.element, 'true');\\n\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Choices unload - before\"\n}```"}
{"prompt":"{\"prompt\":\"Validate domain data before inserting it\",\"table\":\"appsec_domain_listing\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"appsec_domain_listing\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\tvar constants = new ISCConstants();\\n\\tvar domain = current.dl_name.toString();\\n\\tvar error = \\\"\\\";\\n\\tif (!constants.DOMAIN_REGEX.test(domain)) {\\n\\t\\terror = \\\"Invalid domain address.\\\";\\n\\t\\tgs.addErrorMessage(error);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n\\tvar category = current.dl_category.toString();\\n\\tif (!(category == \\\"Black\\\" || category == \\\"White\\\")) {\\n\\t\\terror = \\\"Invalid domain category. It should be either Black or White.\\\";\\n\\t\\tgs.addErrorMessage(error);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate domain data before inserting it\"\n}```"}
{"prompt":"{\"prompt\":\"Show Domain Change Info\",\"table\":\"sc_ic_item_staging\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_ic_item_staging\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\tvar item = sc_ic_Factory.wrap(current);\\n\\t\\n\\tif (!item.accessibleInDomain())\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"This item has been published in another domain.\\\"));\\n\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Show Domain Change Info\"\n}```"}
{"prompt":"{\"prompt\":\"Enforce valid start rule selection\",\"table\":\"sys_pd_activity\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_pd_activity\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar padActivityTable = 'sys_pd_activity';\\n\\tvar ajbActivityTable = 'sys_ajb_activity';\\n\\t\\n\\tvar afterActivitiesStartRule = '7abaf173c35101102a86cb03b940dd62';\\n\\tvar immediateStartRule = 'ef8ab8c0a3f04bceb117263f51401070';\\n\\t\\n\\tvar isPADActivityTable = current.getRecordClassName() === padActivityTable;\\n\\tvar isAJBActivityTable = current.getRecordClassName() === ajbActivityTable;\\n\\t\\n\\tvar selectedStartRule = current.getValue('start_rule');\\n\\tvar isValidAJBStartRule = (selectedStartRule === immediateStartRule) || (selectedStartRule === afterActivitiesStartRule);\\n\\t\\n\\tvar padStartRules = 'Immediately, After Previous, With Previous';\\n\\tvar ajbStartRules = 'Immediately, After Activities';\\n\\n\\t// after_activities is a start rule used in AJB. It does not work in PAD.\\n\\tif (isPADActivityTable && selectedStartRule === afterActivitiesStartRule) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('Invalid start rule for activity. Valid start rules: {0}', padStartRules));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\t\\n\\t// immediate and after_activities are the only valid start rules in AJB\\n\\tif (isAJBActivityTable && !isValidAJBStartRule) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('Invalid start rule for activity. Valid start rules: {0}', ajbStartRules));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"start_ruleVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Enforce valid start rule selection\"\n}```"}
{"prompt":"{\"prompt\":\"Delete m2m_kb_task record on remove\",\"table\":\"cxs_rel_doc_detail\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cxs_rel_doc_detail\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var kbTask = new GlideRecord('m2m_kb_task');\\nkbTask.addQuery(\\\"kb_knowledge\\\",current.relevant_doc);\\nkbTask.addQuery(\\\"task\\\",current.cxs_relevant_doc.source_doc);\\nkbTask.query();\\n\\t\\nif (kbTask.next()) {\\n\\tkbTask.deleteRecord();\\n}\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"relevance=attach^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete m2m_kb_task record on remove\"\n}```"}
{"prompt":"{\"prompt\":\"ShippingAddress or ShippingLocation Err\",\"table\":\"sc_layout\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_layout\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"target=cart_view_two_step^sc_shipping_address=true^sc_shipping_location=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"ShippingAddress or ShippingLocation Err\"\n}```"}
{"prompt":"{\"prompt\":\"Able to disable parameterized testing\",\"table\":\"sys_atf_test\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_atf_test\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar hasParameters = current.parameters.hasVariables();\\n\\n\\tvar gr = new GlideRecord('sys_atf_parameter_set');\\n\\tgr.addQuery('test', current.sys_id);\\n\\tgr.query();\\n\\tvar hasParameterSets = gr.hasNext();\\n\\n\\tif (hasParameterSets || hasParameters) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(\\\"You must delete all parameters and parameter sets before disabling parameterized testing\\\");\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"enable_parameterized_testingCHANGESTOfalse^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Able to disable parameterized testing\"\n}```"}
{"prompt":"{\"prompt\":\"Source Control Response\",\"table\":\"ecc_queue\",\"when\":\"async\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_queue\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tsn_vcs.MIDResponse.processMessage(current);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"stateCHANGESTOready^EQ\",\n\t\"condition\": \"current.state == \\\"ready\\\" && current.queue == \\\"input\\\" && current.name == \\\"Source Control\\\"\",\n\t\"name\": \"Source Control Response\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent negative/zero value of Requests\",\"table\":\"sys_rate_limit_rules\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_rate_limit_rules\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"requests<=0^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent negative/zero value of Requests\"\n}```"}
{"prompt":"{\"prompt\":\"Notify on change of home directory\",\"table\":\"ecc_agent\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_agent\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tMIDServerUtil.createOrUpdateIssue(current.sys_id, 'home path', \\n\\t'The home directory changed from ' + previous.home_dir + ' to ' + current.home_dir + '.\\tThis issue must be manually resolved.');\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.home_dir.changes() && JSUtil.notNil(previous.home_dir)\",\n\t\"name\": \"Notify on change of home directory\"\n}```"}
{"prompt":"{\"prompt\":\"Adjust Time Based on Time Zone\",\"table\":\"sysauto\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sysauto\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tif (current == null || current.time_zone == '' || current.time_zone.equals(\\\"-- None --\\\"))\\n\\t\\t\\t\\treturn;\\n\\n\\t\\tvar timeZoneAsString = current.time_zone;\\n\\t\\tif (timeZoneAsString.equals(\\\"floating\\\")) {\\n\\t\\t\\t\\tcurrent.run_time.setValue(current.entered_time.getValue());\\n\\t\\t} else {\\n\\t\\t\\t\\tvar glideUtcTimeUtils = new GlideUtcTimeUtils();\\n\\t\\t\\t\\tvar newRunGlideTime = glideUtcTimeUtils.toGlideTime(current.entered_time, timeZoneAsString);\\n\\t\\t\\t\\tif (!newRunGlideTime)\\n\\t\\t\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\tcurrent.run_time.setValue(newRunGlideTime.getValue());\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"time_zoneANYTHING^time_zoneVALCHANGES^ORentered_timeVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Adjust Time Based on Time Zone\"\n}```"}
{"prompt":"{\"prompt\":\"Sync Reference Qual\",\"table\":\"sys_dictionary\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_dictionary\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"updateRefQual();\\ncleanSimple();\\ncleanDynamic();\\n\\nfunction updateRefQual(){\\n\\tif (current.reference_qual.trim().indexOf(\\\"javascript:\\\") != 0) {\\t \\n\\t\\tcurrent.reference_qual_condition = current.reference_qual.trim();\\n\\t\\tcurrent.use_reference_qualifier = 'simple';\\n\\t\\treturn;\\n\\t} \\n\\t\\n\\tvar currentReferenceQual = current.reference_qual.trim();\\n\\tcurrentReferenceQual = currentReferenceQual.substring(\\\"javascript:\\\".length);\\n\\tif (currentReferenceQual == \\\"\\\")\\n\\t\\treturn;\\n\\t\\t\\n\\tif (currentReferenceQual.endsWith(\\\";\\\"))\\n\\t\\tcurrentReferenceQual = currentReferenceQual.substring(0, currentReferenceQual.length - 1);\\n\\t\\t\\n\\tvar dyn = new GlideRecord(\\\"sys_filter_option_dynamic\\\");\\n\\tdyn.addQuery(\\\"script\\\", currentReferenceQual).addOrCondition(\\\"script\\\", currentReferenceQual + \\\";\\\");\\t\\n\\tdyn.query();\\n\\tif (dyn.next()) {\\n\\t\\tgs.print(\\\"Dynamic: \\\" + currentReferenceQual);\\n\\t\\tcurrent.use_reference_qualifier = 'dynamic';\\n\\t\\tcurrent.dynamic_ref_qual = dyn.sys_id;\\n\\t\\t\\n\\t} else\\n\\t\\tcurrent.use_reference_qualifier = 'advanced';\\n}\\n\\nfunction cleanSimple() {\\n\\tvar curUseRef = current.use_reference_qualifier;\\n\\tif (curUseRef == 'dynamic') \\n\\t\\tcurrent.reference_qual_condition = \\\"\\\";\\n\\t else if (curUseRef == 'advanced')\\n\\t\\tcurrent.reference_qual_condition = \\\"\\\";\\n}\\n\\nfunction cleanDynamic() {\\n\\tvar curUseRef = current.use_reference_qualifier;\\n\\tif (curUseRef == 'simple') \\n\\t\\tcurrent.dynamic_ref_qual = \\\"\\\";\\n\\t else if (curUseRef == 'advanced') \\n\\t\\tcurrent.dynamic_ref_qual = \\\"\\\";\\n}\\n\\t\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.reference_qual.changes()\",\n\t\"name\": \"Sync Reference Qual\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent duplicate relation types\",\"table\":\"cmdb_rel_type\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_rel_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\tvar gr = new GlideRecord('cmdb_rel_type');\\n\\tvar parentDescriptorKey = 'parent_descriptor';\\n\\tvar childDescriptorKey = 'child_descriptor';\\n\\t//trim spaces\\n\\tvar parentDescriptor = current.getValue(parentDescriptorKey).trim();\\n\\tvar childDescriptor = current.getValue(childDescriptorKey).trim();\\n\\t//set trimmed values back to current object\\n\\tcurrent.setValue(parentDescriptorKey, parentDescriptor);\\n\\tcurrent.setValue(childDescriptorKey, childDescriptor);\\n\\tgr.addQuery(parentDescriptorKey, parentDescriptor);\\n\\t\\tgr.addQuery(childDescriptorKey, childDescriptor);\\n\\tif( current.operation() == \\\"update\\\" ) {\\n\\t\\t\\t\\tgr.addQuery('sys_id','!=', current.getValue('sys_id'));\\n\\t\\t}\\n\\n\\tgr.query();\\n\\tif( gr.next() ) {\\n\\t\\tvar message = gs.getMessage('Duplicate Relationship Type record already exist with sys_id: {0}',gr.getValue('sys_id'));\\n\\t\\tgs.addInfoMessage(message);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"parent_descriptorISNOTEMPTY^child_descriptorISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent duplicate relation types\"\n}```"}
{"prompt":"{\"prompt\":\"Delete sys_hub_pill_compound records\",\"table\":\"sys_hub_flow_base\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_hub_flow_base\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar gr = new GlideRecord(\\\"sys_hub_pill_compound\\\");\\n\\tgr.addQuery(\\\"attached_to\\\", current.sys_id);\\n\\tgr.query();\\n\\twhile (gr.next())\\n\\t\\tgr.deleteRecord();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete sys_hub_pill_compound records\"\n}```"}
{"prompt":"{\"prompt\":\"80-20 split for the usage field\",\"table\":\"ml_labeled_data\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ml_labeled_data\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tvar FIELDS = MLLabeledData.FIELDS;\\n\\t\\tvar FEEDBACK_TYPE = MLLabeledData.FEEDBACK_TYPE;\\n\\t\\tvar USAGE = MLLabeledData.USAGE;\\n\\t\\tvar filter = FIELDS.LABEL_TYPE + 'IN' + FEEDBACK_TYPE.POSITIVE + ',' + FEEDBACK_TYPE.IRRELEVANT;\\n\\n\\t\\tvar usageCounts = NLULabelFeedbackUtil.getUsageCounts(filter);\\n\\t\\tif (usageCounts.modelTrain || usageCounts.batchTest) {\\n\\t\\t\\t\\tvar modelTrainPercentage = usageCounts.modelTrain * 100 / (usageCounts.modelTrain + usageCounts.batchTest);\\n\\t\\t\\t\\tif (modelTrainPercentage > 80) {\\n\\t\\t\\t\\t\\t\\tcurrent.setValue(FIELDS.USAGE, USAGE.TESTING);\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"product=nlu^label_typeINpositive,irrelevant^recommendation=^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"80-20 split for the usage field\"\n}```"}
{"prompt":"{\"prompt\":\"Restrict charset of cart layout titles\",\"table\":\"sc_layout\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_layout\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"10\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/**\\n * ServiceNow\\n *\\n * Description:\\tThe idea of this script is to prevent anything apart from space, A-Z, a-Z,\\n *\\t\\t\\t\\t\\t\\t\\t 0-9,_ and - being used for layout titles.\\n **/\\nvar pattern=/^(sys_popup,|)[A-Za-z0-9_ ]+$/i;\\n\\nif (!current.title.match(pattern)) {\\n\\tcurrent.setAbortAction(true);\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Service Catalog Layout title {0} can only contain spaces, A-Z, a-z, 0-9 and _\\\", GlideStringUtil.escapeHTML(current.title)));\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Restrict charset of cart layout titles\"\n}```"}
{"prompt":"{\"prompt\":\"Synchronize job fields to Jobs table\",\"table\":\"sys_user\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_user\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar grJob = new GlideRecord('sn_hr_core_job');\\n\\tgrJob.addActiveQuery();\\n\\tgrJob.addQuery('primary', true);\\n\\tgrJob.addQuery('user', current.getUniqueValue());\\n\\tgrJob.setLimit(1);\\n\\tgrJob.query();\\n\\t\\n\\tif(grJob.next())\\n\\t\\tnew sn_hr_core.hr_Utils().syncProfilesWithMap(current, grJob, {}, ['correlation_id', 'source'], false);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"departmentVALCHANGES^ORlocationVALCHANGES^ORmanagerVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Synchronize job fields to Jobs table\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Table & Ribbon fields\",\"table\":\"sys_ux_ribbon_config_setting\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ux_ribbon_config_setting\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"91\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.ribbon.nil()) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Missing required Ribbon Setting.\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn;\\n\\t}\\n\\tvar ribbon = current.ribbon.getRefRecord();\\n\\tif (ribbon.nil() || !ribbon.isValidRecord()) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Invalid Ribbon Setting reference {0}.\\\" [current.ribbon]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn;\\n\\t}\\n\\tif (current.table != ribbon.table)\\n\\t\\tcurrent.setValue('table', ribbon.table);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.isActionAborted() && (current.operation() == 'insert' || current.ribbon.changes() || current.table.changes())\",\n\t\"name\": \"Validate Table & Ribbon fields\"\n}```"}
{"prompt":"{\"prompt\":\"Flag terms and conditions\",\"table\":\"clm_m2m_contract_and_terms\",\"when\":\"after\",\"actions\":\"cd\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"clm_m2m_contract_and_terms\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var gr = new GlideRecord('clm_terms_and_conditions');\\ngr.get(current.terms_and_conditions);\\nif (current.operation() == 'insert') {\\n\\tgr.setValue('used', true);\\n\\tgr.setValue('contract', current.contract);\\n} else {\\n\\tgr.setValue('used', false);\\n\\tgr.setValue('contract', '');\\n}\\ngr.update();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Flag terms and conditions\"\n}```"}
{"prompt":"{\"prompt\":\"Abort setting secondary model as primary\",\"table\":\"sys_nlu_model\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_nlu_model\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"primary_modelVALCHANGES^primary_model.primary_modelISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Abort setting secondary model as primary\"\n}```"}
{"prompt":"{\"prompt\":\"clear preferences\",\"table\":\"pa_m2m_dashboard_sources\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_m2m_dashboard_sources\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\t\\t\\t\\n\\t\\t\\tvar dashboardSysId = current.getValue('dashboard');\\n\\t\\t\\tvar deletedBreakdownSrc = current.getValue('breakdown_source');\\n\\t\\t\\tvar nextBreakdownSrc = '';\\n\\t\\t\\tvar userPref = gs.getUser().getPreference('com.snc.pa.ui.preferences_dashboards');\\n\\t\\t\\tvar parsedPref = this.parsePreferences(userPref);\\n\\t\\t\\tvar gr = new GlideRecord('pa_m2m_dashboard_sources');\\n\\t\\t\\tgr.addQuery('dashboard', dashboardSysId);\\n\\t\\t\\tgr.orderBy('order');\\n\\t\\t\\tgr.query();\\n\\t\\t\\tnextBreakdownSrc = (gr.next() && parsedPref.last === dashboardSysId) ? gr.getValue('breakdown_source') : '';\\n\\t\\t\\tthis.removeStaleData(parsedPref, dashboardSysId, deletedBreakdownSrc, nextBreakdownSrc);\\n\\t\\t\\tgs.getUser().savePreference('com.snc.pa.ui.preferences_dashboards', JSON.stringify(parsedPref));\\n\\t\\t\\t\\n\\t\\t\\tthis.updateOtherUserPreferences(dashboardSysId, deletedBreakdownSrc, nextBreakdownSrc);\\n\\t\\t\\t\\n\\t})(current, previous);\\n\\tfunction parsePreferences(value) {\\n\\t\\t\\tvar newValue = {};\\n\\t\\t\\t\\n\\t\\t\\ttry {\\n\\t\\t\\t\\t\\tnewValue = JSON.parse(value);\\n\\t\\t\\t} catch (err) {\\n\\t\\t\\t\\t\\tgs.warn('There is an issue with deleting user preferences when breakdown source was deleted.');\\n\\t\\t\\t}\\n\\t\\t\\treturn newValue;\\n\\t}\\n\\tfunction removeStaleData(parsedPref, dashboardSysId, deletedBreakdownSrc, nextBreakdownSrc) {\\n\\t\\t\\tif (parsedPref[dashboardSysId] === deletedBreakdownSrc) {\\n\\t\\t\\t\\t\\tdelete parsedPref[dashboardSysId];\\n\\t\\t\\t\\t\\tparsedPref[dashboardSysId] = nextBreakdownSrc;\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\tdelete parsedPref[dashboardSysId + '-' + deletedBreakdownSrc];\\n\\t\\t\\tdelete parsedPref[dashboardSysId + '-' + deletedBreakdownSrc + '-sortorder'];\\n\\t}\\n\\tfunction updateOtherUserPreferences(dashboardSysId, deletedBreakdownSrc, nextBreakdownSrc) {\\n\\t\\t\\tvar gr = new GlideRecord('sys_user_preference');\\n\\t\\t\\tgr.addQuery('name', 'com.snc.pa.ui.preferences_dashboards');\\n\\t\\t\\tgr.addQuery('value', 'CONTAINS', deletedBreakdownSrc);\\n\\t\\t\\tgr.query();\\n\\t\\t\\t\\n\\t\\t\\twhile (gr.next()) {\\n\\t\\t\\t\\t\\tvar parsedPref = this.parsePreferences(gr.getValue('value'));\\n\\t\\t\\t\\t\\tthis.removeStaleData(parsedPref, dashboardSysId, deletedBreakdownSrc, nextBreakdownSrc);\\n\\t\\t\\t\\t\\tvar userPrefString = JSON.stringify(parsedPref);\\n\\t\\t\\t\\t\\tgr.setValue('value', userPrefString);\\n\\t\\t\\t\\t\\tgr.update();\\n\\t\\t\\t}\\n\\t}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"clear preferences\"\n}```"}
{"prompt":"{\"prompt\":\"Check for model protection policy\",\"table\":\"m2m_sys_nlu_model_sys_entity\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"m2m_sys_nlu_model_sys_entity\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tgs.addErrorMessage(gs.getMessage('Invalid insert. This NLU model is read only.'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"model.sys_policy=read^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Check for model protection policy\"\n}```"}
{"prompt":"{\"prompt\":\"Change state cleaner\",\"table\":\"sys_sync_change\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sync_change\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"//There can only be 1 local change for a record in an instance with the same state at 1 time\\nvar push = new SNC.PushAPI();\\npush.cleanChangesAfterStateUpdate(current.sys_id, current.state, current.version.name, current.instance);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.state.changes()\",\n\t\"name\": \"Change state cleaner\"\n}```"}
{"prompt":"{\"prompt\":\"Mandatory group and user field\",\"table\":\"trigger_rule_table_cfg\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"trigger_rule_table_cfg\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\tcurrent.setAbortAction(true);\\n\\n\\tif (JSUtil.nil(current.trigger_group_field) && JSUtil.nil(current.trigger_user_field))\\n\\t\\tgs.addErrorMessage(gs.getMessage('Table: [{0}] is missing reference to Group [sys_user_group] and reference to User [sys_user]', current.table.getDisplayValue()));\\n\\telse if (JSUtil.nil(current.trigger_group_field))\\n\\t\\tgs.addErrorMessage(gs.getMessage('Table: [{0}] is missing reference to Group [sys_user_group]', current.table.getDisplayValue()));\\n\\telse if (JSUtil.nil(current.trigger_user_field))\\n\\t\\tgs.addErrorMessage(gs.getMessage('Table: [{0}] is missing reference to User [sys_user]', current.table.getDisplayValue()));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"trigger_group_fieldISEMPTY^ORtrigger_user_fieldISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Mandatory group and user field\"\n}```"}
{"prompt":"{\"prompt\":\"Load Playbook Experience Status Values\",\"table\":\"sys_playbook_experience_status_to_state\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_playbook_experience_status_to_state\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar loadPlaybookExperienceStatusValues = new LoadPlaybookExperienceStatusValues();\\n\\tloadPlaybookExperienceStatusValues.load(current);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Load Playbook Experience Status Values\"\n}```"}
{"prompt":"{\"prompt\":\"Check Taxonomy Domain\",\"table\":\"cmdb_ci_service\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci_service\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"90\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \" !(new global.SPMDomainUtils().isInSameDomain(current, current.spm_taxonomy_node.spm_service_portfolio.getRefRecord()))\",\n\t\"name\": \"Check Taxonomy Domain\"\n}```"}
{"prompt":"{\"prompt\":\"Query Based Service Table Validation\",\"table\":\"cmdb_ci_query_based_service\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci_query_based_service\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\tvar qbsManager = new SNC.QueryBasedServiceManager();\\n\\tvar tableName = current.getValue('table');\\n\\tvar errorMsg = qbsManager.verifyTable(tableName);\\n\\tif (errorMsg.length > 0) {\\n\\t\\tgs.addErrorMessage(errorMsg);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Query Based Service Table Validation\"\n}```"}
{"prompt":"{\"prompt\":\"cxs_table_config_srch_as_fldGetChoices\",\"table\":\"global\",\"when\":\"before\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function cxs_table_config_srch_as_fldGetChoices() {\\n\\tif (!(current && current.getTableName() + \\\"\\\" != \\\"\\\"))\\n\\t\\treturn;\\n\\tcxs_App.getBusiness(current).getAsUserFieldChoices();\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"cxs_table_config_srch_as_fldGetChoices\"\n}```"}
{"prompt":"{\"prompt\":\"Update CAB Date in Change Request\",\"table\":\"cab_agenda_item\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cab_agenda_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar agendaItem = new sn_change_cab.CABAgendaItem(current);\\n\\t\\tagendaItem.updateCABDate();\\n\\tvar previousTaskSysId = previous.task + \\\"\\\";\\n\\t\\tif (current.operation() + \\\"\\\" === \\\"update\\\" && previousTaskSysId && current.task + \\\"\\\" !== previousTaskSysId) {\\n\\t\\t\\t\\tvar previousChangeRequestGr = previous.task.getRefRecord();\\n\\t\\t\\t\\tpreviousChangeRequestGr.cab_date_time = \\\"\\\";\\n\\t\\t\\t\\tpreviousChangeRequestGr.update();\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"taskVALCHANGES^ORcab_meetingVALCHANGES^taskISNOTEMPTY^EQ\",\n\t\"condition\": \"current.task.sys_class_name + \\\"\\\" === \\\"change_request\\\"\",\n\t\"name\": \"Update CAB Date in Change Request\"\n}```"}
{"prompt":"{\"prompt\":\"ValidateServiceAccountID\",\"table\":\"cmdb_ci_cloud_service_account\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci_cloud_service_account\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar current_account_id = current.getValue(\\\"account_id\\\").trim();\\n\\tcurrent.setValue(\\\"account_id\\\",current_account_id );\\n\\tvar validationMessage = new ServiceAccountIdValidator().validateAccountId(current_account_id, current.datacenter_type);\\n\\tif (validationMessage != \\\"success\\\") {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(validationMessage);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"account_idVALCHANGES^ORdatacenter_typeVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"ValidateServiceAccountID\"\n}```"}
{"prompt":"{\"prompt\":\"Social QA accepts an answer\",\"table\":\"kb_social_qa_answer\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"kb_social_qa_answer\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\tvar COMMUNITY = gs.getProperty('sn_communities.knowledge_base_id');\\n\\t\\n\\tif (!new SocialQACommon().showAccept(current) && current.question.kb_knowledge_base != COMMUNITY) {\\n\\t\\tgs.addInfoMessage(gs.getMessage('Only poster or KB Manager can accept'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn;\\n\\t}\\n\\telse {\\n\\t\\tvar question = new GlideRecord('kb_social_qa_question');\\n\\t\\tquestion.get(current.question);\\n\\t\\tif (current.accepted){\\n\\t\\t// Set any previously accepted answer as unaccepted\\n\\t\\t\\tvar gr = new GlideRecord('kb_social_qa_answer');\\n\\t\\t\\tgr.addQuery('question',current.question);\\n\\t\\t\\tgr.addActiveQuery();\\n\\t\\t\\tgr.addQuery('accepted','true');\\n\\t\\t\\tgr.accepted = false;\\n\\t\\t\\tgr.accepted_by = '';\\n\\t\\t\\tgr.updateMultiple();\\n\\t\\t\\tcurrent.accepted_by = new global.GlobalKnowledgeUtil().getSessionProfile();\\n\\t\\t\\tquestion.accepted_answer = current.sys_id;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tcurrent.accepted_by = '';\\n\\t\\t\\tquestion.accepted_answer = '';\\n\\t\\t}\\n\\t\\tquestion.last_activity = new GlideDateTime();\\n\\t\\tquestion.update();\\n\\t}\\n\\t \\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"acceptedVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Social QA accepts an answer\"\n}```"}
{"prompt":"{\"prompt\":\"Check for Active Version\",\"table\":\"sn_hr_integrations_source_version\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_integrations_source_version\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"500\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\n\\tvar endPoint =current.source.endpoint_url.toString();\\n\\tvar gr = new GlideRecord(current.getTableName());\\n\\tgr.addQuery(\\\"source\\\", current.source);\\n\\tgr.query();\\n\\tvar newEndPoint=endPoint;\\n\\twhile (gr.next()) {\\n\\t\\tif (gr.getValue(\\\"sys_id\\\") != current.sys_id.toString()) {\\n\\t\\t\\tnewEndPoint = endPoint.replace(gr.getValue(\\\"version\\\"),current.version.toString());\\n\\t\\t\\tif (gr.active) {\\n\\t\\t\\t\\tgr.setValue(\\\"active\\\", false);\\n\\t\\t\\t\\tgr.update();\\n\\t\\t\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Version {0} was set inactive\\\", gr.getValue(\\\"version\\\")));\\n\\t\\t\\t\\tgs.info(\\\"Version \\\"+ gr.getValue(\\\"version\\\") + \\\" is made Inactive \\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tif(endPoint != newEndPoint){\\n\\t\\tvar source =new GlideRecord(\\\"sn_hr_integrations_source\\\");\\n\\t\\tsource.get(current.source);\\n\\t\\tsource.setValue(\\\"endpoint_url\\\", newEndPoint);\\n\\t\\tsource.update();\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"active=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Check for Active Version\"\n}```"}
{"prompt":"{\"prompt\":\"Clean up UIB Metadata on delete\",\"table\":\"sys_playbook_experience_activity_ui\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_playbook_experience_activity_ui\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar screenId = current.getValue('screen');\\n\\tvar screen = new GlideRecord('sys_ux_screen');\\n\\tscreen.get(screenId);\\n\\t\\n\\tvar macroponentId = screen.getValue('macroponent');\\n\\tvar macroponent = new GlideRecord('sys_ux_macroponent');\\n\\tmacroponent.get(macroponentId);\\n\\t\\n\\tvar appRoutes = new GlideRecord('sys_ux_app_route');\\n\\tappRoutes.addQuery('parent_macroponent', macroponentId);\\n\\t\\n\\tappRoutes.deleteMultiple();\\n\\tscreen.deleteRecord();\\n\\tmacroponent.deleteRecord();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Clean up UIB Metadata on delete\"\n}```"}
{"prompt":"{\"prompt\":\"Disallow Synchronous provider\",\"table\":\"sys_notification_provider_property\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_notification_provider_property\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"property.name=Synchronous^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Disallow Synchronous provider\"\n}```"}
{"prompt":"{\"prompt\":\"Remove from Packages Whitelist\",\"table\":\"sys_whitelist_package\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_whitelist_package\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"GlideWhiteListManager.get().removeFromPackageWhitelist(current.classname);\\nGlideClusterMessage.post(\\\"script\\\", \\\"GlideWhiteListManager.get().removeFromPackageWhitelist('\\\" + current.classname + \\\"');\\\");\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Remove from Packages Whitelist\"\n}```"}
{"prompt":"{\"prompt\":\"Update workflow version\",\"table\":\"wf_transition\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"wf_transition\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (!current.condition.activity.workflow_version)\\n\\t\\treturn;\\n\\n\\tvar gr = new GlideRecord(\\\"wf_workflow_version\\\");\\n\\n\\tif (gr.get(current.condition.activity.workflow_version)) {\\n\\t\\tgr.setValue(\\\"sys_mod_count\\\", parseInt(gr.getValue(\\\"sys_mod_count\\\")) + 1);\\n\\t\\tgr.update();\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update workflow version\"\n}```"}
{"prompt":"{\"prompt\":\"Clone Exclude Table Validate Name\",\"table\":\"clone_data_exclude\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"clone_data_exclude\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"validateRegEx(current.name);\\n\\nfunction validateRegEx(pattern) {\\n\\tif (pattern == '.*') {\\n\\t\\tgs.addErrorMessage('Name cannot be \\\".*\\\" - this would exclude all tables from clone');\\n\\t\\tcurrent.setAbortAction(true);\\n\\treturn;\\n\\t}\\n\\t \\n\\ttry {\\n\\t\\tPackages.java.util.regex.Pattern.compile(pattern);\\n\\t} catch (e) {\\n\\t\\tgs.addErrorMessage('Name is not a valid regular expression');\\n\\t\\tcurrent.setAbortAction(true);\\n\\treturn;\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Clone Exclude Table Validate Name\"\n}```"}
{"prompt":"{\"prompt\":\"Update Problem Task State to Assess\",\"table\":\"problem_task\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"problem_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar reqFields = new ProblemStateUtils().getReqFieldsFromUI('ptask_assess_dialog_view');\\n\\t\\tfor (var field in reqFields)\\n\\t\\t\\t\\tif (gs.nil(current.getValue(reqFields[field])))\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\tcurrent.setValue('state', ProblemTaskState.States.ASSESS);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.state + '' === ProblemTaskState.States.NEW\",\n\t\"name\": \"Update Problem Task State to Assess\"\n}```"}
{"prompt":"{\"prompt\":\"Dispatch Survey Notification Event\",\"table\":\"asmt_assessment_instance\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_assessment_instance\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar url = new AssessmentUtils().getAssessmentInstanceURL(current.sys_id);\\n\\tgs.eventQueue(\\\"record.send_survey\\\", current, current.user, url);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"trigger_id!=^metric_type.evaluation_method=survey^userISNOTEMPTY^metric_type.notify_user=true^metric_type.sys_class_name=asmt_metric_type^stateCHANGESTOready^ORuserVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Dispatch Survey Notification Event\"\n}```"}
{"prompt":"{\"prompt\":\"Create Asset on insert\",\"table\":\"cmdb_ci\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"1000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (gs.getProperty(AssetandCI.ASSET_ASYNC_PROPERTY) === 'true') {\\n\\tif (AssetandCI.isAssetRequiredForCI(current)) {\\n\\t\\tAssetandCI.createAssetQueueRecord(current.getValue('sys_id'), current.getValue('sys_class_name'));\\n\\t}\\n} else {\\n\\tvar ca = new AssetandCI();\\n\\tca.createAsset(current);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(current.asset.nil()\\t|| (!current.asset.ci.nil() && current.asset.ci != current.sys_id)) && (!SNC.CMDBUtil.isExcludedFromBR(current.getTableName()))\",\n\t\"name\": \"Create Asset on insert\"\n}```"}
{"prompt":"{\"prompt\":\"Update operation type for uppercase\",\"table\":\"sys_rte_eb_upper_case_operation\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_rte_eb_upper_case_operation\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tcurrent.type = \\\"f3e6dad0730000102b6265a751ab9efb\\\";\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update operation type for uppercase\"\n}```"}
{"prompt":"{\"prompt\":\"Update related question record on create\",\"table\":\"kb_social_qa_answer\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"kb_social_qa_answer\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(current, previous) {\\n\\t// Don't update question record if answer itself is inactive\\n\\tif (!current.active)\\n\\t\\treturn ;\\n\\t// Keep answer_count field on the related question record in sync with the number answer records\\n\\tvar question = new GlideRecord('kb_social_qa_question');\\n\\tif(question.get(current.question)) {\\n\\t\\tquestion.answer_count += 1;\\n\\t\\tquestion.last_activity = new GlideDateTime();\\n\\t\\tquestion.update();\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update related question record on create\"\n}```"}
{"prompt":"{\"prompt\":\"Data Policy Rule read only & mandatory\",\"table\":\"sys_data_policy_rule\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_data_policy_rule\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.addErrorMessage(gs.getMessage(\\\"Rule sets both mandatory and read only to true\\\"));\\r\\ncurrent.setAbortAction(true);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.getValue(\\\"disabled\\\") == \\\"true\\\" && current.getValue(\\\"mandatory\\\") == \\\"true\\\"\",\n\t\"name\": \"Data Policy Rule read only & mandatory\"\n}```"}
{"prompt":"{\"prompt\":\"SetNextColor\",\"table\":\"cmn_rota\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmn_rota\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tnew ChangeRotaColors().setNextRotaColor(current);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"SetNextColor\"\n}```"}
{"prompt":"{\"prompt\":\"Create secondary intent-entity map\",\"table\":\"m2m_sys_nlu_intent_entity\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"m2m_sys_nlu_intent_entity\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tvar tables = NLUConstants.tables;\\n\\n\\t\\tvar srcModelId = current.intent.model;\\n\\t\\tif (srcModelId && !NLUModel.isInCloning(srcModelId)) {\\n\\t\\t\\t\\tvar srcIntentId = current.getValue('intent');\\n\\t\\t\\t\\tvar srcEntityId = current.getValue('entity');\\n\\n\\t\\t\\t\\tvar tgtModelGr = new NLUModel(srcModelId).getTranslatedModels();\\n\\t\\t\\t\\twhile (tgtModelGr.next()) {\\n\\t\\t\\t\\t\\t\\tvar tgtModelId = tgtModelGr.getUniqueValue();\\n\\t\\t\\t\\t\\t\\tvar tgtIntentGr = NLUTranslateUtil.getTranslatedRecord(tables.SYS_NLU_INTENT, tgtModelId, srcIntentId);\\n\\t\\t\\t\\t\\t\\tif (!tgtIntentGr) continue;\\n\\n\\t\\t\\t\\t\\t\\tvar tgtEntityId = null;\\n\\t\\t\\t\\t\\t\\tvar tgtEntityGr = NLUTranslateUtil.getTranslatedRecord(tables.SYS_NLU_ENTITY, tgtModelId, srcEntityId);\\n\\t\\t\\t\\t\\t\\tif (!tgtEntityGr) {\\n\\t\\t\\t\\t\\t\\t\\t\\tvar srcEntityGr = new GlideRecord(tables.SYS_NLU_ENTITY);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (srcEntityGr.get(srcEntityId))\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttgtEntityId = NLUImportUtil.createRecord(tables.SYS_NLU_ENTITY, srcEntityGr, null, true);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\ttgtEntityId = tgtEntityGr.getUniqueValue();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif (tgtEntityId)\\n\\t\\t\\t\\t\\t\\t\\t\\tnew NLUIntent(tgtIntentGr.getUniqueValue()).createIntentEntityMap(tgtEntityId, current.relationship);\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"intent.primary_intentISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Create secondary intent-entity map\"\n}```"}
{"prompt":"{\"prompt\":\"Update sys_certificate attributes\",\"table\":\"sys_attachment\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_attachment\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"10000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var cgr = new GlideRecord(\\\"sys_certificate\\\");\\r\\nif(cgr.get(current.table_sys_id)) {\\r\\n\\tcgr.subject = \\\"unknown\\\";\\r\\n\\tcgr.update();\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.table_name == \\\"sys_certificate\\\"\",\n\t\"name\": \"Update sys_certificate attributes\"\n}```"}
{"prompt":"{\"prompt\":\"SNC Release feature events\",\"table\":\"release_feature\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"release_feature\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// create release feature \\n \\nvar name = 'release_feature';\\nsimple_events(current);\\n\\nif (!current.assigned_to.nil() && current.assigned_to.changes()) {\\n\\t gs.eventQueue(name + \\\".assigned\\\", current, current.assigned_to.getDisplayValue(), \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t previous.assigned_to.getDisplayValue());\\n}\\n\\n\\n/**\\n\\nif (current.active.changesTo(false)) {\\n\\t gs.eventQueue(name + \\\".inactive\\\", current, current.incident_state, previous.incident_state);\\n\\t\\n\\n}\\n\\n**/\\n\\n\\nif (current.workflow_state.changes()) {\\n\\t gs.eventQueue(name + \\\".state.change\\\", current, current.workflow_state, previous.workflow_state);\\n}\\n\\nif (current.percent_complete == 100) {\\n\\t gs.eventQueue(name + \\\".complete\\\", current, current.percent_complete, previous.percent_complete);\\n}\\n\\n\\n// do the inserted, updated events\\nfunction simple_events(current) {\\n var name = 'release_feature';\\n\\n if (current.operation() == 'insert') {\\n\\tgs.eventQueue(name + \\\".inserted\\\", current, gs.getUserID(), gs.getUserName());\\n }\\n\\n if (current.operation() == 'update') {\\n\\tgs.eventQueue(name +\\\".updated\\\", current, gs.getUserID(), gs.getUserName());\\n }\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"SNC Release feature events\"\n}```"}
{"prompt":"{\"prompt\":\"Remove filter configs after changing cxt\",\"table\":\"cxs_table_config\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cxs_table_config\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar cxs_FltrConfig = new global.cxs_FltrConfig();\\n\\tcxs_FltrConfig._removeFilterConfigsFromTableConfig(current.sys_id);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"cxs_context_configVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Remove filter configs after changing cxt\"\n}```"}
{"prompt":"{\"prompt\":\"Generate API Key\",\"table\":\"mid_webserver_api_key_credentials\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"mid_webserver_api_key_credentials\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"1\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\t\\tif (!gs.nil(current.getValue(\\\"authentication_key\\\"))) {\\n\\t\\t\\t\\t// this field should be left empty on insertion (enforced in UI by making it read only)\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Authentication key field should be left empty on creation of a new API Key\\\"));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t\\tcurrent.setDisplayValue(\\\"authentication_key\\\", gs.generateGUID());\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Generate API Key\"\n}```"}
{"prompt":"{\"prompt\":\"SNC Release project events\",\"table\":\"release_project\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"release_project\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"//\\r\\n// Insert events for others to react to\\r\\n//\\r\\ncreateEvents(current);\\r\\n\\r\\n\\r\\nfunction createEvents(current) {\\r\\n\\t var name = 'release_project';\\r\\n\\r\\n\\t if (current.operation() == 'insert') {\\r\\n\\t\\t\\tgs.eventQueue(name + \\\".inserted\\\", current, gs.getUserID(), gs.getUserName());\\r\\n\\t\\t\\tvar wanted = current.phases_wanted;\\r\\n\\t\\t\\tif (wanted == true) {\\r\\n\\t\\t\\t\\t\\tcurrent.scheduleScript(\\\"SNC Release Insert Phases\\\");\\t\\t\\t\\r\\n\\t\\t\\t}\\r\\n\\t }\\r\\n\\r\\n\\t if (current.operation() == 'update') {\\r\\n\\t\\t\\tgs.eventQueue(name +\\\".updated\\\", current, gs.getUserID(), gs.getUserName());\\t\\r\\n\\t\\t\\tif (current.phases_wanted.changesTo(true)) {\\t\\t \\r\\n\\t\\t\\t\\t\\t current.scheduleScript(\\\"SNC Release Insert Phases\\\");\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tif (current.phases_wanted.changesTo(false)) {\\r\\n\\t\\t\\t\\t\\t current.scheduleScript(\\\"SNC Release Delete Phases\\\");\\r\\n\\t\\t\\t}\\r\\n\\t }\\r\\n\\r\\n\\t if (current.active.changesTo(false)) {\\r\\n\\t\\t\\tgs.eventQueue(name +\\\".inactive\\\", current, current.workflow_state, current.workflow_state);\\r\\n\\t }\\r\\n\\r\\n\\t if (current.workflow_state.changes()) {\\r\\n\\t\\t\\tgs.eventQueue(name +\\\".state.change\\\", current, current.workflow_state, previous.workflow_state);\\r\\n\\t }\\r\\n\\r\\n\\t if (current.workflow_state.changesTo('complete')) { \\r\\n\\t\\t\\tcurrent.scheduleScript(\\\"SNC Release Complete\\\");\\r\\n\\t }\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"SNC Release project events\"\n}```"}
{"prompt":"{\"prompt\":\"PA Validate Widget - time series\",\"table\":\"pa_widgets\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_widgets\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.indicator && !SNC.PAIndicator.validAggregate(current.aggregate, current.indicator.sys_id)) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"The time series aggregation that you selected is not available for this indicator. Check the indicator record to see whether this time series is excluded.\\\"));\\n\\tcurrent.setAbortAction(true);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"aggregateISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"PA Validate Widget - time series\"\n}```"}
{"prompt":"{\"prompt\":\"Validate limit\",\"table\":\"cxs_table_email_config\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cxs_table_email_config\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.limit < 1){\\n\\tcurrent.limit.setError(gs.getMessage(\\\"Limit cannot be negative or zero\\\"));\\n\\tcurrent.setAbortAction(true);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.limit != \\\"\\\"\",\n\t\"name\": \"Validate limit\"\n}```"}
{"prompt":"{\"prompt\":\"SNC Release Insert Phases\",\"table\":\"release_project\",\"when\":\"async\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"release_project\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.log(\\\"Release Insert Phases starting\\\");\\r\\ninsertPhases(current);\\r\\ngs.log(\\\"Release Insert Phases ending\\\");\\r\\n\\r\\n\\r\\nfunction insertPhases(current) {\\r\\n\\tvar phases = current.phases.getChoices(current.type);\\r\\n\\tvar order = 100;\\r\\n\\tvar active = true;\\r\\n\\tfor (var i = 0; i < phases.size(); i++) {\\r\\n\\t\\tvar phase = phases.get(i);\\t \\r\\n\\t\\tvar grPhase = new GlideRecord('release_phase');\\t\\r\\n\\t\\tgrPhase.initialize();\\r\\n\\t\\tgrPhase.name.setValue(phase);\\r\\n\\t\\tgrPhase.order.setValue(order);\\r\\n\\t\\torder += 100;\\r\\n\\t\\tgrPhase.release.setValue(current.sys_id);\\r\\n\\t\\tgrPhase.planned_end_date.setValue(current.due_date);\\r\\n\\t\\tgrPhase.priority.setValue(current.priority);\\r\\n\\t\\tvar desc = grPhase.name.getDisplayValue() + ' phase for project ' + current.number + ' (' + current.short_description + ')';\\r\\n\\t\\tgrPhase.short_description.setValue(desc);\\t \\r\\n\\t\\tgrPhase.active.setValue(active);\\r\\n\\t\\tif (active == true) {\\r\\n\\t\\t\\tgrPhase.actual_start_date.setValue(gs.nowDateTime());\\t\\r\\n\\t\\t}\\r\\n\\t\\tactive = false;\\r\\n\\t\\tgrPhase.insert();\\t\\t \\r\\n\\t}\\r\\n}\\r\\n\\r\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"SNC Release Insert Phases\"\n}```"}
{"prompt":"{\"prompt\":\"SNC Release Delete Phases\",\"table\":\"release_project\",\"when\":\"async\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"release_project\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.log(\\\"Release Delete Phase starting\\\");\\r\\ndeletePhases(current);\\r\\ngs.log(\\\"Release Delete Phase ending\\\");\\r\\n\\r\\nfunction deletePhases(current) {\\r\\n\\t var grPhase = new GlideRecord('release_phase');\\t\\r\\n\\t grPhase.addQuery('release', '=', current.sys_id);\\r\\n\\t grPhase.query();\\r\\n\\t while (grPhase.next()) {\\r\\n\\t\\t\\tgrPhase.deleteRecord();\\r\\n\\t }\\r\\n}\\r\\n\\r\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"SNC Release Delete Phases\"\n}```"}
{"prompt":"{\"prompt\":\"SNC Release Complete\",\"table\":\"release_project\",\"when\":\"async\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"release_project\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.log(\\\"SNC Release Complete starting\\\");\\n\\nvar msg = 'Release '+current.name.getDisplayValue()+' for Product ' + current.product.getDisplayValue() + ' is complete';\\ncloseRelatedGivenRelease(current, msg);\\npostDSL(current);\\n\\ngs.log(\\\"SNC Release Complete ending\\\");\\n\\n// Find all related problems and close them\\nfunction closeRelatedGivenRelease(me, msg) {\\n\\tvar features = new GlideRecord('release_feature');\\n\\tfeatures.addQuery('release', '=', me.sys_id);\\n\\tfeatures.query();\\n\\twhile (features.next()) {\\n\\t\\tcloseRelatedGivenFeature(features, msg);\\n\\t}\\n}\\n\\n\\n// Find related problems for a feature and close them\\nfunction closeRelatedGivenFeature(me, msg) {\\n\\tif (!me.rfc.isNil()) {\\n\\t\\tvar rfc = new GlideRecord('change_request');\\n\\t\\tif (rfc.get('sys_id', me.rfc)) {\\n\\t\\t\\tvar chgReq = new ChangeRequest(rfc);\\n\\t\\t\\tif (!chgReq.isClosed()) {\\n\\t\\t\\t\\tvar notes = rfc.close_notes.getDisplayValue();\\n\\t\\t\\t\\tnotes = notes + '\\\\n' + (JSUtil.notNil(msg) ? msg : gs.getMessage(\\\"Closed\\\"));\\n\\t\\t\\t\\trfc.close_notes =\\tnotes;\\n\\t\\t\\t\\tchgReq.close();\\n\\t\\t\\t\\trfc.update();\\n\\t\\t\\t}\\n\\t\\t\\tif (!pm.isActive('com.snc.best_practice.problem.madrid.state_model'))\\n\\t\\t\\t\\tcloseRelatedGivenChange(rfc, msg);\\n\\t\\t}\\n\\t}\\n}\\n\\n// Find related problems for a change_request and close them\\nfunction closeRelatedGivenChange(me, msg) {\\n\\tvar problems = new GlideRecord('problem');\\n\\tproblems.addQuery('rfc', '=', me.sys_id);\\n\\tproblems.query();\\n\\twhile (problems.next()) {\\n\\t\\tproblems.problem_state.setValue(4);\\n\\t\\tvar notes = problems.close_notes.getDisplayValue();\\n\\t\\tnotes = notes + '\\\\n' + msg;\\n\\t\\tproblems.close_notes.setValue(notes);\\n\\t\\tproblems.update();\\n\\t}\\n}\\n\\n// Post all entries in the Definitive Software Library\\nfunction postDSL(me) {\\n\\tvar relatedCI = new GlideRecord('release_cis');\\n\\trelatedCI.addQuery('release', '=', me.sys_id);\\n\\trelatedCI.query();\\n\\twhile (relatedCI.next()) {\\n\\t\\tgs.print(\\\"updating using ci \\\"+relatedCI.ci_item);\\n\\t\\tpostDSLGivenCI(relatedCI.ci_item, me.sys_id);\\n\\t}\\n\\tvar features = new GlideRecord('release_feature');\\n\\tfeatures.addQuery('release', '=', me.sys_id);\\n\\tfeatures.query();\\n\\twhile (features.next()) {\\n\\t\\tpostDSLGivenFeature(features, me.sys_id);\\n\\t}\\n}\\n\\nfunction postDSLGivenFeature(me, release) {\\n\\tif (!me.rfc.isNil()) {\\n\\t\\tvar rfc = new GlideRecord('change_request');\\n\\t\\tif (rfc.get('sys_id', me.rfc)) {\\n\\t\\t\\tif (!rfc.cmdb_ci.isNil()) {\\n\\t\\t\\t\\tpostDSLGivenCI(rfc.cmdb_ci, release);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\\n\\n\\n// Post all entries in the Definitive Software Library\\nfunction postDSLGivenCI(ciID, release) {\\n\\tvar cmdbci = new GlideRecord('cmdb_ci');\\n\\tif (cmdbci.get('sys_id', ciID)) {\\n\\t\\tvar dsl = new GlideRecord('dsl');\\n\\t\\tdsl.addQuery('ci', '=', cmdbci.sys_id);\\n\\t\\tdsl.query();\\n\\t\\twhile (dsl.next()) {\\n\\t\\t\\tdsl.pending = release;\\n\\t\\t\\tdsl.pending_date = gs.now();\\n\\t\\t\\tdsl.update();\\n\\t\\t}\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"SNC Release Complete\"\n}```"}
{"prompt":"{\"prompt\":\"POL-Deactivate Connect Chat, Live Feed \",\"table\":\"sys_properties\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tvar before = gs.getSession().getWorkflow();\\n\\t\\tgs.getSession().setWorkflow(false);\\n\\n\\t\\tvar sys_app_modules = ['15f443a09f1202005cec3b8eb42e709e',\\n\\t\\t\\t\\t'1c11d5c2d73321002ae9602b6e610386',\\n\\t\\t\\t\\t'284a3882d73321002ae9602b6e6103fc',\\n\\t\\t\\t\\t'2d8b26519f311200d5f9b3e2957fcfbb',\\n\\t\\t\\t\\t'415fba209f1202005cec3b8eb42e70a5',\\n\\t\\t\\t\\t'4b57d042d73321002ae9602b6e610323',\\n\\t\\t\\t\\t'51373f5a0a0007ab00ec9a8f947671fc',\\n\\t\\t\\t\\t'58cd9a330a0005796b4390256641ece3',\\n\\t\\t\\t\\t'615069670a0006b922fe597987e82efc',\\n\\t\\t\\t\\t'66228b609f1202005cec3b8eb42e7054',\\n\\t\\t\\t\\t'8679136a0a0007dc002b1fef701266a9',\\n\\t\\t\\t\\t'8a862f2cc0a8016600ce14a88134b4d1',\\n\\t\\t\\t\\t'92c9dc950a00075d6599723f9a998387',\\n\\t\\t\\t\\t'9e7443a09f1202005cec3b8eb42e7012',\\n\\t\\t\\t\\t'a3affc3fc0a8018b000dad82a7c9f24d',\\n\\t\\t\\t\\t'a70bb4919f301200d5f9b3e2957fcf6c',\\n\\t\\t\\t\\t'b76799acc0a8018c008ac85c98a67811',\\n\\t\\t\\t\\t'bb430c2fa9fea57800871ccf2016066e',\\n\\t\\t\\t\\t'bb4f6bd1a9fea57800d8aea3da297a69',\\n\\t\\t\\t\\t'be3567c4c0a80a6952d6a69749a2763f',\\n\\t\\t\\t\\t'db6c9d31a9fea578002fe8f00a643a98',\\n\\t\\t\\t\\t'e6c0a6619f311200d5f9b3e2957fcfcb',\\n\\t\\t\\t\\t'7031c3609f1202005cec3b8eb42e7014',\\n\\t\\t\\t\\t'308107609f1202005cec3b8eb42e7032',\\n\\t\\t\\t\\t'4cc147609f1202005cec3b8eb42e7005',\\n\\t\\t\\t\\t'a35303a09f1202005cec3b8eb42e703b',\\n\\t\\t\\t\\t'0ee1d505731313009ecc234ffff6a7b0',\\n\\t\\t\\t\\t'c2a599519f301200d5f9b3e2957fcf58'\\n\\t\\t];\\n\\n\\n\\t\\tvar notifications = ['1498b7489f232100d5f9b3e2957fcf79',\\n\\t\\t\\t\\t'38c4a3725331020023c817aaedc587c3',\\n\\t\\t\\t\\t'e13bd3b29f132100d5f9b3e2957fcf53',\\n\\t\\t\\t\\t'121d4e84475221007f47563dbb9a717e',\\n\\t\\t\\t\\t'43ee08f30a0007dc403e7cb3f53e62dc',\\n\\t\\t\\t\\t'5067f52bc32321006f333b0ac3d3ae9f',\\n\\t\\t\\t\\t'58603bddc0a80a6d1493a3def49f617e',\\n\\t\\t\\t\\t'58b730b5c0a80a6d1884eee9e424805d',\\n\\t\\t\\t\\t'61c96c68c0a80a6d03e549d84a851989',\\n\\t\\t\\t\\t'61ca2603c0a80a6d1375097afbdec072',\\n\\t\\t\\t\\t'6b55961dff220000dadaebcfebffad87',\\n\\t\\t\\t\\t'6dbbb92bc32321006f333b0ac3d3ae0c',\\n\\t\\t\\t\\t'8165f762472321007f47563dbb9a71cc',\\n\\t\\t\\t\\t'870a392bc32321006f333b0ac3d3aeca',\\n\\t\\t\\t\\t'8aeab92bc32321006f333b0ac3d3ae19',\\n\\t\\t\\t\\t'8e29792bc32321006f333b0ac3d3ae1d',\\n\\t\\t\\t\\t'96cc2a6fc0a8016940e4c44597063fa8',\\n\\t\\t\\t\\t'9c5b626b0a0006b87689318c4cf98fea',\\n\\t\\t\\t\\t'9c7dfbd60a0006b812cf1d9a329b52e5',\\n\\t\\t\\t\\t'9c85dd040a0006b81762add42003478b',\\n\\t\\t\\t\\t'a236daccc0a801696edfdec2dee9227d',\\n\\t\\t\\t\\t'a2ac52380a0006b835ae0cdcd6a50ecb',\\n\\t\\t\\t\\t'b4e3fde7c32321006f333b0ac3d3aeea',\\n\\t\\t\\t\\t'c0e062880a0006b801a7a72fd96e0729',\\n\\t\\t\\t\\t'c0e5abe40a0006b841ff506b9af96e91',\\n\\t\\t\\t\\t'c5ecb92bc32321006f333b0ac3d3aea4',\\n\\t\\t\\t\\t'cc2e69e7c32321006f333b0ac3d3ae62',\\n\\t\\t\\t\\t'e928f52bc32321006f333b0ac3d3aefb'\\n\\t\\t];\\n\\n\\n\\t\\t//The modules must be INactive only when Polaris is ON.\\n\\t\\tvar active = current.getValue('value') == 'false';\\n\\n\\t//Application Modules\\n\\t\\tvar gr = new GlideRecord('sys_app_module');\\n\\t\\tgr.addQuery('sys_id', sys_app_modules);\\n\\t\\tgr.query();\\n\\t\\tgr.setValue('active', active);\\n\\t\\tgr.updateMultiple();\\n\\n\\t\\t//Notifications\\n\\t\\tvar notif_gr = new GlideRecord('sysevent_email_action');\\n\\t\\tnotif_gr.addQuery('sys_id', notifications);\\n\\t\\tnotif_gr.query();\\n\\t\\tnotif_gr.setValue('active', active);\\n\\t\\tnotif_gr.updateMultiple();\\n\\n\\tgs.getSession().setWorkflow(before);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=glide.ui.polaris.experience^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"POL-Deactivate Connect Chat, Live Feed \"\n}```"}
{"prompt":"{\"prompt\":\"Set SHN Notification Title\",\"table\":\"sn_shn_configuration\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_shn_configuration\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t//Change the notification_title to HR specific title if the table is an HR table\\n\\tvar HR_NOTIFICATION_TITLE = \\\"important_notes\\\";\\n\\tvar DEFAULT_NOTIFICATION_TITLE = \\\"special_handling_notes\\\";\\n\\t\\n\\tvar tables = new GlideTableHierarchy(hr.TABLE_CASE).getAllExtensions();\\n\\t\\n\\tif (tables.indexOf(current.getValue(\\\"table_name\\\")) > -1)\\n\\t\\tcurrent.notification_title = HR_NOTIFICATION_TITLE;\\n\\telse\\n\\t\\tcurrent.notification_title = DEFAULT_NOTIFICATION_TITLE;\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set SHN Notification Title\"\n}```"}
{"prompt":"{\"prompt\":\"When insert populate name if empty\",\"table\":\"cxs_res_context_config\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cxs_res_context_config\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif(current.name.nil())\\n\\t\\tcurrent.name = current.cxs_search_res_config.name;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"nameISEMPTY^EQ\",\n\t\"condition\": \"current.name.nil()\",\n\t\"name\": \"When insert populate name if empty\"\n}```"}
{"prompt":"{\"prompt\":\"Apply Template (before)\",\"table\":\"sn_hr_core_task\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"300\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\tnew sn_hr_core.hr_TemplateUtils().applyBefore(current.template, current);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.template_invoked && current.template.changes() && !current.template.nil() && current.template.active\",\n\t\"name\": \"Apply Template (before)\"\n}```"}
{"prompt":"{\"prompt\":\"Copy Solution Statistics Values\",\"table\":\"ml_class\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ml_class\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t/*\\n\\tThis Business Rule copies (user overridden) precision/coverage values from previous active solution to new solution after training is complete.\\n\\t*/\\n\\tvar copySolutionStatistics = new CopySolutionStatistics();\\n\\tcopySolutionStatistics.copyStatistics(current);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"pc_lookupVALCHANGES^sys_mod_count<2^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Copy Solution Statistics Values\"\n}```"}
{"prompt":"{\"prompt\":\"Dot Walking Safety\",\"table\":\"sys_script\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_script\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var template = current.template;\\nvar sameasIndex = template.indexOf(\\\"SAMEAS\\\");\\nvar dotIndex = template.indexOf(\\\"...\\\");\\nwhile (dotIndex >= 0 && sameasIndex >= 0) {\\n\\tvar subStr = template.substring(sameasIndex, dotIndex);\\n\\tif (subStr.indexOf(\\\"^\\\") < 0) {\\n\\t\\tcurrent.template.setError(\\\"Invalid value for 'Set field values'\\\");\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tbreak;\\n\\t}\\n\\telse {\\n\\t\\tif (sameasIndex < dotIndex)\\n\\t\\t\\tsameasIndex = template.indexOf(\\\"SAMEAS\\\", sameasIndex + 6);\\n\\t\\telse\\n\\t\\t\\tdotIndex = template.indexOf(\\\"...\\\", dotIndex + 3);\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Dot Walking Safety\"\n}```"}
{"prompt":"{\"prompt\":\"Validate parent's operational state\",\"table\":\"service_offering\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"service_offering\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar gcl = new GlideChoiceList();\\n\\tvar choiceList = gcl.getChoiceList('cmdb_ci_service', 'service_status');\\n\\tvar opLabel = choiceList.getChoice('operational').getLabel();\\n\\t\\n\\tgs.addErrorMessage(gs.getMessage('The parent service is not in {0} state, this offering cannot be made {1}.', [opLabel, current.getDisplayValue('service_status')]));\\n\\tcurrent.setAbortAction(true);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"service_status=operational^parent.service_status!=operational^EQ\",\n\t\"condition\": \"(new global.SPMUtilsFactory().getUtils().isServicePublished(current))\",\n\t\"name\": \"Validate parent's operational state\"\n}```"}
{"prompt":"{\"prompt\":\"No independent rule with allow fallback\",\"table\":\"cmdb_identifier_entry\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_identifier_entry\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.identifier.independent) {\\n\\tgs.addInfoMessage(gs.getMessage(\\\"Allow fallback to parent not allowed for independent rules!\\\"));\\n\\tcurrent.setAbortAction(true);\\n}\\n\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"allow_fallback=true^identifierISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"No independent rule with allow fallback\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent duplicates\",\"table\":\"em_suggested_relation_type\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"em_suggested_relation_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"50\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\tvar gr = new GlideRecord('em_suggested_relation_type');\\n\\t\\tgr.addQuery(\\\"relationship\\\", current.relationship);\\n\\t\\tgr.addQuery(\\\"base_class\\\", current.base_class);\\n\\t\\tgr.addQuery(\\\"dependent_class\\\", current.dependent_class);\\n\\tgr.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.sys_id);\\n\\t\\tgr.setLimit(1);\\n\\t\\tgr.query();\\n\\tif (gr.next()) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"A record with these values already exists\\\"));\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent duplicates\"\n}```"}
{"prompt":"{\"prompt\":\"Check Domains\",\"table\":\"service_out_scope\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"service_out_scope\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"90\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!(new global.SPMDomainUtils().isInSameDomain(current.service_scope.getRefRecord(), current.cmdb_ci_service.getRefRecord()))\",\n\t\"name\": \"Check Domains\"\n}```"}
{"prompt":"{\"prompt\":\"Default schedule job to workspace job\",\"table\":\"sn_itam_recomm_dashboard\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_itam_recomm_dashboard\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\tcurrent.job = current.workspace.job;\\n}(current, previous));\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"jobISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Default schedule job to workspace job\"\n}```"}
{"prompt":"{\"prompt\":\"Text Index remove stop word family\",\"table\":\"ts_index_stop\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ts_index_stop\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\tif (!gs.nil(current.index))\\n\\t\\tnew GlideTSUtil().removeFamilyForStopWord(current.word, current.index);\\n\\telse if (!gs.nil(current.ts_configuration)) {\\n\\t\\tvar gr = new GlideRecord('ts_index_name');\\n\\t\\tgr.addQuery('table', current.ts_configuration.table);\\n\\t\\tgr.query();\\n\\t\\tif (gr.next())\\n\\t\\t\\tnew GlideTSUtil().removeFamilyForStopWord(current.word, gr.getUniqueValue());\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"stop_mode=2^ORstop_mode=3^EQ\",\n\t\"condition\": \"current != null && !gs.nil(current.word) && (!gs.nil(current.index) || !gs.nil(current.ts_configuration))\",\n\t\"name\": \"Text Index remove stop word family\"\n}```"}
{"prompt":"{\"prompt\":\"Process MID Extension input\",\"table\":\"ecc_queue\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_queue\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"1000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/**\\n * 1) This business rule will parse the payload for the ContextSysId probe parameter\\n * 2) From this ContextSysId, it will look up the MID Extension context GlideRecord\\n * 3) From this, it will look up the MID Extension definition GlideRecord\\n * 4) If this definition has a script, it will be evaluated\\n */\\n(function() {\\n\\t//guilty until proven innocent\\n\\tcurrent.state = 'error';\\n\\t\\n\\t//grab the ContextSysId from the probe parameter\\n\\tif (JSUtil.nil(current.payload)) {\\n\\t\\tcurrent.error_string = 'MID Extension input ecc_queue ' + current.sys_id + ' has no payload to process.\\tSkipping.';\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\tvar parser = new ECCPayloadParser(current.payload);\\n\\tvar params = parser.getParameters();\\n\\t\\n\\tif (JSUtil.nil(params.ContextSysId)) {\\n\\t\\tcurrent.error_string = 'No MID Extension context detected in payload.';\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\t//get the Extension context GlideRecord\\n\\tvar contextGr = new GlideRecord(MIDExtensionConstants.CONTEXT_TABLE);\\n\\tif (!contextGr.get(params.ContextSysId)) {\\n\\t\\tcurrent.error_string = 'No such MID Extension context exists with sys_id=' + params.ContextSysId;\\n\\t\\treturn;\\n\\t}\\n\\n\\t// if command is clear error, update the context\\n\\tvar cmd = params.ExtensionCommand;\\n\\tif (JSUtil.notNil(cmd) && (cmd == MIDExtensionConstants.COMMAND_CLEAR_ERROR)) {\\n\\t\\tcontextGr.status = MIDExtensionConstants.CONTEXT_STATUS_STARTED;\\n\\t\\tcontextGr.error_message = '';\\n\\t\\tcontextGr.update();\\n\\t\\tcurrent.state = 'processed';\\n\\t\\treturn;\\n\\t}\\n\\n\\t//get the Extension definition GlideRecord from the context\\n\\tvar extensionDefGr = new GlideRecord(MIDExtensionConstants.EXTENSION_DEF_TABLE);\\n\\tif (!extensionDefGr.get(contextGr.extension)) {\\n\\t\\tcurrent.error_string = 'No such MID Extension definition exists with sys_id=' + contextGr.extension;\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\t//at this point, the input is valid\\n\\tcurrent.state = 'processed';\\n\\t\\n\\tvar script = extensionDefGr.getValue('script');\\n\\t\\n\\tif (JSUtil.nil(script))\\t\\t//SNMP Trap listener does not have script\\n\\t\\treturn;\\n\\t\\n\\ttry {\\n\\t\\tvar func = eval('(' + script+ ')');\\n\\t\\tfunc(current, params);\\n\\t} catch (ex) {\\n\\t\\tcurrent.state = 'error';\\n\\t\\tcurrent.error_string = '' + ex.message;\\n\\t}\\n}());\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"topicSTARTSWITHMIDExtension^queue=input^state=ready^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Process MID Extension input\"\n}```"}
{"prompt":"{\"prompt\":\"Set g_scratchpad properties\",\"table\":\"alm_stock_rule\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"alm_stock_rule\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tg_scratchpad.isPluginActiveProcurement = GlidePluginManager.isActive('com.snc.procurement');\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set g_scratchpad properties\"\n}```"}
{"prompt":"{\"prompt\":\"Add update set id\",\"table\":\"sys_remote_update_set\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_remote_update_set\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tg_scratchpad.update_set_id = current.update_set;\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Add update set id\"\n}```"}
{"prompt":"{\"prompt\":\"Cancel Flow on delete\",\"table\":\"task_sla\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"task_sla\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tnew TaskSLAFlow(current).cancel();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"active=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Cancel Flow on delete\"\n}```"}
{"prompt":"{\"prompt\":\"Delete business service preferences\",\"table\":\"sys_user\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_user\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\t //This function will be automatically called when this rule is processed.\\n\\tvar gr = new GlideRecord(\\\"sa_business_service_user_prefs\\\");\\n\\tgr.addQuery(\\\"user\\\", current.getUniqueValue);\\n\\tgr.query();\\n\\tgr.deleteMultiple();\\n\\t \\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete business service preferences\"\n}```"}
{"prompt":"{\"prompt\":\"Invalid selected MID error msg\",\"table\":\"sys_data_source\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_data_source\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (current.mid_server.validated == 'false')\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Selected MID server has not been validated and may not function as a data source\\\"));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"mid_serverISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Invalid selected MID error msg\"\n}```"}
{"prompt":"{\"prompt\":\"Promoted Topic Limit\",\"table\":\"sys_cs_context_profile_promotion\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cs_context_profile_promotion\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar gr = new GlideRecord(\\\"sys_cs_context_profile_promotion\\\");\\n\\tgr.addQuery(\\\"context_profile\\\", current.getValue(\\\"context_profile\\\"));\\n\\tgr.query();\\n\\treturn gr.getRowCount() < 6;\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"new global.CustomChatExperienceScripts().getPromotedTopicCount(current.getValue(\\\"context_profile\\\")) >= 6;\",\n\t\"name\": \"Promoted Topic Limit\"\n}```"}
{"prompt":"{\"prompt\":\"Clear error on re-activation\",\"table\":\"sys_query_rewrite\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_query_rewrite\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"400\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\tcurrent.error = \\\"\\\";\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.active.changesTo(true) && !current.error.nil()\",\n\t\"name\": \"Clear error on re-activation\"\n}```"}
{"prompt":"{\"prompt\":\"Change Phase Events\",\"table\":\"change_phase\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_phase\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.approval.changesTo('approved')) {\\r\\n\\tgs.eventQueue(\\\"task.approved\\\", current, current.approval, previous.approval);\\r\\n\\tupdateChange(current, 'Phase ' + current.name.getDisplayValue()+\\\" has been approved\\\");\\r\\n\\tactivateNextPhase(current, true);\\r\\n} else if (current.state.changesTo(3)) {\\r\\n\\tactivateNextPhase(current, false);\\r\\n}\\r\\n\\r\\nif (current.approval.changesTo('rejected')) {\\r\\n\\tgs.eventQueue(\\\"task.rejected\\\", current, current.approval, previous.approval);\\r\\n\\tupdateChange(current, 'Phase ' + current.name.getDisplayValue()+\\\" has been rejected\\\");\\r\\n\\tsetChangeState(current, 'rejected');\\r\\n}\\r\\n\\r\\nfunction updateChange(me, journal) {\\t\\r\\n\\tvar friends = new GlideRecord('change_request');\\r\\n\\tfriends.addQuery('sys_id', me.change);\\r\\n\\tfriends.query();\\r\\n\\twhile(friends.next()) {\\t\\t\\t \\r\\n\\t\\t friends.approval_history.setJournalEntry(journal);\\r\\n\\t\\t friends.update();\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfunction updateChangePhase(me, phase) {\\t\\r\\n\\tvar journal = 'Phase '+phase+' has been activated';\\r\\n\\tvar friends = new GlideRecord('change_request');\\r\\n\\tfriends.addQuery('sys_id', me.change);\\r\\n\\tfriends.query();\\r\\n\\twhile(friends.next()) {\\t\\t \\r\\n\\t\\t friends.approval_history.setJournalEntry(journal);\\r\\n\\t\\t friends.phase = phase;\\r\\n\\t\\t friends.update();\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfunction setChangeState(me, state) {\\r\\n\\tvar change = new GlideRecord('change_request');\\r\\n\\tchange.addQuery('sys_id', me.change);\\r\\n\\tchange.query();\\r\\n\\twhile(change.next()) {\\t\\t\\r\\n\\t\\t change.approval\\t= state;\\t\\t\\t\\r\\n\\t\\t change.update();\\r\\n\\t}\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nfunction activateNextPhase(me, setRequested) {\\r\\n\\tvar grNext = new GlideRecord('change_phase');\\r\\n\\tgrNext.addQuery('order', '>', me.order);\\r\\n\\tgrNext.addQuery('change', '=', me.change);\\r\\n\\tgrNext.orderBy('order');\\r\\n\\tgrNext.query();\\r\\n\\tif (grNext.next()) {\\r\\n\\t\\t if (grNext.active == false) {\\r\\n\\t\\t\\t\\tgrNext.active.setValue(true);\\r\\n\\t\\t }\\r\\n\\t\\t grNext.actual_start_date.setValue(gs.nowDateTime());\\r\\n\\t\\t grNext.state.setValue(2);\\r\\n\\t\\t if (setRequested == true) {\\r\\n\\t\\t\\t\\t\\t if (grNext.auto_request == true) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t if (grNext.approval == 'not requested')\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t grNext.approval.setValue('requested');\\r\\n\\t\\t\\t\\t\\t }\\r\\n\\t\\t }\\r\\n\\t\\t grNext.update();\\r\\n\\t\\t updateChangePhase(me, grNext.name);\\t\\t\\t\\t\\r\\n\\t} \\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Change Phase Events\"\n}```"}
{"prompt":"{\"prompt\":\"Validate BSM Maximum amount of results d\",\"table\":\"sys_properties\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// Ensure that the new node value is valid (>= 1)\\nvar nodeValue = current.value;\\n\\nif (nodeValue === '' || isNaN(nodeValue)) {\\n\\tnodeValue = 10; // use current default\\n\\tgs.addInfoMessage(gs.getMessage(\\\"Invalid Maximum amount of results displayed when searching for CIs, replaced with default of 10\\\"));\\n} else if (nodeValue < 1) {\\n\\tnodeValue = 1;\\n\\tgs.addInfoMessage(gs.getMessage(\\\"Maximum amount of results displayed when searching for CIs value cannot be less than 1; replaced with 1\\\"));\\n}\\n\\ncurrent.value = String(parseInt(nodeValue));\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.name == \\\"glide.ngbsm.search_ci_limit\\\"\",\n\t\"name\": \"Validate BSM Maximum amount of results d\"\n}```"}
{"prompt":"{\"prompt\":\"Table Rotation - Enforce Base\",\"table\":\"sys_table_rotation\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_table_rotation\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"current.setAbortAction(true);\\nif (!gs.tableExists(current.name))\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Table does not exist: {0}\\\", current.name));\\nelse if ((/[0-9]$/).test(current.name))\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Table name cannot end with a number\\\"));\\nelse if (gs.isDatabaseView(current.name))\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Table is a Database View which cannot be rotated or extended: {0}\\\", current.name));\\nelse\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Only base tables can be setup for rotation - the base table for {0} is {1}\\\",[current.name, GlideDBObjectManager.get().getAbsoluteBase(current.name)]));\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!gs.tableExists(current.name) || (/[0-9]$/).test(current.name) || gs.isDatabaseView(current.name) || new GlideDBObjectManager.get().getAbsoluteBase(current.name) != current.name\",\n\t\"name\": \"Table Rotation - Enforce Base\"\n}```"}
{"prompt":"{\"prompt\":\"Change Phase Events Before\",\"table\":\"change_phase\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_phase\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"\\tif (current.order.isNil() ||\\tcurrent.order == 100) {\\t\\r\\n\\t\\t\\tvar phases = current.name.getChoices(null);\\r\\n\\t\\t\\tvar order = 100; \\r\\n\\t\\t\\tvar name = current.name.toString();\\r\\n\\t\\t\\tfor (var i = 0; i < phases.size(); i++) {\\r\\n\\t\\t\\t\\t var phase = phases.get(i);\\r\\n\\t\\t\\t\\t if (name == phase)\\r\\n\\t\\t\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\t\\t order += 100;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\tcurrent.order.setValue(order);\\r\\n\\t}\\r\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Change Phase Events Before\"\n}```"}
{"prompt":"{\"prompt\":\"Create Suggestion Reader Groups\",\"table\":\"sys_search_context_config\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_search_context_config\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\tif (current.operation() === \\\"insert\\\") {\\n\\t\\tnew SuggestionReaderGroupUtils().createSuggestionReaderGroupsIfNeeded(current.sys_id, current.name);\\n\\t}\\n\\tif (current.operation() === \\\"update\\\") {\\n\\t\\tif (current.search_engine == \\\"ai_search\\\" && previous.search_engine == \\\"zing\\\") {\\n\\t\\t\\tnew SuggestionReaderGroupUtils().createSuggestionReaderGroupsIfNeeded(current.sys_id, current.name);\\n\\t\\t}\\n\\t}\\n\\treturn;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Create Suggestion Reader Groups\"\n}```"}
{"prompt":"{\"prompt\":\"Abort ratings insert when out of bounds \",\"table\":\"kb_feedback\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"kb_feedback\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"ratingISNOTEMPTY^rating>5^ORrating<1^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Abort ratings insert when out of bounds \"\n}```"}
{"prompt":"{\"prompt\":\"Update rule and profile state\",\"table\":\"ais_rule_action\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ais_rule_action\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// Set related search profile to DRAFT when a rule is added, edited or deleted\\nif (shouldChangeState() && current.state != \\\"NEW\\\") {\\n\\t\\tcurrent.state = \\\"DRAFT\\\";\\n\\t\\tsetRuleAndProfileToDraft();\\n} else if (current.state == \\\"NEW\\\") {\\n\\t\\tsetRuleAndProfileToDraft();\\n}\\n\\n\\nfunction setRuleAndProfileToDraft() {\\n\\n\\t\\tvar profileid = \\\"\\\";\\n\\t\\tvar ruleGR = new GlideRecord('ais_rule');\\n\\t\\tif (ruleGR.get(current.rule)) {\\n\\t\\t\\t\\t// Check Expired Rule\\n\\t\\t\\t\\tif (ruleGR.state == \\\"EXPIRED\\\")\\n\\t\\t\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t\\tprofileid = ruleGR.profile;\\n\\t\\t\\t\\truleGR.state = \\\"DRAFT\\\";\\n\\t\\t\\t\\truleGR.update();\\n\\t\\t}\\n\\n\\t\\tvar profileGR = new GlideRecord('ais_search_profile');\\n\\t\\tif (profileGR.get(profileid)) {\\n\\t\\t\\t\\tprofileGR.state = 'DRAFT';\\n\\t\\t\\t\\tprofileGR.update();\\n\\t\\t}\\n}\\n\\nfunction shouldChangeState() {\\n\\t\\treturn (current.state != \\\"NEW\\\" && (current.active.changes() ||\\n\\t\\t\\t\\tcurrent.type.changes() ||\\n\\t\\t\\t\\tcurrent.order.changes() ||\\n\\t\\t\\t\\tcurrent.promote_doc.changes() ||\\n\\t\\t\\t\\tcurrent.block_doc.changes() ||\\n\\t\\t\\t\\tcurrent.boost_number.changes() ||\\n\\t\\t\\t\\tcurrent.boost_field_name.changes() ||\\n\\t\\t\\t\\tcurrent.boost_value.changes() ||\\n\\t\\t\\t\\tcurrent.boost_context_field.changes() ||\\n\\t\\t\\t\\tcurrent.marked_for_deletion.changes()));\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update rule and profile state\"\n}```"}
{"prompt":"{\"prompt\":\"Update par_dashboard name\",\"table\":\"sys_ux_app_route\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ux_app_route\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar appRouteSysId = current.sys_id;\\n\\tvar dashboardName = current.name;\\n\\tvar appConfig = current.app_config;\\n\\tvar screenType = current.screen_type;\\n\\n\\t// if is a route from the advanced dashboard experience\\n\\tif (appConfig == '02dc36706f01011089060168e25b3691') {\\n\\t\\t// is an advanced dashboard\\n\\t\\tvar gr = new GlideRecord('sys_ux_screen');\\n\\t\\tgr.addQuery('screen_type', screenType);\\n\\t\\tgr.query();\\n\\t\\tif (gr.next()){\\t\\n\\t\\t\\t// update dashboard name in par_dashboard table\\n\\t\\t\\tvar grDashboard = new GlideRecord('par_dashboard');\\n\\t\\t\\tgrDashboard.addQuery('sys_ux_macroponent', gr.macroponent);\\n\\t\\t\\tgrDashboard.query();\\n\\t\\t\\tif (grDashboard.next()) {\\n\\t\\t\\t\\t// update the dashboard name\\n\\t\\t\\t\\tgrDashboard.setValue('name',dashboardName);\\n\\t\\t\\t\\tgrDashboard.update();\\t\\t\\t\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update par_dashboard name\"\n}```"}
{"prompt":"{\"prompt\":\"Update fields on Re-analyzing a Problem\",\"table\":\"problem\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"problem\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"110\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tif (current.state.changesFrom(ProblemState.STATES.RESOLVED) || current.state.changesFrom(ProblemState.STATES.CLOSED)){\\n\\t\\tcurrent.reopened_at = new GlideDateTime();\\n\\t\\tcurrent.reopened_by = gs.getUserID();\\n\\t\\tcurrent.reopen_count = current.reopen_count + 1;\\n\\n\\t\\tcurrent.setValue(\\\"closed_at\\\", \\\"\\\");\\n\\t\\tcurrent.setValue(\\\"closed_by\\\", \\\"\\\");\\n\\t\\tcurrent.setValue(\\\"resolved_at\\\", \\\"\\\");\\n\\t\\tcurrent.setValue(\\\"resolved_by\\\", \\\"\\\");\\n\\t\\tcurrent.setValue(\\\"close_notes\\\", \\\"\\\");\\n\\t\\tcurrent.setValue(\\\"resolution_code\\\", \\\"\\\");\\n\\t}\\n\\t\\n\\tcurrent.setValue(\\\"fix_at\\\",\\\"\\\");\\n\\tcurrent.setValue(\\\"fix_by\\\",\\\"\\\");\\n\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"stateCHANGESFROM107^ORstateCHANGESFROM106^ORstateCHANGESFROM104^stateCHANGESTO103^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Update fields on Re-analyzing a Problem\"\n}```"}
{"prompt":"{\"prompt\":\"Clear CI when \\\"CI Type\\\" is the scope\",\"table\":\"sa_traffic_based_rules\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sa_traffic_based_rules\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\t //This function will be automatically called when this rule is processed.\\n\\t \\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"rule_scope=CI Type^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear CI when \\\"CI Type\\\" is the scope\"\n}```"}
{"prompt":"{\"prompt\":\"Table Rotation - Enforce Duration\",\"table\":\"sys_table_rotation\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_table_rotation\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"10\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.addErrorMessage(gs.getMessage(\\\"Duration cannot be empty\\\"));\\ncurrent.setAbortAction(true);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.getValue('type') == 'rotate' && current.duration.nil()\",\n\t\"name\": \"Table Rotation - Enforce Duration\"\n}```"}
{"prompt":"{\"prompt\":\"Trigger Auto Discovery\",\"table\":\"change_request\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"300\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tnew ChangeRequestDiscovery().triggerDiscovery(current.getUniqueValue(), false);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"stateVALCHANGES^EQ\",\n\t\"condition\": \"new ChangeRequestDiscovery().canAutoTriggerDiscovery(current.getUniqueValue())\",\n\t\"name\": \"Trigger Auto Discovery\"\n}```"}
{"prompt":"{\"prompt\":\"Create Images and properties\",\"table\":\"sys_cs_provider_application\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cs_provider_application\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar shouldCreateRecrods = gs.getProperty('sn_va_slack.enable_slack_branding', 'false') == 'true';\\n\\t\\tif (shouldCreateRecrods && GlidePluginManager.isActive('sn_va_slack')) {\\n\\t\\t\\t\\tvar slackBotConfig = new SlackBotConfig();\\n\\t\\t\\t\\tvar inboundId = slackBotConfig.getInboundId(current.message_auth);\\n\\t\\t\\t\\tif (slackBotConfig.isProductionBot(inboundId)) {\\n\\n\\t\\t\\t\\t\\t\\tvar gr = new GlideRecord(\\\"sys_cs_custom_adapter_property\\\");\\n\\t\\t\\t\\t\\t\\tgr.initialize();\\n\\t\\t\\t\\t\\t\\tgr.setValue('name', 'bot_name');\\n\\t\\t\\t\\t\\t\\tgr.setValue('document_record', current.getUniqueValue());\\n\\t\\t\\t\\t\\t\\tgr.setValue('document_table', 'sys_cs_provider_application');\\n\\t\\t\\t\\t\\t\\tgr.insert();\\n\\n\\t\\t\\t\\t\\t\\tvar gr1 = new GlideRecord('sys_cs_custom_adapter_property');\\n\\t\\t\\t\\t\\t\\tgr1.initialize();\\n\\t\\t\\t\\t\\t\\tgr1.setValue('name', 'bot_icon');\\n\\t\\t\\t\\t\\t\\tgr1.setValue('document_record', current.getUniqueValue());\\n\\t\\t\\t\\t\\t\\tgr1.setValue('document_table', 'sys_cs_provider_application');\\n\\t\\t\\t\\t\\t\\tgr1.insert();\\n\\n\\t\\t\\t\\t\\t\\tvar imgName = 'slack_' + current.getUniqueValue() + '.png';\\n\\t\\t\\t\\t\\t\\tvar gr2 = new GlideRecord('db_image');\\n\\t\\t\\t\\t\\t\\tgr2.initialize();\\n\\t\\t\\t\\t\\t\\tgr2.setValue('name', imgName);\\n\\t\\t\\t\\t\\t\\tgr2.insert();\\n\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"providerLIKESlack^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Create Images and properties\"\n}```"}
{"prompt":"{\"prompt\":\"On Delete - Delete Schedule\",\"table\":\"subnet_accel_run\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"subnet_accel_run\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar scheduleSysId = current.schedule + '';\\n\\tvar scheduleGlideRecord = new GlideRecord('sysauto_script');\\n\\n\\tscheduleGlideRecord.get(scheduleSysId);\\n\\tscheduleGlideRecord.deleteRecord();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"On Delete - Delete Schedule\"\n}```"}
{"prompt":"{\"prompt\":\"Calculate Parent Weight 2\",\"table\":\"gsw_content\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"gsw_content\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (current.parent.changes()) {\\n\\t\\tif (previous.parent) {\\n\\t\\t\\tnew GuidedSetupUtilSNC().updateParentWeight(previous.parent);\\n\\t\\t}\\n\\t\\tif (current.parent) {\\n\\t\\t\\tnew GuidedSetupUtilSNC().updateParentWeight(current.parent);\\n\\t\\t}\\n\\t} else if (current.weight.changes()) {\\n\\t\\tnew GuidedSetupUtilSNC().updateParentWeight(current.parent);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Calculate Parent Weight 2\"\n}```"}
{"prompt":"{\"prompt\":\"Show status 'requested' message\",\"table\":\"sn_hr_core_bulk_case_request\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_bulk_case_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tgs.addInfoMessageNoSanitization(gs.getMessage('Bulk case request added to process queue. <a title=\\\"Click here to view bulk case request list.\\\" href=\\\"/sn_hr_core_bulk_case_request_list.do\\\" rel=\\\"nofollow\\\">Click here</a> for list view.'));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"statusCHANGESTOrequested^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Show status 'requested' message\"\n}```"}
{"prompt":"{\"prompt\":\"Question limit for user\",\"table\":\"kb_social_qa_question\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"kb_social_qa_question\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"10\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\tvar canCreate = new global.GlobalKnowledgeUtil().canCreate(current.getTableName(),'sn_kb_social_qa.max_questions_per_user_daily','Social QandA questions');\\n\\t\\tif (!canCreate)\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\t\\t\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Question limit for user\"\n}```"}
{"prompt":"{\"prompt\":\"Verify mid script name is valid\",\"table\":\"em_connector_push\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"em_connector_push\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.type == 1) { //instance type\\n\\t\\tif (current.source == \\\"\\\" && current.header_name == \\\"\\\") {\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Cannot save. Specify 'Source' and/or 'Header name' fields\\\"));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t} else { //mid type\\n\\t\\tvar scriptName = current.mid_server_script_include.name;\\n\\t\\tif (!scriptName.startsWith(\\\"TransformEvents_\\\")) {\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Cannot save. MID Server script name must start with 'TransformEvents_'\\\"));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t} else {\\n\\t\\t\\tif (current.name == \\\"\\\") {\\n\\t\\t\\t\\tcurrent.name = scriptName;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\t\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Verify mid script name is valid\"\n}```"}
{"prompt":"{\"prompt\":\"Validate MFA Browser FP Cookie Life Span\",\"table\":\"sys_properties\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar propValue = current.value;\\n\\tvar propName = current.name;\\n\\tvar prevValue = previous.value;\\n\\t\\n\\tthis.fingerprintValidityDefaultVal = 8;\\n\\tthis.fingerprintValidityMinVal = 1;\\n\\tthis.fingerprintValidityMaxVal = 24;\\n\\n\\tthis.maxRememberedBrowserDefaultVal = 5;\\n\\tthis.maxRememberedBrowserMinVal = 1;\\n\\tthis.maxRememberedBrowserMaxVal = 10;\\n\\t\\n\\tif(propName == \\\"glide.authenticate.multifactor.browser.fingerprint.validity\\\"){\\n\\t\\tpropValue = validateMFABrowserCookieSpanInHours(propValue, prevValue);\\n\\t\\tif(prevValue != propValue){\\n\\t\\t\\t//update auto flush job definition\\n\\t\\t\\tupdateAutoFlushRecord(propValue*60*60);\\n\\t\\t}\\n\\t} else if(propName == \\\"glide.authenticate.multifactor.remembered.browser.max.count\\\")\\n\\t\\tpropValue = validateMFAMaxRememberedBrowsers(propValue, prevValue);\\n\\n\\tcurrent.value = String(parseInt(propValue));\\n})(current, previous);\\n\\nfunction validateMFABrowserCookieSpanInHours(fpValidityInHours, prevValue){\\n\\tif (fpValidityInHours == '' || isNaN(fpValidityInHours)) {\\n\\t\\tif(!isNaN(prevValue)){\\n\\t\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Invalid value of browser fingerprint validity; retained existing value: {0} hours\\\", prevValue));\\n\\t\\t\\treturn prevValue;\\n\\t\\t}\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Invalid value of browser fingerprint validity; replaced with default value: {0} hours\\\", this.fingerprintValidityDefaultVal));\\n\\t\\treturn this.fingerprintValidityDefaultVal;\\n\\t} else if (fpValidityInHours < this.fingerprintValidityMinVal) {\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Browser fingerprint validity cannot be less than {0} hour; replaced with minimum allowed value: {0} hour\\\", this.fingerprintValidityMinVal));\\n\\t\\treturn this.fingerprintValidityMinVal;\\n\\t} else if (fpValidityInHours > this.fingerprintValidityMaxVal) {\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Browser fingerprint validity cannot be more than {0} hours; replaced with maximum allowed value: {0} hours\\\", this.fingerprintValidityMaxVal));\\n\\t\\treturn this.fingerprintValidityMaxVal;\\n\\t}\\n\\treturn fpValidityInHours;\\n}\\n\\nfunction validateMFAMaxRememberedBrowsers(value, prevValue){\\n\\tif (value == '' || isNaN(value)) {\\n\\t\\tif(!isNaN(prevValue)){\\n\\t\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Invalid value of maximum number of remembered browsers per user; replaced with existing value: {0}\\\", prevValue));\\n\\t\\t\\treturn prevValue;\\n\\t\\t}\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Invalid value of maximum number of remembered browsers per user; replaced with default value: {0}\\\", this.maxRememberedBrowserDefaultVal));\\n\\t\\treturn this.maxRememberedBrowserDefaultVal;\\n\\t} else if (value < this.maxRememberedBrowserMinVal) {\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"At least {0} browser per user must be allowed to remember; replaced with minimum allowed value: {0}\\\", this.maxRememberedBrowserMinVal));\\n\\t\\treturn this.maxRememberedBrowserMinVal;\\n\\t} else if (value > this.maxRememberedBrowserMaxVal) {\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"More than {0} browsers per user cannot be remembered; replaced with maximum allowed value: {0}\\\", this.maxRememberedBrowserMaxVal));\\n\\t\\treturn this.maxRememberedBrowserMaxVal;\\n\\t}\\n\\treturn value;\\n}\\n\\nfunction updateAutoFlushRecord(ageInSeconds){\\n\\tvar gr = new GlideRecord(\\\"sys_auto_flush\\\");\\n\\tif(gr.isValid()){\\n\\t\\tgr.get(\\\"fa213ae073033300fdbd04fbc4f6a77e\\\");\\n\\t\\tgr.query();\\n\\t\\tif(gr.next()){\\n\\t\\t\\tgr.age=ageInSeconds;\\n\\t\\t\\tgr.update();\\n\\t\\t\\tgs.log('Updated MFA browser fingerprint table auto flush job age to : '+ ageInSeconds + \\\" seconds.\\\");\\n\\t\\t}\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(current.name == \\\"glide.authenticate.multifactor.browser.fingerprint.validity\\\") || (current.name == \\\"glide.authenticate.multifactor.remembered.browser.max.count\\\")\",\n\t\"name\": \"Validate MFA Browser FP Cookie Life Span\"\n}```"}
{"prompt":"{\"prompt\":\"Validation on dependent contents\",\"table\":\"gsw_content\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"gsw_content\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar util = new GuidedSetupUtilSNC();\\n\\tif (!util.hasNoCyclicDependency(current)) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"dependent_on_contentsISNOTEMPTY^dependent_on_contentsVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validation on dependent contents\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Cache-Control header value\",\"table\":\"sys_properties\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar CC_VALUES = ['public', 'private'];\\n\\t\\tif (CC_VALUES.indexOf(''+current.value) == -1) {\\n\\t\\t\\t\\tvar errMsg = gs.getMessage(\\\"You can change the values to any of {0}\\\", CC_VALUES.join(\\\",\\\"));\\n\\t\\t\\t\\tgs.addErrorMessage(errMsg);\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=glide.http.cache_control^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate Cache-Control header value\"\n}```"}
{"prompt":"{\"prompt\":\"Validate integer value\",\"table\":\"sys_sg_properties\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar value = parseInt(current.getValue(\\\"value\\\"))\\n\\t\\n\\tif(isNaN(value)) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Invalid integer value\\\"));\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"type=integer^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate integer value\"\n}```"}
{"prompt":"{\"prompt\":\"Alert when deleting a HR criteria\",\"table\":\"sn_hr_core_criteria\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_criteria\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Cannot delete an HR Criteria record with a related user criteria\\\"));\\n\\tcurrent.setAbortAction(true);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"related_user_criteriaISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Alert when deleting a HR criteria\"\n}```"}
{"prompt":"{\"prompt\":\"SNC Baseline Filter\",\"table\":\"global\",\"when\":\"\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"//\\r\\n// Get a filter for baseline\\r\\n//\\r\\nfunction getBaseFilter(baseline) {\\r\\n\\t var answer = null;\\r\\n\\t if (baseline != null && baseline != '') {\\r\\n\\t\\t\\t var base = new GlideRecord('cmdb_baseline');\\r\\n\\t\\t\\t base.addQuery('name', baseline);\\r\\n\\t\\t\\t base.query();\\r\\n\\t\\t\\t if (base.next())\\r\\n\\t\\t\\t\\t\\tanswer = base.sys_created_on;\\r\\n\\t }\\r\\n\\t if (answer == null) {\\r\\n\\t\\t\\t var base = new GlideRecord('cmdb_baseline');\\r\\n\\t\\t\\t base.orderByDesc('sys_created_on');\\r\\n\\t\\t\\t base.query();\\r\\n\\t\\t\\t if (base.next())\\r\\n\\t\\t\\t\\t\\tanswer = base.sys_created_on;\\r\\n\\t }\\r\\n\\t return answer;\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"SNC Baseline Filter\"\n}```"}
{"prompt":"{\"prompt\":\"Remove Scheduled Job\",\"table\":\"asmt_metric_type\",\"when\":\"before\",\"actions\":\"ud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_metric_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"110\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var gr = new GlideRecord(\\\"sys_trigger\\\");\\nif (gr.get(current.job))\\n\\tgr.deleteRecord();\\ncurrent.job = '';\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.job && (current.operation() == 'delete' || (current.schedule_type != 'scheduled'\\t&& (current.evaluation_method != 'survey' || (current.schedule_period == '2' || current.schedule_period == '0'))))\",\n\t\"name\": \"Remove Scheduled Job\"\n}```"}
{"prompt":"{\"prompt\":\"Mandatory Assignment Group\",\"table\":\"change_request\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"900\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Assignment group is mandatory for in-progress Change Requests\\\"));\\n\\t\\n\\t// Abort the modification\\n\\tcurrent.setAbortAction(true);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"stateNOT IN-5,4^assignment_groupISEMPTY^chg_modelISEMPTY^EQ\",\n\t\"condition\": \"gs.getProperty(ChangeRequestSNC.ENFORCE_DATA_REQ_PROP) === \\\"true\\\"\",\n\t\"name\": \"Mandatory Assignment Group\"\n}```"}
{"prompt":"{\"prompt\":\"API Keys Amount Delete\",\"table\":\"sys_properties\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar gr = new GlideRecord('mid_webserver_api_key_credentials');\\n\\t\\tgr.queryNoDomain();\\n\\t\\tvar totalApiKeys = gr.getRowCount();\\n\\t\\tif (totalApiKeys > 10) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('The current total number of API Keys is {0}, which is more than the default limit of 10. If you with to delete this property, delete some API Keys so there will be no more than 10 API Keys.', totalApiKeys));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.getValue(\\\"name\\\") == \\\"mid.webserver.max.api.keys\\\"\",\n\t\"name\": \"API Keys Amount Delete\"\n}```"}
{"prompt":"{\"prompt\":\"Adds SoftPIN verification parameters\",\"table\":\"pwd_verification\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pwd_verification\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tgs.include('PwdVerificationParameterUtility');\\n\\tvar utility = new PwdVerificationParameterUtility();\\n\\n\\t// start fresh if changing type.\\n\\tif (!gs.nil(previous) && current.type.sys_id != previous.type.sys_id) {\\n\\t\\tutility.clearOthers([]);\\n\\t}\\n\\n\\t// add the params.\\n\\tutility.addParamWithValue('question', \\\"Enter the SoftPIN\\\", 100,\\n\\tgs.getMessage(\\\"Question for the SoftPIN\\\"));\\n\\n\\tutility.addParamWithProperty('pin_length', \\\"password_reset.softpin.min_length\\\", 200,\\n\\tgs.getMessage(\\\"Minimum number of digits of the SoftPIN\\\"));\\n\\t\\n\\tutility.addParamWithValue('repetition_threshold', \\\"2\\\", 300,\\n\\tgs.getMessage(\\\"Threshold for same digit to repeat continuously\\\"));\\n\\t\\n\\tutility.addParamWithValue('sequence_threshold', \\\"2\\\", 400,\\n\\tgs.getMessage(\\\"Threshold for sequence of digits\\\"));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.type.sys_id == 'a67585845302011017c3ddeeff7b1267'\",\n\t\"name\": \"Adds SoftPIN verification parameters\"\n}```"}
{"prompt":"{\"prompt\":\"Duplicate Topic Type Prevention\",\"table\":\"sys_cs_context_profile_topic\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cs_context_profile_topic\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"topic_typeVALCHANGES^EQ\",\n\t\"condition\": \"new global.CustomChatExperienceScripts().getSetupTopicTypeDomainCount(current.getValue(\\\"context_profile\\\"), current.getValue(\\\"topic_type\\\"), current.getValue(\\\"sys_domain\\\")) > 0;\",\n\t\"name\": \"Duplicate Topic Type Prevention\"\n}```"}
{"prompt":"{\"prompt\":\"Sync viewable_by and related fields\",\"table\":\"label\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"label\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"10\",\n\t\"add_message\": \"false\",\n\t\"script\": \"syncFields();\\n\\nfunction syncFields() {\\n\\tif (current.operation() == 'insert') {\\n\\t\\t// insert --> beware of default values\\n\\t\\tif (current.global == true)\\n\\t\\t\\tcurrent.viewable_by = 'everyone';\\n\\t\\telse if (current.viewable_by == 'everyone')\\n\\t\\t\\tcurrent.global = true;\\n\\t} else {\\n\\t\\t// update --> when unchecking global, leave viewable_by alone if it was users and groups\\n\\t\\tif (current.global.changes()) {\\n\\t\\t\\tif (current.global == true)\\n\\t\\t\\t\\tcurrent.viewable_by = 'everyone';\\n\\t\\t\\telse if (current.viewable_by == 'everyone')\\n\\t\\t\\t\\tcurrent.viewable_by = 'me';\\n\\t\\t} else if (current.viewable_by.changes()) {\\n\\t\\t\\tif (current.viewable_by == 'everyone')\\n\\t\\t\\t\\tcurrent.global = true;\\n\\t\\t\\telse\\n\\t\\t\\t\\tcurrent.global = false;\\n\\t\\t}\\n\\t}\\n\\n\\t// now that viewable_by is in sync, check that it's legit\\n\\tif (current.viewable_by == 'everyone' && !gs.getUser().hasRole('global_tags_creator') &&\\n\\t!new VTBGlobalTags().checkCanCreateGlobalTag()) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('You do not have permission to share tags with everyone'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n\\t// users and groups lists are relevant only for 'groups and users' viewable_by type\\n\\tif (current.viewable_by != 'groups and users') {\\n\\t\\tcurrent.user_list.setValue('');\\n\\t\\tcurrent.group_list.setValue('');\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"globalVALCHANGES^ORviewable_byVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Sync viewable_by and related fields\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent assigning queued interactions\",\"table\":\"interaction\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"interaction\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tgs.addErrorMessage(gs.getMessage('An interaction may not be queued if it is already assigned to an agent.'));\\n\\tcurrent.setAbortAction(true);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.assigned_to && (current.state.changesTo('queued') || (current.assigned_to.changes() && current.state == 'queued'))\",\n\t\"name\": \"Prevent assigning queued interactions\"\n}```"}
{"prompt":"{\"prompt\":\"Field Stamping Recommendations\",\"table\":\"incident\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"incident\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar result = sn_rf.RecommendationFramework.getStampRecommendations(current);\\n\\t\\tif (result.status == 'success') {\\n\\t\\t\\t\\tvar recommendations = result.recommendations;\\n\\t\\t\\t\\tfor (var idx = 0; idx < recommendations.length; idx++) {\\n\\t\\t\\t\\t\\t\\tvar recommendation = recommendations[idx];\\n\\t\\t\\t\\t\\t\\tvar isConfident = recommendation.isConfident;\\n\\t\\t\\t\\t\\t\\tvar fieldName = recommendation.fieldName;\\n\\t\\t\\t\\t\\t\\tvar currentValue = current.getValue(fieldName);\\n\\t\\t\\t\\t\\t\\tif (isConfident && currentValue == null) {\\n\\t\\t\\t\\t\\t\\t\\t\\tvar recommendedValue = recommendation.fieldValue;\\n\\t\\t\\t\\t\\t\\t\\t\\tcurrent.setValue(fieldName, recommendedValue);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t\\tgs.info('getStampRecommendations API failed in Field Stamping Recommendations: ' + result.errorMessage);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Field Stamping Recommendations\"\n}```"}
{"prompt":"{\"prompt\":\"Announce Tokyo Suggestion Reader Changes\",\"table\":\"sys_search_context_config\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_search_context_config\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"400\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar MESSAGE = 'Search-based Autocomplete has been automatically added to your search configuration, and Popular Search Autocomplete has been removed. You can add it back by simply adding the \\\"Popular Search Reader Group\\\" in your autocomplete configuration.';\\n\\n\\t\\t/** Retrieves the most recent upgrade record and returns an object with the \\\"from\\\" and \\\"to\\\" versions */\\n\\t\\tfunction getLastUpgradeVersions() {\\n\\t\\t\\t\\tvar gr = new GlideRecord('sys_upgrade_history');\\n\\t\\t\\t\\tgr.addQuery('from_version', '!=', 'n/a');\\n\\t\\t\\t\\tgr.addQuery('history_type', 'upgrade');\\n\\t\\t\\t\\tgr.setLimit('1');\\n\\t\\t\\t\\tgr.orderByDesc('upgrade_finished');\\n\\t\\t\\t\\tgr.query();\\n\\t\\t\\t\\tif (gr.next()) {\\n\\t\\t\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\t\\t\\t\\ttoVersion: gr.getValue('to_version'),\\n\\t\\t\\t\\t\\t\\t\\t\\tfromVersion: gr.getValue('from_version')\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t/** \\n\\t\\t * Returns true if not a zboot instance and customer is on Tokyo or has upgraded to Utah and bypassed Tokyo\\n\\t\\t * (Since we don't need to show this message forever, one upgrade cycle is enough)\\n\\t\\t */\\n\\t\\tfunction isRecentUpgradeCustomer() {\\n\\t\\t\\t\\tif (pm.isZboot()) return false;\\n\\t\\t\\t\\tvar lastUpgradeVersions = getLastUpgradeVersions();\\n\\t\\t\\t\\treturn lastUpgradeVersions.toVersion.toLowerCase().contains('tokyo') ||\\n\\t\\t\\t\\t\\t\\t(lastUpgradeVersions.toVersion.toLowerCase().contains('utah') && !lastUpgradeVersions.fromVersion.toLowerCase().contains('tokyo'));\\n\\t\\t}\\n\\n\\t\\t/** Checks if a suggestion reader group w/ a search-based suggestion reader is linked to this application */\\n\\t\\tfunction searchBasedSuggestionsEnabled() {\\n\\t\\t\\t\\tvar readerGroupGR = new GlideRecord('sys_suggestion_reader_group');\\n\\t\\t\\t\\treaderGroupGR.addQuery('context_config_id', current.getUniqueValue());\\n\\t\\t\\t\\tvar joinCondition = readerGroupGR.addJoinQuery('m2m_sys_suggestion_reader_sys_suggestion_reader_group', 'sys_id', 'sys_suggestion_reader_group_id');\\n\\t\\t\\t\\tjoinCondition.addCondition('sys_suggestion_reader_id', 'c41365e077020110be280d892c5a99f2'); // The AI Search reader ID\\n\\t\\t\\t\\treaderGroupGR.query();\\n\\t\\t\\t\\treturn readerGroupGR.hasNext();\\n\\t\\t}\\n\\n\\t\\tif (gs.hasRole('ais_admin') && searchBasedSuggestionsEnabled() && isRecentUpgradeCustomer())\\n\\t\\t\\t\\tgs.addInfoMessage(gs.getMessage(MESSAGE));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"search_engine=ai_search^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Announce Tokyo Suggestion Reader Changes\"\n}```"}
{"prompt":"{\"prompt\":\"Find Profiles Without Assertion Producer\",\"table\":\"oauth_entity\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"oauth_entity\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Get all the SAML2 grant type oauth_entity_profile(s) that are associated with current Oauth Entity \\n\\t// and have missing SAML2 Assertion Producer reference.\\n\\tvar gr = new GlideRecord(\\\"oauth_entity_profile\\\");\\n\\tgr.initialize();\\n\\tgr.addQuery(\\\"oauth_entity\\\", current.sys_id);\\n\\tgr.addQuery(\\\"grant_type\\\", 'urn:ietf:params:oauth:grant-type:saml2-bearer');\\n\\tgr.addNullQuery(\\\"saml2_assertion_producer\\\");\\n\\tgr.query();\\n\\t\\n\\t// Show a error message on top if there are 1 or more such oauth_entity_profile(s).\\n\\tif(gr.getRowCount()>0){\\n\\t\\tvar msg = gs.getMessage('Your configuration has missing SAML2 Assertion producer records in one or more entity profiles. A SAML2 Assertion producer record must be mapped to the entity profile record when grant type is SAML2 Bearer.');\\n\\t\\tgs.addErrorMessage(msg);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.sys_id.nil()\",\n\t\"name\": \"Find Profiles Without Assertion Producer\"\n}```"}
{"prompt":"{\"prompt\":\"Delete Trigger and Plan\",\"table\":\"sys_hub_flow\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_hub_flow\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar remoteTriggerId = current.remote_trigger_id;\\n\\tif (!remoteTriggerId || remoteTriggerId == \\\"\\\") {\\n\\t\\tvar triggerInstance = new GlideRecord(\\\"sys_hub_trigger_instance\\\");\\n\\t\\tif (!triggerInstance.get(\\\"flow\\\", current.sys_id))\\n\\t\\t\\treturn;\\n\\t\\t\\n\\t\\tremoteTriggerId = triggerInstance.remote_sys_id;\\n\\t}\\t\\n\\n\\t\\tvar planRecord = new GlideRecord(\\\"sys_flow_trigger_plan\\\");\\n\\tvar planId = \\\"\\\";\\n\\tif (planRecord.get(\\\"trigger\\\", remoteTriggerId)) {\\n\\t\\tplanId = planRecord.getValue(\\\"plan_id\\\");\\n\\t\\tplanRecord.deleteRecord();\\n\\t}\\n\\n\\t\\tvar triggerRecord = new GlideRecord(\\\"sys_flow_trigger\\\");\\n\\tif (triggerRecord.get(remoteTriggerId)) {\\n\\t\\tif (triggerRecord.getValue(\\\"sys_class_name\\\") == \\\"sys_flow_record_trigger\\\")\\n\\t\\t\\tsn_flow_trigger.FlowTriggerAPI.deleteRecordTrigger(planId);\\n\\t\\telse\\n\\t\\t\\ttriggerRecord.deleteRecord();\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete Trigger and Plan\"\n}```"}
{"prompt":"{\"prompt\":\"table + workspace + view must unique\",\"table\":\"sys_aw_form_uiaction_layout\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_aw_form_uiaction_layout\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\tif (current.isActionAborted()) {\\n\\t\\treturn;\\n\\t}\\n\\tvar gr = new GlideRecord('sys_aw_form_uiaction_layout');\\n\\tgr.addQuery('table', current.table);\\n\\tif (gs.nil(current.view))\\n\\t\\tgr.addNullQuery('view');\\n\\telse\\n\\t\\tgr.addQuery('view', current.view);\\n\\tif (gs.nil(current.workspace))\\n\\t\\tgr.addNullQuery('workspace');\\n\\telse\\n\\t\\tgr.addQuery('workspace', current.workspace);\\n\\tif (gs.nil(current.sys_domain))\\n\\t\\tgr.addNullQuery('sys_domain');\\n\\telse\\n\\t\\tgr.addQuery('sys_domain', current.sys_domain);\\n\\tgr.queryNoDomain();\\n\\tif (gr.getRowCount() > 0) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"UI Action layout already exists for this domain, table, workspace, view combination.\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.operation() == 'insert' || current.table.changes() || current.view.changes() || current.workspace.changes() || current.sys_domain.changes()\",\n\t\"name\": \"table + workspace + view must unique\"\n}```"}
{"prompt":"{\"prompt\":\"Block multiple escalations for a group\",\"table\":\"on_call_group_escalation\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"on_call_group_escalation\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar groupEscalationUtils = new OnCallGroupEscalationUtils();\\n\\tvar hasAnotherEscalation = groupEscalationUtils.hasAnotherEscalation(current);\\n\\tif (hasAnotherEscalation) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(gs.getMessage('This group already has an escalation policy defined'));\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Block multiple escalations for a group\"\n}```"}
{"prompt":"{\"prompt\":\"insert_lease\",\"table\":\"ast_lease\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ast_lease\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"current.number = getNextObjNumberPadded();\\r\\ngs.addInfoMessage(gs.getMessage(\\\"Created Lease {0}\\\", current.number );\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.number.nil()\",\n\t\"name\": \"insert_lease\"\n}```"}
{"prompt":"{\"prompt\":\"insert_service\",\"table\":\"ast_service\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ast_service\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"current.number = getNextObjNumberPadded();\\r\\ngs.addInfoMessage(gs.getMessage(\\\"Created Service Contract {0}\\\", current.number ));\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.number.nil()\",\n\t\"name\": \"insert_service\"\n}```"}
{"prompt":"{\"prompt\":\"insert_warranty\",\"table\":\"ast_warranty\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ast_warranty\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"current.number = getNextObjNumberPadded();\\r\\ngs.addInfoMessage(gs.getMessage(\\\"Created Warranty {0}\\\", current.number ));\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.number.nil()\",\n\t\"name\": \"insert_warranty\"\n}```"}
{"prompt":"{\"prompt\":\"Redeploy SM Fast Recomputation Jobs\",\"table\":\"sys_properties\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"150\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tgs.log(\\\"About to Redeploy Service Mapping Fast Recomputation jobs due to property change (\\\" + current.name +\\\")\\\");\\n\\tvar utils = new ServiceMappingRecomputationUtils();\\n\\tutils.removeFastScheduledJobs();\\n\\n\\tvar jobCount = gs.getProperty('glide.service_mapping.fast_recomputation.job_count', utils.defaultJobCount());\\n\\tutils.deployFastScheduledJobs(jobCount);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=glide.service_mapping.fast_recomputation.job_priority^ORname=glide.service_mapping.fast_recomputation.multi_node_enabled^ORname=glide.service_mapping.fast_recomputation.job_count^NQname=glide.sys.schedulers^valueVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Redeploy SM Fast Recomputation Jobs\"\n}```"}
{"prompt":"{\"prompt\":\"Validate shifts\",\"table\":\"on_call_group_escalation\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"on_call_group_escalation\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar groupEscalationUtils = new OnCallGroupEscalationUtils();\\n\\tvar isValidRotas = groupEscalationUtils.isValidRotas(current);\\n\\tif (!isValidRotas) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(gs.getMessage('One of the selected shift does not belong to this group'));\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate shifts\"\n}```"}
{"prompt":"{\"prompt\":\"Only Allow Read ACLs on Archive Tables\",\"table\":\"sys_security_acl\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_security_acl\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar name = ''+current.name;\\n\\tvar end = name.indexOf('.');\\n\\tif (end > 0)\\n\\t\\tname.slice(0, end);\\n\\n\\tif (GlideArchiveTable.isArchive(name)) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('Only read ACLs are allowed on archive tables'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.type == 'record' && current.operation != 'read'\",\n\t\"name\": \"Only Allow Read ACLs on Archive Tables\"\n}```"}
{"prompt":"{\"prompt\":\"Kick Workflow on Closure\",\"table\":\"service_task\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"service_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"new Workflow().runFlows(current, 'update');\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"sys_class_name!=service_task^EQ\",\n\t\"condition\": \"current.state.changesTo(3) || current.state.changesTo(4) || current.state.changesTo(7)\",\n\t\"name\": \"Kick Workflow on Closure\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Profile Capabilities\",\"table\":\"mid_profile_capability_m2m\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"mid_profile_capability_m2m\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar gr = new GlideRecord('mid_profile_capability_m2m');\\n\\tgr.addQuery(\\\"capability\\\", current.capability);\\n\\tgr.addQuery(\\\"profile\\\", current.profile);\\n\\tgr.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.getUniqueValue());\\n\\tgr.query();\\n\\tif (gr.hasNext()) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Profile capability already exists with name: {0}\\\", current.capability.capability));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate Profile Capabilities\"\n}```"}
{"prompt":"{\"prompt\":\"WFApplyDatabusID\",\"table\":\"wf_activity\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"wf_activity\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\tvar gr = new GlideRecord('wf_activity');\\n\\tgr.addQuery('workflow_version', current.workflow_version);\\n\\tgr.addNotNullQuery('databus_lookup_id');\\n\\tgr.orderByDesc('databus_lookup_id');\\n\\tgr.setLimit(1);\\n\\tgr.query();\\n\\n\\t// do max on the version. If there is no wf_activities yet, then\\n\\t// just default the first one to 1. \\n\\tif (gr.next()) {\\n\\t\\tcurrent.databus_lookup_id = Number(gr.databus_lookup_id) + 1;\\n\\t} else {\\n\\t\\tcurrent.databus_lookup_id = 1;\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"WFApplyDatabusID\"\n}```"}
{"prompt":"{\"prompt\":\"Maint Attribute Protection\",\"table\":\"sys_schema_attribute_m2m\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_schema_attribute_m2m\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var maintAttributes = GlideProperties.get('glide.maint.dictionary_attributes', '').trim();\\nvar currentAttribute = new GlideRecord('sys_schema_attribute');\\nvar currentAttributeIsMaint = false;\\nvar previousAttribute = new GlideRecord('sys_schema_attribute');\\nvar previousAttributeIsMaint = false;\\nif(maintAttributes.length() > 0) {\\n\\tvar currentAttributeId = current.attribute.toString();\\n\\tif(GlideStringUtil.isEligibleSysID(currentAttributeId)) {\\n\\t\\tcurrentAttribute.addQuery('sys_id', currentAttributeId);\\n\\t\\tcurrentAttribute.addQuery('name', 'IN', maintAttributes);\\n\\t\\tcurrentAttribute.query();\\n\\t\\tcurrentAttributeIsMaint = currentAttribute.next();\\n\\t}\\n\\tvar previousAttributeId = previous.attribute.toString();\\n\\tif(GlideStringUtil.isEligibleSysID(previousAttributeId)) {\\n\\t\\tpreviousAttribute.addQuery('sys_id', previousAttributeId);\\n\\t\\tpreviousAttribute.addQuery('name', 'IN', maintAttributes);\\n\\t\\tpreviousAttribute.query();\\n\\t\\tpreviousAttributeIsMaint = previousAttribute.next();\\n\\t}\\n}\\n\\nvar errorMessage = null;\\nvar op = current.operation();\\nif(op == 'insert' && currentAttributeIsMaint)\\n\\terrorMessage = gs.getMessage(\\\"The attribute '{0}' cannot be added to a system {1} record unless maint\\\", [currentAttribute.label, new GlideRecord('sys_dictionary').getLabel()]);\\nelse if(op == 'delete' && previousAttributeIsMaint)\\n\\terrorMessage = gs.getMessage(\\\"The attribute '{0}' cannot be removed from a system {1} record unless maint\\\", [previousAttribute.label, new GlideRecord('sys_dictionary').getLabel()]);\\nelse if(op == 'update' && (currentAttributeIsMaint || previousAttributeIsMaint)) {\\n\\tvar label = previousAttributeIsMaint ? previousAttribute.label : currentAttribute.label;\\n\\terrorMessage = gs.getMessage(\\\"The attribute '{0}' cannot be edited on a system {1} record unless maint\\\", [label, new GlideRecord('sys_dictionary').getLabel()]);\\n}\\n\\nif(errorMessage != null) {\\n\\tgs.addErrorMessage(errorMessage);\\n\\tcurrent.setAbortAction(true);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!gs.hasRole('maint') && !SNC.TableEditor.isCustomerField(current.schema.name, current.schema.element)\",\n\t\"name\": \"Maint Attribute Protection\"\n}```"}
{"prompt":"{\"prompt\":\"Log in target progress on actual change\",\"table\":\"sn_gf_goal_target\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_gf_goal_target\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\tif(!new TargetProgressUtil(current).logTargetProgress()){\\n\\t\\tvar targetLabel = sn_gf.GFUtil.getTableLabel(GoalFrameworkConstants.GOAL_TARGET_TABLE).toLowerCase();\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Could not create {0} progress record.\\\", targetLabel));\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"actual_valueVALCHANGES^actual_valueISNOTEMPTY^NQtype=milestone^percent_completeVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Log in target progress on actual change\"\n}```"}
{"prompt":"{\"prompt\":\"Start publication workflow\",\"table\":\"sn_publications_publication\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_publications_publication\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\tvar gr = new GlideRecord('sn_publications_workflow_config');\\n\\tif(gr.get('6c9b0e65c30112004bd67bfaa2d3ae56')){\\n\\t\\tvar workflowID = gr.getValue('workflow');\\n\\t\\tvar w = new global.Workflow();\\n\\t\\tw.startFlow(workflowID, current, current.operation());\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Start publication workflow\"\n}```"}
{"prompt":"{\"prompt\":\"Display:Storage Server\",\"table\":\"cmdb_ci_storage_server\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci_storage_server\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar gr = new GlideRecord('cmdb_rel_ci');\\n\\n\\tgr.addQuery('parent', current.sys_id);\\n\\tgr.addQuery('type.name', 'Uses::Used by');\\n\\tgr.addQuery('child.sys_class_name', 'cmdb_ci_storage_server');\\n\\n\\tgr.query();\\n\\tif (!gr.next()) {\\n\\t\\tif (typeof g_scratchpad.hideRelatedLists === 'undefined') // expected\\n\\t\\t\\tg_scratchpad.hideRelatedLists = [];\\n\\n\\t\\tg_scratchpad.hideRelatedLists.push('REL:d9b3dac78f90120010340b5437bdee47'); \\n\\t}\\n\\n})(current, previous);\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Display:Storage Server\"\n}```"}
{"prompt":"{\"prompt\":\"Re-index catelog item\",\"table\":\"sc_cat_item_category\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_cat_item_category\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"10000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar currentSysId = current.getValue(\\\"sc_cat_item\\\");\\n\\t\\tif (currentSysId)\\n\\t\\t\\t\\tnew sn_ais.IndexEvent().indexRecord(\\\"sc_cat_item\\\", currentSysId);\\n\\n\\t\\tif (previous != null) {\\n\\t\\t\\t\\tpreviousSysid = previous.getValue(\\\"sc_cat_item\\\");\\n\\t\\t\\t\\tif (previousSysid && previousSysid != currentSysId)\\n\\t\\t\\t\\t\\t\\tnew sn_ais.IndexEvent().indexRecord(\\\"sc_cat_item\\\", previousSysid);\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"new sn_ais.StatusApi().isAisQueueWritable()\",\n\t\"name\": \"Re-index catelog item\"\n}```"}
{"prompt":"{\"prompt\":\"Check for Valid Name\",\"table\":\"sc_ic_question\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_ic_question\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"sc_ic_Factory.wrap(current).makeNameValid()\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Check for Valid Name\"\n}```"}
{"prompt":"{\"prompt\":\"Flush Form Cache\",\"table\":\"sys_ui_annotation_type\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ui_annotation_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.cacheFlush('syscache_realform');\\r\\ngs.cacheFlush('syscache_jelly_script');\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"typeof no_flush == \\\"undefined\\\"\",\n\t\"name\": \"Flush Form Cache\"\n}```"}
{"prompt":"{\"prompt\":\"Deactivate menu if app is inactive\",\"table\":\"sys_app_application\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_app_application\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"SNC.Apps.changeActiveStateForItem(current);\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"gs.hasRole(\\\"admin\\\") && current.active == true\",\n\t\"name\": \"Deactivate menu if app is inactive\"\n}```"}
{"prompt":"{\"prompt\":\"Erase ScreenId From IconSection\",\"table\":\"sys_sg_screen\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_screen\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\n\\tvar cascadeEraser = new CascadeEraser();\\n\\tcascadeEraser.removeDependentValueFromListField('applets', current.sys_id ,'sys_sg_icon_section');\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Erase ScreenId From IconSection\"\n}```"}
{"prompt":"{\"prompt\":\"Delete Widget Navigation entry\",\"table\":\"sys_report\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_report\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*undefined when async or display*/) {\\n\\n\\tvar wigNavGr = new GlideRecord('widget_navigation');\\n\\twigNavGr.addQuery('widget', current.sys_id);\\n\\twigNavGr.query();\\n\\twhile(wigNavGr.next()){\\n\\t\\twigNavGr.deleteRecord();\\n\\t\\tgs.addDebugMessage('Widget Navigation for report ' + current.sys_id + ' is deleted');\\n\\t}\\n\\n})(current, typeof previous != 'undefined' ?\\tprevious : null);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete Widget Navigation entry\"\n}```"}
{"prompt":"{\"prompt\":\"AIS trigger reindexing\",\"table\":\"label\",\"when\":\"before\",\"actions\":\"ud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"label\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.sys_id != previous.sys_id)\\n\\t\\treturn;\\n\\n\\tvar newAudience = current.viewable_by;\\n\\tvar oldAudience = previous.viewable_by;\\n\\tvar audienceChanged = (newAudience != oldAudience);\\n\\tvar nameChanged = (current.name.tolowerCase() != previous.name.toLowerCase());\\n\\n\\tif (current.operation() == 'delete') {\\n\\t\\tgs.getSession().putClientData('glide.ais.recent.label.deletion', current.sys_id + ',' + newAudience);\\n\\t\\treturn;\\n\\t}\\n\\n\\tif (!audienceChanged && !nameChanged)\\n\\t\\treturn;\\n\\n\\tvar triggerIndexAllShared = false;\\n\\tvar triggerIndexEveryoneOnly = false;\\n\\tif (audienceChanged) {\\n\\n\\t\\t// only from private or to private require re-indexing\\n\\t\\tif (newAudience == 'me' || oldAudience == 'me')\\n\\t\\t\\ttriggerIndexAllShared = true;\\n\\n\\t\\t// only from or to everyone require re-indexing\\n\\t\\tif (newAudience == 'everyone' || oldAudience == 'everyone')\\n\\t\\t\\ttriggerIndexEveryoneOnly = true;\\n\\t}\\n\\tif (nameChanged) {\\n\\t\\t// reindex all shared tags\\n\\t\\tif (newAudience != 'me')\\n\\t\\t\\ttriggerIndexAllShared = true;\\n\\t\\tif (newAudience == 'everyone')\\n\\t\\t\\ttriggerIndexEveryoneOnly = true;\\n\\t}\\n\\n\\tnew sn_ais.IndexEvent().indexLabelChange(current.sys_id, triggerIndexAllShared, triggerIndexEveryoneOnly);\\n\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"new sn_ais.StatusApi().isAisQueueWritable()\",\n\t\"name\": \"AIS trigger reindexing\"\n}```"}
{"prompt":"{\"prompt\":\"Change primary topic on content\",\"table\":\"topic\",\"when\":\"async_always\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"topic\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async_always\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAsync(current) {\\n\\tnew global.ContentPrimaryTopicUtil().updateContentPrimaryTopic(current);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"activeVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Change primary topic on content\"\n}```"}
{"prompt":"{\"prompt\":\"Fetch AI Search Allow List of Portals\",\"table\":\"sp_portal\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sp_portal\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"10\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar ais = new sn_ais.StatusApi();\\n\\tg_scratchpad.isAisEnabled = ais.isAisEnabled() && ais.isAisInitialized();\\n\\tg_scratchpad.enableAISearchPortals = gs.getProperty('glide.service_portal.enable_ais_portal.allow_list');\\n\\n\\tvar currentPortalId = current.getValue('sys_id');\\n\\tg_scratchpad.isCustomerCreatedPortal = isCustomerCreatedPortal() || isCustomScopedAppPortal();\\n\\n\\tfunction isCustomScopedAppPortal() {\\n\\t\\tvar scope = current.sys_scope.scope || '';\\n\\t\\treturn scope && scope.startsWith('x_');\\n\\t}\\n\\n\\tfunction isCustomerCreatedPortal() {\\n\\n\\t\\tvar isCustomerCreated = false;\\n\\t\\tvar encodedQueryName = 'name=sp_portal_'+ currentPortalId;\\n\\n\\t\\tvar gr = new GlideRecord('sys_update_version');\\n\\t\\tgr.setLimit(1);\\n\\t\\tgr.addEncodedQuery(encodedQueryName);\\n\\t\\tgr.query();\\n\\n\\t\\tif (gr.hasNext()) {\\n\\n\\t\\t\\tgr = new GlideRecord('sys_update_version');\\n\\t\\t\\tgr.setLimit(1);\\n\\t\\t\\tgr.addEncodedQuery(encodedQueryName + '^source_tableINsys_upgrade_history,sys_store_app');\\n\\t\\t\\tgr.query();\\n\\n\\t\\t\\tif (!gr.hasNext())\\n\\t\\t\\t\\tisCustomerCreated = true;\\n\\t\\t}\\n\\n\\t\\treturn isCustomerCreated;\\n\\t}\\n})(current, previous);\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Fetch AI Search Allow List of Portals\"\n}```"}
{"prompt":"{\"prompt\":\"Create task templates from Change\",\"table\":\"std_change_proposal\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"std_change_proposal\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar errors = new StdChangeTaskUtils().createTaskTemplatesFromChange(current, current.getValue(\\\"created_from_change\\\"));\\n\\t\\n\\tif (errors && errors.length > 0) {\\n\\t\\tfor (var i = 0; i < errors.length; i++)\\n\\t\\t\\tgs.addInfoMessage(errors[i]);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"created_from_changeISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Create task templates from Change\"\n}```"}
{"prompt":"{\"prompt\":\"Add VariableMapper\",\"table\":\"sys_decision_input\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_decision_input\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.attributes != \\\"\\\")\\n\\t\\tcurrent.attributes += \\\",\\\";\\n\\t\\n\\tcurrent.attributes += \\\"element_mapping_provider=com.glide.decision_table.data.DecisionTableVariableMapper\\\"\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Add VariableMapper\"\n}```"}
{"prompt":"{\"prompt\":\"Put Preview Count and Link on Scratchpad\",\"table\":\"ais_search_source\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ais_search_source\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\t// Datasource Filter And Search Source Filter AND (OR Class)\\n\\t\\tg_scratchpad.recordCount = 0;\\n\\t\\tvar fDatasourceFilter = new sn_ais.AisUtil().getTableLevelAttribute(current.datasource.source, 'filter', '');\\n\\t\\tvar fSearchSourceFilter = current.condition;\\n\\t\\tvar fTables = [];\\n\\n\\t\\tfTables.push(\\\"sys_class_name=\\\" + current.getValue(\\\"datasource\\\"));\\n\\t\\tvar childTablesGr = new GlideRecord('ais_child_table');\\n\\t\\tchildTablesGr.addQuery(\\\"datasource\\\", current.datasource.sys_id);\\n\\t\\tchildTablesGr.addQuery(\\\"active\\\", \\\"true\\\");\\n\\t\\tchildTablesGr.query();\\n\\t\\twhile (childTablesGr.next())\\n\\t\\t\\t\\tfTables.push(\\\"sys_class_name=\\\" + childTablesGr.getValue(\\\"table\\\"));\\n\\t\\tvar conditions = [];\\n\\t\\tconditions.push(fDatasourceFilter);\\n\\t\\tconditions.push(fSearchSourceFilter);\\n\\t\\tconditions.push(fTables.join(\\\"^OR\\\"));\\n\\t\\tvar condition = conditions.join(\\\"^\\\");\\n\\t\\tvar count = new GlideAggregate(current.datasource);\\n\\t\\tcount.addAggregate('COUNT');\\n\\t\\tcount.addEncodedQuery(condition);\\n\\t\\tcount.query();\\n\\t\\tvar records = 0;\\n\\t\\tif (count.next()) {\\n\\t\\t\\t\\trecords = count.getAggregate('COUNT');\\n\\t\\t\\t\\tg_scratchpad.recordCount = records;\\n\\t\\t}\\n\\t\\tg_scratchpad.adjustedCondition = condition;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Put Preview Count and Link on Scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"Create or update access controls\",\"table\":\"sys_db_object\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_db_object\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"500\",\n\t\"add_message\": \"false\",\n\t\"script\": \"SncAppsAccess.createTableAcls(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.create_access_controls == true\",\n\t\"name\": \"Create or update access controls\"\n}```"}
{"prompt":"{\"prompt\":\"Sync Template Outputs with Flow Outputs\",\"table\":\"sys_app_template_output_var\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_app_template_output_var\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar templateAPI = new sn_templates.TemplateScriptableAPI();\\n\\tvar sysFlowId = templateAPI.syncFlowOutputs(current);\\n\\t\\n\\tif (sysFlowId !== null)\\n\\t\\tcurrent.flow_output_variable = sysFlowId;\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Sync Template Outputs with Flow Outputs\"\n}```"}
{"prompt":"{\"prompt\":\"Remove UI Action Configuration\",\"table\":\"cxs_res_context_config\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cxs_res_context_config\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar cxsUiActConfigUtil = new cxs_UIActionConfig();\\n\\tcxsUiActConfigUtil.updateAddUACFromResourceContext(current, false);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Remove UI Action Configuration\"\n}```"}
{"prompt":"{\"prompt\":\"Avoid duplicate subscriptions\",\"table\":\"kb_social_qa_subscribe\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"kb_social_qa_subscribe\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"20\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar subscriptions = new GlideRecord('kb_social_qa_subscribe');\\n\\tsubscriptions.addQuery('question',current.question);\\n\\tsubscriptions.addQuery('profile',current.profile);\\n\\tsubscriptions.query();\\n\\tif(subscriptions.next()){\\n\\t\\tif(subscriptions.active){\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage('User is already subscribed to the given question'));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tsubscriptions.deleteRecord();\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Avoid duplicate subscriptions\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent deletion while in progress\",\"table\":\"discovery_status\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"discovery_status\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.addErrorMessage(gs.getMessage('Cannot delete an active discovery status while it is in progress'));\\ncurrent.setAbortAction(true);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.state == \\\"Starting\\\" || current.state == \\\"Active\\\"\",\n\t\"name\": \"Prevent deletion while in progress\"\n}```"}
{"prompt":"{\"prompt\":\"Set specificity for ux actions\",\"table\":\"sys_ux_form_action\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ux_form_action\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\n\\tvar tablesCalc = current.table == 'global' ? 0 : GlideDBObjectManager.getTables(current.table).size(); \\n\\tvar specificity = tablesCalc * 10;\\n\\tcurrent.setValue(\\\"specificity\\\", specificity);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"tableVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Set specificity for ux actions\"\n}```"}
{"prompt":"{\"prompt\":\"Validate relationship in content info\",\"table\":\"gsw_content_information\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"gsw_content_information\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"25\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar utils = new GuidedSetupUtilSNC();\\n\\tif (!utils.validateRelationship(current)) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"parentVALCHANGES^parentISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate relationship in content info\"\n}```"}
{"prompt":"{\"prompt\":\"PA Has Managed Indicator\",\"table\":\"pa_indicators\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_indicators\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(current, previous) {\\n\\t if (previous && current.managing_indicator == previous.managing_indicator)\\n\\t\\t return;\\n\\t\\n\\tvar gr;\\n\\tif (current.managing_indicator) {\\n\\t\\tgr = new GlideRecord('pa_indicators');\\n\\t\\tgr.get(current.managing_indicator);\\n\\t\\tgr.setValue('has_managed_indicators', true);\\n\\t\\tgr.update();\\n\\t}\\n\\t\\n\\tif (previous && previous.managing_indicator) {\\n\\t\\tgr = new GlideRecord('pa_indicators');\\n\\t\\tgr.addQuery('managing_indicator', previous.managing_indicator);\\n\\t\\tgr.query();\\n\\t\\tif (!gr.next()) {\\n\\t\\t\\tgr = new GlideRecord('pa_indicators');\\n\\t\\t\\tgr.get(previous.managing_indicator);\\n\\t\\t\\tgr.setValue('has_managed_indicators', false);\\n\\t\\t\\tgr.update();\\n\\t\\t}\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"PA Has Managed Indicator\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent same reference fields \",\"table\":\"cmdb_related_entry\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_related_entry\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Cannot use same field '{0}' as criterion attribute and reference field for {1} !\\\", [current.referenced_field, current.table]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tcurrent.attributes = previous.attributes;\\n\\t\\tcurrent.referenced_field = previous.referenced_field;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.attributes.includes(current.referenced_field)\",\n\t\"name\": \"Prevent same reference fields \"\n}```"}
{"prompt":"{\"prompt\":\"Remove Classification Parameter \",\"table\":\"ecc_queue\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_queue\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"115\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar payload = current.payload;\\n\\tif (!payload)\\n\\t\\treturn;\\n\\tpayload = payload.replace(/<parameter name=\\\"classification_probe\\\" value=.*?\\\\/>/, '');\\n\\tcurrent.setValue('payload', payload);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=Pattern Launcher: Credentialless Discovery Network Device^queue=output^topic=HorizontalDiscoveryProbe^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Remove Classification Parameter \"\n}```"}
{"prompt":"{\"prompt\":\"Abort changes\\ton group\",\"table\":\"incident_task\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"incident_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\tvar assigned_to = current.assigned_to;\\n\\tvar assignment_group = current.assignment_group;\\n\\t\\n\\tvar grp = new GlideRecord('sys_user_grmember');\\n\\tgrp.addQuery('group.sys_id', assignment_group);\\n\\tgrp.addQuery('user', assigned_to);\\n\\tgrp.query();\\n\\n\\tif(!grp.hasNext())\\n\\t{\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Assigned to user {0} must be member of Assignment group {1} \\\",[assigned_to.getDisplayValue(),assignment_group.getDisplayValue()]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"assigned_toISNOTEMPTY^assignment_groupVALCHANGES^assignment_groupISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Abort changes\\ton group\"\n}```"}
{"prompt":"{\"prompt\":\"Update convert to numeric operation type\",\"table\":\"sys_rte_eb_to_numeric_operation\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_rte_eb_to_numeric_operation\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tcurrent.type = \\\"ecaa3c16730000102b6265a751ab9e9f\\\";\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update convert to numeric operation type\"\n}```"}
{"prompt":"{\"prompt\":\"ValidatePwdPolicyForNonAdvancedOption\",\"table\":\"password_policy\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"password_policy\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar minimun_password_length = current.minimun_password_length;\\n\\t\\tvar maximum_password_length = current.maximum_password_length;\\n\\t\\tvar minimum_uppercase_characters = current.minimum_uppercase_characters;\\n\\t\\tvar minimum_lowercase_characters = current.minimum_lowercase_characters;\\n\\t\\tvar minimum_numeric_characters = current.minimum_numeric_characters;\\n\\t\\tvar minimum_special_characters = current.minimum_special_characters;\\n\\t\\tvar whitelisted_special_characters = current.whitelisted_special_characters;\\n\\n\\t\\tvar policyScript;\\n\\t\\tif (current.isValidField('password_policy_script')) {\\n\\t\\t\\t\\tpolicyScript = current.password_policy_script;\\n\\t\\t}\\n\\t\\tvar options = eval(policyScript);\\n\\t\\tif (options) {\\n\\t\\t\\t\\tif (options['minimun_password_length'] != undefined)\\n\\t\\t\\t\\t\\t\\tminimun_password_length = options['minimun_password_length'];\\n\\t\\t\\t\\tif (options['maximum_password_length'] != undefined)\\n\\t\\t\\t\\t\\t\\tmaximum_password_length = options['maximum_password_length'];\\n\\t\\t\\t\\tif (options['minimum_uppercase_characters'] != undefined)\\n\\t\\t\\t\\t\\t\\tminimum_uppercase_characters = options['minimum_uppercase_characters'];\\n\\t\\t\\t\\tif (options['minimum_lowercase_characters'] != undefined)\\n\\t\\t\\t\\t\\t\\tminimum_lowercase_characters = options['minimum_lowercase_characters'];\\n\\t\\t\\t\\tif (options['minimum_numeric_characters'] != undefined)\\n\\t\\t\\t\\t\\t\\tminimum_numeric_characters = options['minimum_numeric_characters'];\\n\\t\\t\\t\\tif (options['minimum_special_characters'] != undefined)\\n\\t\\t\\t\\t\\t\\tminimum_special_characters = options['minimum_special_characters'];\\n\\t\\t}\\n\\n\\t\\t// valiidate script options\\n\\t\\tif (minimun_password_length < 8 || minimun_password_length > 100) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Minimum password length should be in range of: [{0}, {1}]\\\", [8, 100]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif (maximum_password_length < 8 || maximum_password_length > 100) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Maximum password length should be in range of: [{0}, {1}]\\\", [8, 100]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\n\\tif(maximum_password_length - minimun_password_length < 5){\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Difference between minimum and maximum password length must be 5 or more\\\", [8, 100]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\treturn;\\n\\t}\\n\\t\\n\\t\\tif (minimum_uppercase_characters < 0 || minimum_uppercase_characters > 10) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Minimum uppercase character(s) should be in range of: [{0}, {1}]\\\", [0, 10]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif (minimum_lowercase_characters < 0 || minimum_lowercase_characters > 10) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Minimum lowercase Character(s) should be in range of: [{0}, {1}]\\\", [0, 10]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif (minimum_numeric_characters < 0 || minimum_numeric_characters > 10) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Minimum numeric character(s) should be in range of: [{0}, {1}]\\\", [0, 10]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif (minimum_special_characters < 0 || minimum_special_characters > 10) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Minimum special character(s) should be in range of: [{0}, {1}]\\\", [0, 10]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tvar tempSum = parseInt(minimum_lowercase_characters) + parseInt(minimum_uppercase_characters) + parseInt(minimum_numeric_characters) + parseInt(minimum_special_characters);\\n\\tvar sumStr = String(tempSum);\\n\\tvar sum = sumStr.split(\\\".\\\")[0];\\n\\t\\n\\t\\tif (sum > minimun_password_length) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"The minimum password length must not be less than the sum ({0}) of minimum required character fields.\\\", sum));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif (sum > maximum_password_length) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"The maximum password length must not be less than the sum ({0}) of minimum required character fields.\\\", sum));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"password_strength!=70^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"ValidatePwdPolicyForNonAdvancedOption\"\n}```"}
{"prompt":"{\"prompt\":\"Close task when all subtasks are closed\",\"table\":\"alm_transfer_order_line_subtask\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"alm_transfer_order_line_subtask\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// Close task when all subtasks are closed\\n\\n// state = 1 = Open\\n// state = 2 = Work In Progress\\n// state = -5 = Pending\\n\\n// If there are no open, pending or work in progress subtasks, then close the task\\nif (getSubtaskCount('-5,1,2') === 0) {\\n\\t\\t// state = 3 = Closed Complete\\n\\t\\tvar taskState = 3;\\n\\t\\tvar taskGr = new GlideRecord('alm_transfer_order_line_task');\\n\\t\\tif (taskGr.get(current.task)) {\\n\\t\\t// If there are any closed skipped subtasks, then this state goes to the task\\n\\t\\t\\t\\tvar closedSkippedTaskCount = getSubtaskCount('7');\\n\\t\\t\\t\\tif (closedSkippedTaskCount) {\\n\\t\\t\\ttaskState = 7;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\ttaskGr.state = taskState;\\n\\t\\t\\t\\ttaskGr.update();\\n\\t\\t}\\n}\\n\\nfunction getSubtaskCount(stateValue) {\\n\\t\\tvar subtaskCount = 0;\\n\\t\\tvar subtaskGr = new GlideAggregate('alm_transfer_order_line_subtask');\\n\\t\\tsubtaskGr.addQuery('task', current.task);\\n\\t\\tsubtaskGr.addQuery('state', 'IN', stateValue);\\n\\t\\tsubtaskGr.addAggregate('COUNT');\\n\\t\\tsubtaskGr.query();\\n\\t\\tif (subtaskGr.next()) {\\n\\t\\t\\t\\tsubtaskCount = parseInt(subtaskGr.getAggregate('COUNT'));\\n\\t\\t}\\n\\t\\treturn subtaskCount;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"state=3^ORstate=7^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Close task when all subtasks are closed\"\n}```"}
{"prompt":"{\"prompt\":\"Complete Update Set Batch\",\"table\":\"sys_update_set\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_update_set\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"50\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar child = new GlideRecord(\\\"sys_update_set\\\");\\n\\tchild.addQuery(\\\"base_update_set\\\", current.sys_id);\\n\\tchild.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.sys_id);\\n\\tchild.addQuery(\\\"state\\\", \\\"in progress\\\");\\n\\tchild.setValue(\\\"state\\\", \\\"complete\\\");\\n\\tchild.updateMultiple();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.state.changesTo(\\\"complete\\\") && !current.base_update_set.nil() && current.base_update_set.sys_id == current.sys_id\",\n\t\"name\": \"Complete Update Set Batch\"\n}```"}
{"prompt":"{\"prompt\":\"getUserHomepages\",\"table\":\"global\",\"when\":\"after\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function getUserHomepages() { \\r\\n\\tif (!gs.getUser().hasRoles())\\r\\n\\t\\treturn;\\r\\n\\r\\n\\tvar answer = new Array();\\r\\n\\tvar i = 0;\\r\\n\\tvar hp = new GlideRecord('sys_portal_page');\\r\\n\\thp.addQuery('user',gs.getUserID());\\r\\n\\thp.addQuery('sys_class_name', 'sys_portal_page');\\r\\n\\thp.orderBy('order');\\r\\n\\thp.orderBy('title');\\r\\n\\thp.query();\\r\\n\\twhile (hp.next()) {\\r\\n\\t\\tanswer.push(GlideExpressionWrapper().escapeNS(gs.getMessage(hp.title)) + 'xyzzyx' + hp.sys_id);\\r\\n\\t\\ti++;\\r\\n\\t}\\r\\n\\tif (i > 0)\\r\\n\\t\\tanswer.push('------------xyzzyx');\\r\\n\\thp.initialize();\\r\\n\\thp.addQuery('selectable', true);\\r\\n\\thp.addQuery('sys_class_name', 'sys_portal_page');\\r\\n\\thp.addNullQuery('user');\\r\\n\\thp.orderBy('order');\\r\\n\\thp.orderBy('title');\\r\\n\\thp.query();\\r\\n\\twhile (hp.next()) {\\r\\n\\t\\tif (gs.hasRole(hp.read_roles))\\r\\n\\t\\t\\t answer.push(GlideExpressionWrapper().escapeNS(gs.getMessage(hp.title)) + 'xyzzyx' + hp.sys_id);\\r\\n\\t}\\r\\n\\treturn answer.join('^');\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"getUserHomepages\"\n}```"}
{"prompt":"{\"prompt\":\"Validate handle name\",\"table\":\"sys_alias\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_alias\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\t\\n\\tvar msg = gs.getMessage(\\\"Invalid alias name. Alias name may only contain A-Z, a-z, 0-9, _, @, ., /, #, &, +, -, =, !, *, (, ), or space\\\");\\n\\n\\tif (current.name.match(/[^A-Za-z0-9_ @./()#&+\\\\-=!*]/)){\\n\\t\\tgs.addErrorMessage(msg);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn false;\\n\\t}\\n\\treturn true;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate handle name\"\n}```"}
{"prompt":"{\"prompt\":\"Check Live Feed Groups\",\"table\":\"asmt_assessable_record\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_assessable_record\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var hasLiveFeed = false;\\nvar gr = new GlideRecord(\\\"live_group_profile\\\");\\nif (gr.isValid()) {\\n\\tgr.addQuery(\\\"document\\\", current.source_id);\\n\\tgr.addQuery(\\\"table\\\", current.source_table);\\n\\tgr.query();\\n\\thasLiveFeed = gr.next();\\n}\\nif (current.live_feed == false) {\\n\\tif (hasLiveFeed) {\\n\\t\\tcurrent.live_feed = true;\\n\\t\\tcurrent.live_feed_group = gr;\\n\\t\\tcurrent.update();\\n\\t}\\n} else {\\n\\tif (!hasLiveFeed) {\\n\\t\\tcurrent.live_feed = false;\\n\\t\\tcurrent.live_feed_group = \\\"\\\";\\n\\t\\tcurrent.update();\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Check Live Feed Groups\"\n}```"}
{"prompt":"{\"prompt\":\"Restrict Label/Value Length\",\"table\":\"sys_translated\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_translated\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (current.value != undefined && current.value.toString().length > 255) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Value length exceeds 255 characters.\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn false;\\n\\t}\\n\\tif (current.label != undefined && current.label.toString().length > 255) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Label length exceeds 255 characters.\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn false;\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Restrict Label/Value Length\"\n}```"}
{"prompt":"{\"prompt\":\"Max elapsed time limit on retry after\",\"table\":\"sys_retry_policy\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_retry_policy\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\tvar max_elapsed_time = current.max_elapsed_time;\\n\\tvar property = new GlideRecord('sys_properties');\\n\\tproperty.addQuery('name', 'glide.fdih.retry.max_time_in_seconds');\\n\\tproperty.query();\\n\\tif (property.hasNext()) {\\n\\t\\tproperty.next();\\n\\t\\tvar value = property.getValue('value');\\n\\t\\tif (max_elapsed_time > value) {\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Max Elapsed Time value should not exceed {0} seconds\\\", value));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t} else if (max_elapsed_time > 86400) { //check for deafult 1 day max value\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Max Elapsed Time value should not exceed {0} seconds\\\", \\\"86400\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Max elapsed time limit on retry after\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Max Entries\",\"table\":\"sys_scoped_cache\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_scoped_cache\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar MAX_SIZE_PROPERTY = \\\"glide.cache.scoped.private_cache_max_entries\\\";\\n\\t\\tvar maxSize = parseInt(gs.getProperty(MAX_SIZE_PROPERTY, 1000));\\n\\t\\tvar maxEntries = parseInt(current.getValue('max_entries'));\\n\\n\\t\\tif (isNaN(maxEntries)) {\\n\\t\\t\\t\\tcurrent.setValue('max_entries', 0);\\n\\t\\t\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Max Entries should be an integer greater than or equal to 0.\\\"));\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (maxEntries > maxSize) {\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Max Entries cannot exceed {0}.\\\", maxSize));\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (maxEntries < 0) {\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Max Entries should be greater than or equal to 0.\\\"));\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"max_entriesVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate Max Entries\"\n}```"}
{"prompt":"{\"prompt\":\"Validate is main component field\",\"table\":\"cmdb_m2m_model_component\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_m2m_model_component\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"10\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Is main component field can not be set to true for bundle whose model category does not contain bundle\\\"));\\n\\tcurrent.setAbortAction(true);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"master=true^parent.cmdb_model_categoryNOT LIKE94028b6a1b5310002502fbcd2c071315^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate is main component field\"\n}```"}
{"prompt":"{\"prompt\":\"Update life cycle from legacy\",\"table\":\"ast_contract\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ast_contract\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"9999\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /* null when async */) {\\n\\tnew global.LifeCycleUtil().updateFromLegacy(current.getTableName(), current);\\n}(current, previous));\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"new LifeCycleUtil().isLifeCycleMigrationActivated() && (current.operation() == 'insert' || new LifeCycleUtil().shouldUpdateLegacy())\",\n\t\"name\": \"Update life cycle from legacy\"\n}```"}
{"prompt":"{\"prompt\":\"Update Flip Side\",\"table\":\"cmdb_rel_type_suggest\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_rel_type_suggest\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"updateFlip();\\n\\nfunction updateFlip() {\\n\\tvar flipRel = '';\\n\\tif (previous.relationship.indexOf('parent') == 0)\\n\\t\\tflipRel = ('child:' + previous.cmdb_rel_type).trim();\\n\\telse\\n\\t\\tflipRel = ('parent:' + previous.cmdb_rel_type).trim();\\n\\n\\t// Find the flip side relationship\\n\\tvar gr = new GlideRecord('cmdb_rel_type_suggest');\\n\\tgr.addQuery('cmdb_rel_type', previous.cmdb_rel_type);\\n\\tgr.addQuery('relationship', flipRel);\\n\\tgr.addQuery('base_class', previous.dependent_class);\\n\\tgr.addQuery('dependent_class', previous.base_class);\\n\\tgr.addQuery('sys_id','!=',current.sys_id);\\n\\tgr.query();\\n\\n\\t// Find the changed fields and apply it to the flip side relationship\\n\\tfindChangeAndApply(gr);\\n}\\n\\nfunction findChangeAndApply(gr) {\\n\\tvar relationshipChanged = fieldChanged('relationship');\\n\\tvar baseClassChanged = fieldChanged('base_class');\\n\\tvar dependentClassChanged = fieldChanged('dependent_class');\\n\\twhile (gr.next()) {\\n\\t\\tvar newRelationshipValue;\\n\\t\\tif (relationshipChanged) {\\n\\t\\t\\tif (current.relationship.indexOf('parent') == 0)\\n\\t\\t\\t\\tnewRelationshipValue = ('child:' + current.cmdb_rel_type).trim();\\n\\t\\t\\telse\\n\\t\\t\\t\\tnewRelationshipValue = ('parent:' + current.cmdb_rel_type).trim();\\n\\t\\t\\tgr.setValue('relationship', newRelationshipValue);\\n\\t\\t}\\n\\t\\tif (baseClassChanged) \\n\\t\\t\\tgr.setValue('dependent_class', current.base_class);\\n\\t\\tif(dependentClassChanged)\\n\\t\\t\\tgr.setValue('base_class', current.getValue('dependent_class'));\\n\\t\\tgr.skip_validation = true;\\n\\t\\tgr.update();\\n\\t}\\n}\\n\\nfunction fieldChanged(field) {\\n\\tif (previous.getValue(field) != current.getValue(field))\\n\\t\\treturn true;\\n\\treturn false;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update Flip Side\"\n}```"}
{"prompt":"{\"prompt\":\"AMB New or Updated Record\",\"table\":\"sys_ux_banner_announcement_config\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ux_banner_announcement_config\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tif ((previous.active == false && current.active == true) || (previous.active == true && current.active == false)) {\\n\\n\\t\\tvar records = {\\n\\t\\t\\t'current_config_name': current.name,\\n\\t\\t\\t'current_config_active': current.active,\\n\\t\\t\\t'previous_config_name': previous.name,\\n\\t\\t\\t'previous_config_active': previous.active,\\n\\t\\t\\t'operation': 'config_change',\\n\\t\\t\\t'current': current.sys_id,\\n\\t\\t\\t'previous': previous.sys_id\\n\\t\\t};\\n\\t\\tgs.publish('/uxbannerannouncements', records);\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"gs.getProperty('glide.ux.banner_announcement.realtime') == 'true'\",\n\t\"name\": \"AMB New or Updated Record\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent duplicate of input name\",\"table\":\"sys_sg_input\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_input\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\tvar gr = new GlideRecord(\\\"sys_sg_input\\\");\\n\\tgr.addNotNullQuery(\\\"parameter_screen\\\");\\n\\t\\tgr.addQuery(\\\"parameter_screen\\\", current.getValue(\\\"parameter_screen\\\"));\\n\\t\\tgr.addQuery(\\\"name\\\", current.getValue(\\\"name\\\"));\\n\\t\\tgr.query();\\n\\t\\tif (gr.next() && gr.getUniqueValue() != current.getUniqueValue()) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Duplicate parameter input name. \\\"));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent duplicate of input name\"\n}```"}
{"prompt":"{\"prompt\":\"Reset to Default Reference Qual\",\"table\":\"sys_dictionary\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_dictionary\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"clear();\\n\\nfunction clear(){\\n\\tif (current.reference_qual_condition.nil() && current.reference_qual.nil() )\\n\\t\\tcurrent.use_reference_qualifier = 'simple';\\n\\t}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(current.use_reference_qualifier == 'dynamic' || current.use_reference_qualifier == 'advanced' )\",\n\t\"name\": \"Reset to Default Reference Qual\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent multiple primary items\",\"table\":\"sn_ex_sp_activity_configuration\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_ex_sp_activity_configuration\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tvar itemGr = new GlideRecord(\\\"sn_ex_sp_activity_configuration\\\");\\n\\t\\titemGr.addQuery('primary', true);\\n\\t\\titemGr.addQuery('sys_id', '!=', current.getUniqueValue());\\n\\t\\titemGr.setLimit(1);\\n\\t\\titemGr.query();\\n\\t\\tif (itemGr.hasNext()) {\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Only one activity can be selected as the primary activity.\\\"));\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"primary=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent multiple primary items\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent using Run in Cloud when n/a\",\"table\":\"sys_atf_schedule\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_atf_schedule\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (!pm.isActive('sn_atf_tg')) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(gs.getMessage('ATF_TG:install_atf_cloud_runner_app', 'href=\\\"/api/now/v1/context_doc_url/Cloud_Runner_Browser\\\" style=\\\"display: contents;\\\" target=\\\"_blank\\\"'));\\n\\t\\tcurrent.run_in_cloud = false;\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"run_in_cloudCHANGESTOtrue^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent using Run in Cloud when n/a\"\n}```"}
{"prompt":"{\"prompt\":\"Update workflow version\",\"table\":\"wf_condition\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"wf_condition\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (!current.activity.workflow_version)\\n\\t\\treturn;\\n\\t\\n\\tvar gr = new GlideRecord(\\\"wf_workflow_version\\\");\\n\\n\\tif (gr.get(current.activity.workflow_version)) {\\n\\t\\tgr.setValue(\\\"sys_mod_count\\\", parseInt(gr.getValue(\\\"sys_mod_count\\\")) + 1);\\n\\t\\tgr.update();\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update workflow version\"\n}```"}
{"prompt":"{\"prompt\":\"Discovery - Generate hi/lo \",\"table\":\"dscy_route_interface\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"dscy_route_interface\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"generateHiLo();\\n\\nfunction generateHiLo() {\\n\\t\\tvar net = SncIPNetworkV4.getIPNetworkInstance(current.dest_ip_network);\\n\\t\\tif (!net)\\n\\t\\t\\t\\treturn;\\n\\n\\t\\tvar lo = net.getAddress().getAddressAsLong();\\n\\t\\tvar hi = net.getBroadcastAddress().getAddressAsLong();\\n\\t\\tcurrent.lo_ip = lo;\\n\\t\\tcurrent.hi_ip = hi;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"sys_class_name=dscy_route_interface^dest_ip_networkVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Discovery - Generate hi/lo \"\n}```"}
{"prompt":"{\"prompt\":\"getRefColumnDictionary\",\"table\":\"global\",\"when\":\"after\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function getRefColumnDictionary(){\\r\\n\\t var gr = new GlideRecord(\\\"sys_dictionary\\\");\\r\\n\\t gr.addQuery(\\\"name\\\", current.table);\\r\\n\\t gr.addQuery(\\\"reference\\\", current.parent.table);\\r\\n\\t gr.query();\\r\\n\\t var ids = \\\"\\\";\\r\\n\\t while(gr.next()){\\r\\n\\t\\t\\tif (ids.length > 0)\\r\\n\\t\\t\\t\\t ids += \\\",\\\";\\r\\n\\t\\t\\tids += gr.sys_id;\\r\\n\\t }\\r\\n\\t return 'sys_idIN' + ids;\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"getRefColumnDictionary\"\n}```"}
{"prompt":"{\"prompt\":\"Copy Initial Template\",\"table\":\"sn_diagram_builder_instance\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"false\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_diagram_builder_instance\",\n\t\"advanced\": \"false\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Copy Initial Template\"\n}```"}
{"prompt":"{\"prompt\":\"Update RTE Entity Definition from Parent\",\"table\":\"sys_rte_eb_field_mapping\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_rte_eb_field_mapping\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (!gs.nil(current.sys_rte_eb_entity_mapping))\\n\\t\\tcurrent.sys_rte_eb_definition = current.sys_rte_eb_entity_mapping.sys_rte_eb_definition;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update RTE Entity Definition from Parent\"\n}```"}
{"prompt":"{\"prompt\":\"Abort delete when simulation is running\",\"table\":\"sys_cs_auto_resolution_simulation_configuration\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cs_auto_resolution_simulation_configuration\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tcurrent.setAbortAction(true);\\n\\tvar redirectURL = AutoResolutionConstants.SIMULATION_CONFIG_TABLE_NAME + '.do?sys_id=' + current.getValue('sys_id');\\n\\tgs.setRedirect(redirectURL);\\n\\tgs.addErrorMessage(gs.getMessage(\\\"You can't delete a configuration during simulation. Please try again after the simulation completes, is cancelled, or reaches an error state.\\\"));\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"state=running^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Abort delete when simulation is running\"\n}```"}
{"prompt":"{\"prompt\":\"Validate location\",\"table\":\"sys_sg_location_item_stream\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_location_item_stream\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tvar table = current.getValue(\\\"table\\\");\\n\\t\\tvar location = current.getValue(\\\"location\\\");\\n\\t\\tvar references = location.split(\\\".\\\");\\n\\t\\tvar currentReferenceTable = table;\\n\\n\\t\\tfor (var i = 0; i < references.length; i++) {\\n\\t\\t\\t\\tvar refTable = new GlideRecord(currentReferenceTable);\\n\\t\\t\\t\\tif (!refTable.isValid()) {\\n\\t\\t\\t\\t\\t\\tcurrentReferenceTable = \\\"\\\";\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tcurrentReferenceTable = refTable.getElement(references[i]).getReferenceTable();\\n\\t\\t}\\n\\n\\t\\tif (current.getValue('location_source') === 'location') {\\n\\t\\t\\t\\tif (currentReferenceTable === \\\"cmn_location\\\")\\n\\t\\t\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Location must be referencing a source of type Locations (cmn_location).\\\"));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"is_custom_location=false^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate location\"\n}```"}
{"prompt":"{\"prompt\":\"Contract Instance\",\"table\":\"ast_contract_instance\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ast_contract_instance\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var contract = new GlideRecord(\\\"ast_contract\\\");\\r\\ncontract.get(current.ast_contract);\\r\\ncurrent.contract_type = contract.sys_class_name.getDisplayValue();\\r\\nvar ci = new GlideRecord(\\\"cmdb_ci\\\");\\r\\nci.get(current.ci_item);\\r\\ncurrent.ci_type = ci.sys_class_name.getDisplayValue();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Contract Instance\"\n}```"}
{"prompt":"{\"prompt\":\"Encrypted output field check\",\"table\":\"ml_capability_definition_regression\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ml_capability_definition_regression\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar gr = new GlideRecord(current.table);\\n\\tvar field = '';\\n\\tif (current.getValue('output_field')) \\n\\t\\tfield = current.getValue('output_field');\\n\\t\\tvar ed = gr.getElement(field).getED();\\n\\t\\tvar isEdgeEncryption = ed.isEdgeEncrypted();\\n\\t\\tvar isPlatformEncryption = ed.isEncrypted();\\n\\n\\t\\tif (isEdgeEncryption) {\\n\\t\\t\\tvar errorMessage = gs.getMessage('Output field cannot be encrypted');\\n\\t\\t\\tgs.addErrorMessage(errorMessage);\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t} else if (isPlatformEncryption) {\\n\\t\\t\\tvar message = gs.getMessage('The field {0} is platform encrypted. Please ensure you assign the correct role to sharedservice.worker in order to build an accurate model.', gr.getElement(field).getLabel());\\n\\t\\t\\tgs.addInfoMessage(message);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Encrypted output field check\"\n}```"}
{"prompt":"{\"prompt\":\"Application Administration\",\"table\":\"sys_app\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_app\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\tif (JSUtil.getBooleanValue(current, 'scoped_administration') && !GlideProperties.getBoolean('glide.security.scoped_administration', true)) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Application administration is not enabled on this instance.\\\"));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t\\n\\t\\tvar sa = new ScopedAdministration();\\n\\t\\tvar scopeAdminRoles = sa.getScopeAdminRolesArray(current);\\n\\t\\tvar preface = gs.getMessage(\\\"Application Administration uses the 'Application Administrator' role to define what users are application administrators.\\\");\\n\\t\\t\\n\\t\\tif (JSUtil.getBooleanValue(current, 'scoped_administration') && scopeAdminRoles.length == 0) {\\n\\t\\t\\t\\tgs.addErrorMessage(preface + \\\" \\\" + gs.getMessage(\\\"None of the roles defined by this application have 'Application Administrator' enabled.\\\"));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (JSUtil.getBooleanValue(current, 'scoped_administration') && !sa.currentUserIsScopeAdmin(current, true)) {\\n\\t\\t\\t\\tgs.addErrorMessage(preface + \\\" \\\" + gs.getMessage(\\\"The logged-in user must have the 'Application Administrator' role to enable Application Administration.\\\"));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t\\n\\t\\tGlideCacheManager.flush('application_menu_list');\\n\\t\\tGlideCacheManager.flush('application_rest_menu_list');\\n\\t\\tGlideCacheManager.flush('sys_ui_action_service');\\n\\t\\tGlideCacheManager.flush('syscache_realform');\\n\\t\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.scoped_administration.changes()\",\n\t\"name\": \"Application Administration\"\n}```"}
{"prompt":"{\"prompt\":\"MIB should not be omitted\",\"table\":\"ecc_agent_mib\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_agent_mib\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function() {\\n\\tvar sysAttachmentRecord = new GlideRecord(\\\"sys_attachment\\\");\\n\\tsysAttachmentRecord.addQuery(\\\"table_name\\\", \\\"ecc_agent_mib\\\");\\n\\tsysAttachmentRecord.addQuery(\\\"table_sys_id\\\", current.sys_id);\\n\\tsysAttachmentRecord.query();\\n\\tif (!sysAttachmentRecord.next()) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Setting the Active flag to false because no MIB was attached\\\"));\\n\\t\\tcurrent.active = false;\\n\\t}\\n})();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.active == true\",\n\t\"name\": \"MIB should not be omitted\"\n}```"}
{"prompt":"{\"prompt\":\"Clear User Filter if Any Roled User\",\"table\":\"sys_broadcast_message\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_broadcast_message\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*undefined when async or display*/) {\\n\\n\\t// Add your code here\\n\\n})(current, typeof previous != 'undefined' ?\\tprevious : null);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"any_roled_user=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear User Filter if Any Roled User\"\n}```"}
{"prompt":"{\"prompt\":\"Incident State Change to In Progress\",\"table\":\"incident\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"incident\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"commentsVALCHANGES^state=3^hold_reason=1^caller_idDYNAMIC90d1921e5f510100a9ad2572f2b477fe^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Incident State Change to In Progress\"\n}```"}
{"prompt":"{\"prompt\":\"Add to Member Whitelist\",\"table\":\"sys_whitelist_member\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_whitelist_member\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.operation() == \\\"update\\\") {\\n\\tGlideWhiteListManager.get().removeFromMemberWhitelist(previous.classname, previous.membername, previous.signature);\\n}\\n\\nGlideWhiteListManager.get().addToMemberWhitelist(current.classname, current.membername, current.signature);\\nGlideClusterMessage.post(\\\"whitelist\\\", \\\"ReloadMembers\\\");\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Add to Member Whitelist\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent deletion while in progress\",\"table\":\"ecc_agent_ext_context\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_agent_ext_context\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.addErrorMessage(gs.getMessage('Cannot delete an active extension context while it is running'));\\ncurrent.setAbortAction(true);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.status == \\\"Starting\\\" || current.status == \\\"Restarting\\\" || current.status == \\\"Started\\\"\",\n\t\"name\": \"Prevent deletion while in progress\"\n}```"}
{"prompt":"{\"prompt\":\"Approval definition changed\",\"table\":\"sc_ic_aprvl_defn_staging\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_ic_aprvl_defn_staging\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"sc_ic_Factory.wrap(current).setAprvlDefnChangedOnItem();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Approval definition changed\"\n}```"}
{"prompt":"{\"prompt\":\"ValidatePercentCompleteForMilestoneType\",\"table\":\"sn_gf_goal_target\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_gf_goal_target\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"50\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\t// Add your code here\\n\\t\\tif (parseFloat(current.getValue('percent_complete')) != 0 && parseFloat(current.getValue('percent_complete')) != 100) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('Percent complete can be either 0 or 100 for milestone type.'));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"type=milestone^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"ValidatePercentCompleteForMilestoneType\"\n}```"}
{"prompt":"{\"prompt\":\"Cancel change_tasks\",\"table\":\"change_request\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar chgScript = new ChangeRequest(current);\\n\\tchgScript.cancelAssociatedTasks();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"new ChangeRequest(current).changesToCanceled()\",\n\t\"name\": \"Cancel change_tasks\"\n}```"}
{"prompt":"{\"prompt\":\"Scrub creator and editor URLs\",\"table\":\"sn_app_eng_studio_taxonomy\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_app_eng_studio_taxonomy\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Verify that neither the creator or editor URLs contain any new lines.\\n\\t\\n\\tvar creatorUrl = current.creator_url;\\n\\tvar editorUrl = current.editor_url;\\n\\t\\n\\tif (!gs.nil(creatorUrl))\\n\\t\\tcurrent.creator_url = stripNewLineChars(creatorUrl);\\n\\t\\n\\tif (!gs.nil(editorUrl))\\n\\t\\tcurrent.editor_url = stripNewLineChars(editorUrl);\\n\\n\\tfunction stripNewLineChars(rawUrl) {\\n\\t\\tvar newLineExpr = /\\\\r?\\\\n|\\\\r/g;\\n\\t\\treturn rawUrl.replace(newLineExpr, \\\"\\\");\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Scrub creator and editor URLs\"\n}```"}
{"prompt":"{\"prompt\":\"Abort change on role inh_count property\",\"table\":\"sys_properties\",\"when\":\"before\",\"actions\":\"ud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"\\n\\t\\t\\tname=glide.role_management.use.inh_count^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Abort change on role inh_count property\"\n}```"}
{"prompt":"{\"prompt\":\"All metadata permissions\",\"table\":\"sys_appcollab_permission_m2m\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_appcollab_permission_m2m\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"50\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tvar gr = new GlideRecord('sys_development_permission_set');\\n\\t\\tgr.addQuery('type', 'permission_restricted');\\n\\t\\tgr.query();\\n\\n\\t\\tvar pm2mGr = new GlideRecord('sys_appcollab_permission_m2m');\\n\\t\\tvar descriptorId = current.descriptor;\\n\\n\\t\\twhile (gr.next()) {\\n\\t\\t\\t\\tvar permissionId = gr.sys_id;\\n\\n\\t\\t\\t\\tpm2mGr.initialize();\\n\\t\\t\\t\\tpm2mGr.addQuery('descriptor', descriptorId);\\n\\t\\t\\t\\tpm2mGr.addQuery('permission', permissionId);\\n\\t\\t\\t\\tpm2mGr.query();\\n\\n\\t\\t\\t\\tif (!pm2mGr.hasNext()) {\\n\\t\\t\\t\\t\\t\\tpm2mGr.initialize();\\n\\t\\t\\t\\t\\t\\tpm2mGr.setWorkflow(false);\\n\\t\\t\\t\\t\\t\\tpm2mGr.descriptor = descriptorId;\\n\\t\\t\\t\\t\\t\\tpm2mGr.permission = permissionId;\\n\\t\\t\\t\\t\\t\\tpm2mGr.insert();\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.permission.type == 'all_metadata'\",\n\t\"name\": \"All metadata permissions\"\n}```"}
{"prompt":"{\"prompt\":\"ConnectionPoolerSanityCheck\",\"table\":\"sys_properties\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"1\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\t\\n\\t\\n\\t// must be greater than absolute minimum pool size (2)\\n\\tif (current.value <= 2) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Initial connection pool size must be greater than two\\\"));\\n\\t\\tgs.warn(\\\"Did not allow \\\" + current.name + \\\" to be set to \\\" + current.value + \\\" since connection pool size can't be less than or equal to two.\\\");\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\t// must be less than absolute maximum (32 or max_transaction_limit)\\n\\tvar maxLimit = new GlideRecord(\\\"sys_properties\\\");\\n\\tvar hasLimit = maxLimit.get(\\\"name\\\", \\\"glide.ui.max_transaction_limit\\\");\\n\\tvar absoluteMax = hasLimit ? absMax.value : 32;\\n\\t \\n\\tif (current.value > absoluteMax) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Connection pool size cannot be greater than {0}\\\", absoluteMax));\\n\\t\\tgs.warn(\\\"Did not allow \\\" + current.name + \\\" to be set to \\\" + current.value + \\\" as it exceeds the maximum allowable value \\\" + absoluteMax);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn;\\n\\t}\\n\\tvar success = gs.getMessage(\\\"Properties were modified\\\");\\n\\tif (!gs.getInfoMessages().contains(success))\\n\\t\\tgs.addInfoMessage(success);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.name == \\\"glide.db.pooler.connections\\\"\\t||\\tcurrent.name == \\\"glide.db.pooler.connections.max\\\"\",\n\t\"name\": \"ConnectionPoolerSanityCheck\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent Change of OOB Node Type Names\",\"table\":\"sys_node_type\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_node_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar prevName = previous.getValue(\\\"name\\\");\\n\\tvar curName = current.getValue(\\\"name\\\");\\n\\tvar defaultNodeTypes = new VNCCNodeUtil().getDefaultNodeTypes();\\n\\tif (defaultNodeTypes.indexOf(prevName) > -1 && curName != prevName) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Cannot change names of default node types\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent Change of OOB Node Type Names\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent Recursion in Schedules\",\"table\":\"cmn_schedule\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmn_schedule\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/**\\r\\n Service-now.com \\r\\n\\r\\n Description:\\tPrevent recursion.\\tA parent schedule can't loop back to itself.\\tSchedule A can't be a parent of Schedule A.\\r\\n**/ \\r\\nif (ScheduleValidation.isRecursive(current))\\r\\n\\t current.setAbortAction(true);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.parent.changes()\",\n\t\"name\": \"Prevent Recursion in Schedules\"\n}```"}
{"prompt":"{\"prompt\":\"PA External Breakdown\",\"table\":\"pa_breakdowns\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_breakdowns\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tg_scratchpad.sql_statement = current.sql_statement;\\n\\tg_scratchpad.sys_id = current.sys_id;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"PA External Breakdown\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent Recursion in Other Schedules\",\"table\":\"cmn_other_schedule\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmn_other_schedule\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/**\\r\\n Service-now.com\\r\\n\\r\\n Description:\\tPrevent recursion in schedules.\\t\\r\\n Given two schedules A and B, if B is included as a other schedule of A then A can't be included as a other schedule of B.\\r\\n\\r\\nPrevents this Scenario:\\r\\nSchedule:\\tA, Child Schedule:\\tB\\r\\nSchedule:\\tB, Child Schedule:\\tA\\r\\n**/ \\r\\n\\r\\nvar child = current.child_schedule;\\r\\nvar parent = current.schedule;\\r\\n\\r\\nvar other = new GlideRecord(\\\"cmn_other_schedule\\\");\\r\\nother.addQuery(\\\"child_schedule\\\", parent);\\r\\nother.addQuery(\\\"schedule\\\", child);\\r\\nother.query();\\r\\nif (other.getRowCount() > 0) {\\r\\n\\t current.setAbortAction(true);\\r\\n\\t gs.addErrorMessage(gs.getMessage('The other schedule loops back to this record (recursive schedule loop)'));\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent Recursion in Other Schedules\"\n}```"}
{"prompt":"{\"prompt\":\"Put reference fields in scratch pad\",\"table\":\"m2m_connected_content\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"m2m_connected_content\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar contentReferenceFieldMap = new global.ContentConfigUtil().getContentReferenceFieldMap();\\n\\tg_scratchpad.referenceFieldMap = contentReferenceFieldMap;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Put reference fields in scratch pad\"\n}```"}
{"prompt":"{\"prompt\":\"Sync rich_description with description\",\"table\":\"sn_hr_core_case\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_case\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar description = current.getValue(\\\"description\\\");\\n\\tif (description.indexOf(\\\"\\\\t\\\") >= 0) {\\n\\t\\tdescription = description.replace(/\\\\t/g, '&emsp;&emsp;');\\n\\t}\\n\\t\\n\\tvar lines = description.split(\\\"\\\\n\\\");\\n\\t\\n\\tvar rich_description = lines.map(function(line) {\\n\\t\\treturn '<p>' + line + '</p>';\\n\\t}).join(\\\"\\\");\\n\\n\\tcurrent.rich_description = rich_description;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"rich_descriptionISEMPTY^descriptionISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Sync rich_description with description\"\n}```"}
{"prompt":"{\"prompt\":\"Check compatibility with label viewable_\",\"table\":\"label_group_m2m\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"label_group_m2m\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"checkCompatibility();\\n\\nfunction checkCompatibility() {\\n\\tvar label = new GlideRecord('label');\\n\\tif (label.get(current.label)) {\\n\\t\\tif (label.viewable_by == 'everyone') {\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\tgs.addErrorMessage(gs.getmessage('Tag is already shared with everyone in the system'));\\n\\t\\t}\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"granted_byISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Check compatibility with label viewable_\"\n}```"}
{"prompt":"{\"prompt\":\"Handle Classification Change\",\"table\":\"em_alert\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"em_alert\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(current, previous) {\\n\\t //This function will be automatically called when this rule is processed.\\n\\tvar alertManager = new SNC.AlertManager();\\n\\talertManager.addStep(\\\"Alert BR: Handle Classification Change (after)\\\");\\n\\t gs.log(\\\"Classification has changed. Start.\\\");\\n\\tvar im = new SNC.ImpactManager();\\n\\tim.handleClassificationChanged(current);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.getValue('classification') !== previous.getValue('classification')\",\n\t\"name\": \"Handle Classification Change\"\n}```"}
{"prompt":"{\"prompt\":\"Create m2m_kb_task record on attach\",\"table\":\"cxs_rel_doc_detail\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cxs_rel_doc_detail\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.cxs_relevant_doc.source_doc) { // for existing records\\n\\t\\tvar kbScript = new KnowledgeAjax();\\n\\t\\tkbScript.kbAttachArticle(current.relevant_doc + \\\",\\\" + current.cxs_relevant_doc.source_doc,current.relevant_doc_url);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"relevance=attach^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Create m2m_kb_task record on attach\"\n}```"}
{"prompt":"{\"prompt\":\"Close/reopen related GOG alerts\",\"table\":\"em_alert\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"em_alert\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tif (!current.sn_extra_data) {\\n\\t\\t\\t\\treturn; // if there's no extra data, this is not a Log Analytics alert\\n\\t\\t}\\n\\n\\t\\tvar additionalInfo = JSON.parse(current.additional_info);\\n\\t\\tif (!additionalInfo.sn_partofGOGgroup) {\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tvar USER_CAN_SET_STATE = {\\n\\t\\t\\t\\tANY: \\\"1\\\",\\n\\t\\t\\t\\tCLOSE: \\\"2\\\",\\n\\t\\t\\t\\tNONE: \\\"3\\\"\\n\\t\\t};\\n\\n\\t\\tvar allowSettingState = additionalInfo.sn_allow_setting_state;\\n\\t\\tif (allowSettingState == USER_CAN_SET_STATE.NONE) {\\n\\t\\t\\t\\t// \\\"None\\\" means this is a L3 alert that cannot be opened or closed directly by users, so this business rule has nothing to do here.\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t// Assumption: there is a previous business rule that ensured that we are allowed to change the state of this alert,\\n\\t\\t// so no further validation need be done here. We are just going to close/reopen related alerts as necessary.\\n\\t\\tvar parentGR = current.parent.getRefRecord();\\n\\t\\tif (current.state == \\\"Closed\\\") {\\n\\t\\t\\t\\t// 1. Close all my children\\n\\t\\t\\t\\tupdateAllChildren(current, \\\"Closed\\\");\\n\\n\\t\\t\\t\\t// 2. If I was the last open child of my parent, close the parent.\\n\\t\\t\\t\\tvar openSiblings = new GlideRecord(\\\"em_alert\\\");\\n\\t\\t\\t\\topenSiblings.addQuery(\\\"parent\\\", current.parent);\\n\\t\\t\\t\\topenSiblings.addQuery(\\\"state\\\", \\\"!=\\\", \\\"Closed\\\");\\n\\t\\t\\t\\topenSiblings.query();\\n\\t\\t\\t\\tvar openCount = openSiblings.getRowCount();\\n\\t\\t\\t\\tif (openCount == 0) {\\n\\t\\t\\t\\t\\t\\tparentGR.state = \\\"Closed\\\";\\n\\t\\t\\t\\t\\t\\tparentGR.update();\\n\\t\\t\\t\\t}\\n\\t\\t} else { // reopen\\n\\t\\t\\t\\tif (allowSettingState == USER_CAN_SET_STATE.CLOSE) {\\n\\t\\t\\t\\t\\t\\t// this is an alert that could not have been reopened directly, so nothing to do here.\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// 1. Reopen my parent\\n\\t\\t\\t\\tif (parentGR.state == \\\"Closed\\\") {\\n\\t\\t\\t\\t\\t\\tparentGR.state = \\\"Reopen\\\";\\n\\t\\t\\t\\t\\t\\tparentGR.update();\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// 2. Reopen all my children\\n\\t\\t\\t\\tupdateAllChildren(current, \\\"Reopen\\\");\\n\\t\\t}\\n\\n\\t\\tfunction updateAllChildren(alert, state) {\\n\\t\\t\\t\\tvar childGR = new GlideRecord(\\\"em_alert\\\");\\n\\t\\t\\t\\tchildGR.addQuery(\\\"parent\\\", alert.sys_id);\\n\\t\\t\\t\\tchildGR.setValue(\\\"state\\\", state);\\n\\t\\t\\t\\tchildGR.updateMultiple(); // this will trigger this same rule in turn on all children\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"stateVALCHANGES^additional_infoLIKEsn_partofGOGgroup^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Close/reopen related GOG alerts\"\n}```"}
{"prompt":"{\"prompt\":\"Remove License Count Config\",\"table\":\"license_details\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"license_details\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// If a license is ever deleted (should never happen, unless MAINT deletes it)\\n// delete the corresponding count config entries\\nvar licence_count_cfg = new LicenseCountConfig(current.name, current.license_type, current.license_id);\\nlicence_count_cfg.deleteCountCfg();\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Remove License Count Config\"\n}```"}
{"prompt":"{\"prompt\":\"Add Fulfillment Process set\",\"table\":\"sc_cat_item_producer\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_cat_item_producer\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tvar targetTable = current.getValue('table_name');\\n\\t\\tif (targetTable) {\\n\\t\\t\\t\\tvar targetGR = new GlideRecord(targetTable);\\n\\t\\t\\t\\tif (targetGR.isValid() && targetGR.instanceOf('sc_service_fulfillment_step')) {\\n\\t\\t\\t\\t\\t\\tvar ioSetGR = new GlideRecord('io_set_item');\\n\\t\\t\\t\\t\\t\\tioSetGR.addQuery('sc_cat_item', current.getUniqueValue());\\n\\t\\t\\t\\t\\t\\tioSetGR.addQuery('variable_set', '73c0764073122010ae42d31ee2f6a77a');\\n\\t\\t\\t\\t\\t\\tioSetGR.query();\\n\\t\\t\\t\\t\\t\\tif (ioSetGR.next())\\n\\t\\t\\t\\t\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t\\t\\t\\tioSetGR.setValue('sc_cat_item', current.getUniqueValue());\\n\\t\\t\\t\\t\\t\\tioSetGR.setValue('variable_set', '73c0764073122010ae42d31ee2f6a77a');\\n\\t\\t\\t\\t\\t\\tioSetGR.setValue('order', 9999);\\n\\t\\t\\t\\t\\t\\tioSetGR.insert();\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Add Fulfillment Process set\"\n}```"}
{"prompt":"{\"prompt\":\"Enforce Parent being in layer above\",\"table\":\"spm_taxonomy_node\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"spm_taxonomy_node\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t//\\n\\t// explicitly handle the common error case of parent and child in same taxonomy node\\n\\t// to be able to give more helpful error messages to a user\\n\\t//\\n\\tvar parentTaxonomyLayer = current.parent.spm_taxonomy_layer;\\n\\tvar currentTaxonomyLayer = current.spm_taxonomy_layer;\\n\\tvar currentTaxonomyLayerLabel = currentTaxonomyLayer.getLabel().toLowerCase();\\n\\t\\n\\tif (parentTaxonomyLayer && currentTaxonomyLayer && \\n\\t\\tparentTaxonomyLayer.getValue('sys_id') === currentTaxonomyLayer.getValue('sys_id')) {\\n\\t\\t\\n\\t\\tgs.addErrorMessage(gs.getMessage('This child node cannot exist in the same {0} as its parent node',[\\n\\t\\t\\tcurrentTaxonomyLayerLabel\\n\\t\\t]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\t// \\n\\t// Ensure that the taxonomy layer for new node must be the immediate layer \\n\\t// sequentially after the new node's parent layer \\n\\t//\\n\\tvar parentLayerOrder = parentTaxonomyLayer.order;\\n\\n\\tvar gr = new GlideRecord('spm_taxonomy_layer_definition');\\n\\tgr.orderBy('order');\\n\\tgr.setLimit(1);\\n\\tgr.addQuery('order', '>', parentLayerOrder);\\n\\tgr.addQuery('spm_service_portfolio', current.spm_service_portfolio);\\n\\tgr.query();\\n\\t\\n\\t// The first result should be the layer right after the parent's layer\\n\\tif (!gr.next()){\\n\\t\\tgs.addErrorMessage(gs.getMessage('There is no sequential {0}',[\\n\\t\\t\\tcurrentTaxonomyLayerLabel\\n\\t\\t]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\tvar currentLayerId = currentTaxonomyLayer.getValue('sys_id');\\n\\tvar nextLayerFromParentId = gr.getValue('sys_id');\\n\\t\\n\\tif (currentLayerId != nextLayerFromParentId){\\n\\t\\tgs.addErrorMessage(gs.getMessage('This node\\\\'s {0} and its\\\\' parent node\\\\'s {1} are not in sequence', [\\n\\t\\t\\tcurrentTaxonomyLayerLabel,\\n\\t\\t\\tcurrentTaxonomyLayerLabel\\n\\t\\t]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\t\\t\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"parentISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Enforce Parent being in layer above\"\n}```"}
{"prompt":"{\"prompt\":\"Set Rule Local In ScratchPad\",\"table\":\"ais_rule\",\"when\":\"before_display\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ais_rule\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tg_scratchpad.rule_locale = current.locale;\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set Rule Local In ScratchPad\"\n}```"}
{"prompt":"{\"prompt\":\"Set Import Set Asynchronous\",\"table\":\"sn_hr_integrations_staging\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_integrations_staging\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"50\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar hrIntUtils = new global.HRIntegrationsUtils();\\n\\thrIntUtils.createImportSetAsynchronous(current);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"job_run_idISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Set Import Set Asynchronous\"\n}```"}
{"prompt":"{\"prompt\":\"Inherit commenting and suggesting\",\"table\":\"kb_knowledge\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"kb_knowledge\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\tcurrent.disable_commenting = current.kb_knowledge_base.disable_commenting;\\n\\tcurrent.disable_suggesting = current.kb_knowledge_base.disable_suggesting;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"sys_class_name!=kb_knowledge_block^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Inherit commenting and suggesting\"\n}```"}
{"prompt":"{\"prompt\":\"Display catalog item\",\"table\":\"sys_atf_step\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_atf_step\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.inputs.catalog_item == \\\"\\\") {\\n\\t\\tcurrent.inputs.catalog_item = SCATFUtil.getLastUsedCatalogItemInTestBasedOnStep(current);\\n\\t\\tif (!current.inputs.catalog_item) {\\n\\t\\t\\tif (current.step_config.category == '1d786c87c3b6220076173b0ac3d3ae16')\\n\\t\\t\\t\\tgs.addInfoMessage(gs.getMessage(\\\"This step cannot be used before 'Open a Catalog Item' or 'Open a Record Producer' step. If contextual value has been used for 'Open a Catalog Item' or 'Open a Record Producer' in step before, set the 'Item' record in this step.\\\"));\\n\\t\\t\\telse if (current.step_config.category == '01245d698713030070870cf888cb0bfb')\\n\\t\\t\\t\\tgs.addInfoMessage(gs.getMessage(\\\"This step cannot be used before 'Open a Catalog Item(SP)', 'Open a Record Producer(SP)' or 'Open an Order Guide (SP)' step. If contextual value has been used for 'Open a Catalog Item(SP)', 'Open a Record Producer(SP)' or 'Open an Order Guide (SP)' in step before, set the 'Item' record in this step.\\\"));\\n\\t\\t}\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"step_config=33f637e8c3ba220076173b0ac3d3aee1^ORstep_config=5a36c681c37e220076173b0ac3d3aecf^ORstep_config=323ca6e1c3b2220076173b0ac3d3aec1^ORstep_config=70a083b0c323220076173b0ac3d3aee8^ORstep_config=2e4229b48703030070870cf888cb0b5c^ORstep_config=2c8882759f1303002528d4b4232e708a^ORstep_config=1ebb17799f1303002528d4b4232e70c0^ORstep_config=095c4877732b03008e6b0d573cf6a717^ORstep_config=c7d557d673002300688e0d573cf6a74f^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Display catalog item\"\n}```"}
{"prompt":"{\"prompt\":\"Restrict edit if the item is checked out\",\"table\":\"sc_cat_item\",\"when\":\"before\",\"actions\":\"ud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_cat_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Restrict edit if the item is checked out\"\n}```"}
{"prompt":"{\"prompt\":\"Sync Disable Commenting\",\"table\":\"kb_knowledge_base\",\"when\":\"async\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"kb_knowledge_base\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar kbKnowledge = new GlideRecord(\\\"kb_knowledge\\\");\\n\\tkbKnowledge.addQuery(\\\"kb_knowledge_base\\\", current.sys_id);\\n\\tkbKnowledge.addQuery('disable_commenting','!=',current.disable_commenting);\\n\\tkbKnowledge.setWorkflow(false);\\n\\tkbKnowledge.query();\\n\\t\\n\\twhile (kbKnowledge.next()){\\n\\t\\tkbKnowledge.setValue(\\\"disable_commenting\\\", current.disable_commenting);\\n\\t\\tkbKnowledge.setWorkflow(false);\\n\\t\\tkbKnowledge.autoSysFields(false);\\n\\t\\tkbKnowledge.update();\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!previous || current.disable_commenting.changes()\",\n\t\"name\": \"Sync Disable Commenting\"\n}```"}
{"prompt":"{\"prompt\":\"Check if entities are the same\",\"table\":\"sys_rte_eb_entity_mapping\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_rte_eb_entity_mapping\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.source_sys_rte_eb_entity == current.target_sys_rte_eb_entity){\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Source and Target entity can not be the same entity.\\\"));\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Check if entities are the same\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent recursive dependencies\",\"table\":\"asmt_metric\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_metric\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var dependsOn = current.depends_on;\\nwhile (dependsOn) {\\n\\tif (dependsOn.sys_id == current.sys_id) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('Setting Depends on to that metric would create up a circular dependency'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tbreak;\\n\\t}\\n\\tdependsOn = dependsOn.depends_on;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"depends_onISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent recursive dependencies\"\n}```"}
{"prompt":"{\"prompt\":\"request closure\",\"table\":\"sc_request\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t// we just closed this requested item. Have to cancel its approvals\\n\\tvar request = new SNC.Request(current);\\n\\tif (request)\\n\\t\\trequest.cancelRelatedRecords();\\n})(current, previous);\\n\\n\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.request_state.changes() && (current.request_state == 'closed_cancelled')\",\n\t\"name\": \"request closure\"\n}```"}
{"prompt":"{\"prompt\":\"Disable default rule edit\",\"table\":\"em_impact_rule\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"em_impact_rule\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"101\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\t/// disable edit for default rules\\n\\tif (previous.business_service == null || previous.business_service == ''){\\n\\t\\tcurrent.name = previous.name;\\n\\t\\tcurrent.business_service = previous.business_service;\\n\\t\\tcurrent.cmdb_ci = previous.cmdb_ci;\\n\\t\\tcurrent.impact_rule_definition = previous.impact_rule_definition;\\n\\t\\tcurrent.contribution_type = previous.contribution_type;\\n\\t\\tcurrent.contribution = previous.contribution;\\n\\t\\tcurrent.critical = previous.critical;\\n\\t\\tcurrent.major = previous.major;\\n\\t\\tcurrent.minor = previous.minor;\\n\\t\\tcurrent.warning = previous.warning;\\n\\t\\tcurrent.impact_on = previous.impact_on;\\n\\t}\\n}\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Disable default rule edit\"\n}```"}
{"prompt":"{\"prompt\":\"on_choosing_specific_task_type\",\"table\":\"help_user_interaction_step\",\"when\":\"async_always\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"help_user_interaction_step\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async_always\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\n\\t\\tvar data = {\\n\\n\\t\\t\\t\\tactive_setup_type: current.user_interaction && current.user_interaction.active_setup_type,\\n\\t\\t\\t\\tsys_package: current.user_interaction && current.user_interaction.guidance && current.user_interaction.guidance.sys_package.getDisplayValue(),\\n\\t\\t\\t\\tsys_scope: current.user_interaction && current.user_interaction.guidance && current.user_interaction.guidance.sys_scope.getDisplayValue(),\\n\\t\\t\\t\\tsnc_created: current.user_interaction && current.user_interaction.guidance && current.user_interaction.guidance.snc_created,\\n\\t\\t\\t\\tstream_name: \\\"on_choosing_specific_task_type\\\"\\n\\n\\t\\t};\\n\\n\\t\\tvar controller = new SNHelpSetupAnalyticsController();\\n\\t\\tcontroller.logData(controller.CATEGORY, controller.POINT, controller.ACTIVE_SETUP_TYPE_EVENT, data);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"statusCHANGESTOin_progress^step.type=activity^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"on_choosing_specific_task_type\"\n}```"}
{"prompt":"{\"prompt\":\"Choice Events\",\"table\":\"sys_choice\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_choice\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.name == 'change_request' && current.element == 'phase') {\\r\\n\\t if (current.operation() == 'insert')\\r\\n\\t\\t\\taddChangePhase(current);\\r\\n\\t else if (current.operation() == 'delete') \\r\\n\\t\\t\\tdeleteChangePhase(current);\\r\\n\\t else if (current.operation() == 'update') {\\r\\n\\t\\t\\tif (current.value.changes()) {\\r\\n\\t\\t\\t\\t deleteChangePhase(previous);\\r\\n\\t\\t\\t\\t addChangePhase(current);\\r\\n\\t\\t\\t}\\r\\n\\t }\\r\\n}\\r\\n\\r\\nfunction addChangePhase(current) {\\r\\n\\t var gp = new GlideRecord('sys_choice');\\r\\n\\t gp.addQuery('name', '=', 'change_phase');\\r\\n\\t gp.addQuery('element', '=', 'name');\\r\\n\\t gp.addQuery('value', '=', current.value);\\r\\n\\t gp.query();\\r\\n\\t if (!gp.next()) {\\r\\n\\t\\t\\tgp.initialize();\\r\\n\\t\\t\\tgp.name='change_phase';\\r\\n\\t\\t\\tgp.element='name';\\r\\n\\t\\t\\tgp.value=current.value;\\r\\n\\t\\t\\tgp.label=current.label;\\r\\n\\t\\t\\tgp.insert();\\r\\n\\t }\\r\\n}\\r\\n\\r\\nfunction deleteChangePhase(me) {\\r\\n\\t var gc = new GlideRecord('sys_choice');\\r\\n\\t gc.addQuery('name', '=', 'change_request');\\r\\n\\t gc.addQuery('element', '=', 'phase');\\r\\n\\t gc.addQuery('value', '=', me.value);\\r\\n\\t gc.query();\\r\\n\\t if (!gc.next()) {\\r\\n\\t\\t\\tvar gp = new GlideRecord('sys_choice');\\r\\n\\t\\t\\tgp.addQuery('name', '=', 'change_phase');\\r\\n\\t\\t\\tgp.addQuery('element', '=', 'name');\\r\\n\\t\\t\\tgp.addQuery('value', '=', me.value);\\r\\n\\t\\t\\tgp.query();\\r\\n\\t\\t\\tif (gp.next())\\r\\n\\t\\t\\t\\t gp.deleteRecord();\\r\\n\\t }\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Choice Events\"\n}```"}
{"prompt":"{\"prompt\":\"Draft Shift - Make Inactive\",\"table\":\"cmn_rota\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmn_rota\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"state=draft^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Draft Shift - Make Inactive\"\n}```"}
{"prompt":"{\"prompt\":\"Close Tasks Due to Cancellations\",\"table\":\"sc_req_item\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_req_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"abortKids();\\nfunction abortKids() {\\n\\tif (current.sys_id == '')\\n\\t\\t return;\\n\\n\\tvar kids = new GlideRecord('sc_task');\\n\\tkids.addQuery('parent', current.sys_id);\\n\\tkids.orderBy('order');\\n\\tkids.query();\\n\\twhile (kids.next()) {\\n\\t\\tkids.state = 4;\\n\\t\\tkids.update();\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.stage=='Request Cancelled' && current.stage.changes()\",\n\t\"name\": \"Close Tasks Due to Cancellations\"\n}```"}
{"prompt":"{\"prompt\":\"Verify unique response template name\",\"table\":\"sn_templated_snip_note_template\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_templated_snip_note_template\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar templateGR = new GlideRecord('sn_templated_snip_note_template');\\n\\ttemplateGR.addQuery('name', current.name);\\n\\ttemplateGR.addQuery('sys_id', '!=', current.getUniqueValue());\\n\\ttemplateGR.setLimit(1);\\n\\ttemplateGR.query();\\n\\t\\n\\tif (templateGR.hasNext()) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Template with name '{0}' already exists.\\\", current.name));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!gs.nil(current.name) || current.name.changes()\",\n\t\"name\": \"Verify unique response template name\"\n}```"}
{"prompt":"{\"prompt\":\"Update multiple experience flag\",\"table\":\"sys_properties\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar gr = new GlideRecord(\\\"sys_ux_app\\\");\\n\\t\\tgr.addQuery(\\\"sys_id\\\", \\\"c86a62e2c7022010099a308dc7c26022\\\");\\n\\t\\tgr.setValue(\\\"multiple_experiences\\\", current.value);\\n\\t\\tgr.updateMultiple();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=glide.ui.polaris.experience^valueVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Update multiple experience flag\"\n}```"}
{"prompt":"{\"prompt\":\"Unique Lane Name Per Process Definition\",\"table\":\"sys_pd_lane\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_pd_lane\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\tif (current.operation() == \\\"insert\\\" || !current.getValue(\\\"name\\\"))\\n\\t\\tnew PDNameGenerator().generateNameFromLabel([\\\"process_definition\\\"]);\\n\\telse if (current.name.changes()) {\\n\\t\\tvar gr = new GlideRecord(\\\"sys_pd_lane\\\");\\n\\t\\tgr.addQuery(\\\"name\\\", current.name);\\n\\t\\tgr.addQuery(\\\"process_definition\\\", current.process_definition);\\n\\t\\tgr.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.sys_id);\\n\\t\\tgr.query();\\n\\n\\t\\t//Aborts update if the name is already in use\\n\\t\\tif (gr.hasNext()) {\\n\\t\\t\\tgs.addErrorMessage('A lane with the name \\\"' + current.name + '\\\" already exists.');\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t}\\n })(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Unique Lane Name Per Process Definition\"\n}```"}
{"prompt":"{\"prompt\":\"Load Playbook Experience Status Values\",\"table\":\"sys_playbook_experience_state_to_status\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_playbook_experience_state_to_status\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar loadPlaybookExperienceStatusValues = new LoadPlaybookExperienceStatusValues();\\n\\tloadPlaybookExperienceStatusValues.load(current);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Load Playbook Experience Status Values\"\n}```"}
{"prompt":"{\"prompt\":\"Rmove filter configs for rp\",\"table\":\"cxs_rp_config\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cxs_rp_config\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar cxs_FltrConfig = new global.cxs_FltrConfig();\\n\\tcxs_FltrConfig._removeFilterConfigsFromRecordProducer(current.sys_id);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"cxs_context_configVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Rmove filter configs for rp\"\n}```"}
{"prompt":"{\"prompt\":\"Cleanup IP service affinities\",\"table\":\"cmdb_ci_ip_address\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci_ip_address\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar gr = new GlideRecord('ip_service_affinity');\\n\\tgr.addQuery('ip_address', current.ip_address);\\n\\tgr.deleteMultiple();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"gs.getProperty('glide.discovery.ip_service_affinity', 'false') === 'true' && JSUtil.notNil(current.ip_address)\",\n\t\"name\": \"Cleanup IP service affinities\"\n}```"}
{"prompt":"{\"prompt\":\"CCSI ACL Create UX Property\",\"table\":\"sys_script_include\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_script_include\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tg_scratchpad.enable_acl_create_ux = gs.getProperty('glide.script.ccsi.enable_acl_create_ux', \\\"true\\\");\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"CCSI ACL Create UX Property\"\n}```"}
{"prompt":"{\"prompt\":\"PA Cache buster\",\"table\":\"pa_scores_l2\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_scores_l2\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"SNC.PAScore.updateIndicatorScoreModifiedAtOn2ndLevelTable(current.ref_id);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"PA Cache buster\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Variable Width\",\"table\":\"item_option_new\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"item_option_new\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar variableTypes = {\\n\\t\\t\\t\\t'12' : 'Break',\\n\\t\\t\\t\\t'14' : 'Macro',\\n\\t\\t\\t\\t'15' : 'UI Page',\\n\\t\\t\\t\\t'17' : 'Macro with Label',\\n\\t\\t\\t\\t'19' : 'Container Start',\\n\\t\\t\\t\\t'20' : 'Container End',\\n\\t\\t\\t\\t'21' : 'List Collector',\\n\\t\\t\\t\\t'23' : 'HTML',\\n\\t\\t\\t\\t'24' : 'Container Split',\\n\\t\\t\\t\\t'28' : 'IP',\\n\\t\\t\\t\\t};\\n\\t\\n\\tvar type = current.type;\\n\\tvar width = current.variable_width;\\n\\tvar msgArray = [variableTypes[type], width];\\n\\t\\n\\tif (type == '14' || type == '15' || type == '17' || type == '21' || type == '23') {\\n\\t\\tif (width == '25')\\n\\t\\t\\tinvalidWidthBlocker();\\n\\t}\\n\\telse if (type == '28' && (width == '75' || width == '100' ))\\n\\t\\tinvalidWidthBlocker();\\n\\t\\n\\telse if (type == '12' || type == '19' || type == '20' || type == '24') {\\n\\t\\tif (width != '') \\n\\t\\t\\tinvalidWidthBlocker();\\n\\t}\\n\\t\\n\\tfunction invalidWidthBlocker() {\\n\\t\\tvar msg = gs.getMessage(\\\"{1}% width option not supported for {0} variable\\\", msgArray);\\n\\t\\tgs.addErrorMessage(msg);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n\\t})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate Variable Width\"\n}```"}
{"prompt":"{\"prompt\":\"Date validation\",\"table\":\"sn_publications_publication\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_publications_publication\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\tif((!current.publish_date.nil()) && (!current.expiry_date.nil()) && (current.stage=='review' || (current.stage=='author' && previous.stage!='review'))){\\n\\t\\tvar now = new GlideDateTime().getNumericValue();\\n\\t\\tvar start = (new GlideDateTime(current.getValue('publish_date'))).getNumericValue();\\t\\n\\t\\tvar end = (new GlideDateTime(current.getValue('expiry_date'))).getNumericValue();\\n\\t\\tif (now > start) {\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage('Publish date must be after current time'));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (start >= end) {\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage('Publish date must be before Expiry date'));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t\\t\\n\\t\\t//compare with recurrence start/end date\\n\\t\\tif (!current.recurrence.nil()){\\n\\t\\t\\tvar gr = new GlideRecord('sn_publications_recurrence');\\n\\t\\t\\tif(gr.get(current.recurrence)){\\n\\t\\t\\t\\tvar rec_start = new GlideDateTime(gr.getValue('recurrence_start'));\\n\\t\\t\\t\\tvar rec_end = new GlideDateTime(gr.getValue('recurrence_end'));\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tif(start < rec_start.getNumericValue() || end > rec_end.getNumericValue()){\\n\\t\\t\\t\\t\\tvar linkTxt = gs.getMessage(\\\"recurrence\\\");\\n\\t\\t\\t\\t\\tvar link = \\\"<b><a href='/sn_publications_recurrence.do?sys_id=\\\"+current.recurrence+\\\"'>\\\"+linkTxt+\\\"</a></b>\\\";\\n\\t\\t\\t\\t\\tvar warnMsg = gs.getMessage(\\\"This publication is associated with this {0} between From: {1}\\tTo : {2}\\\",[link,rec_start.getDisplayValue(),rec_end.getDisplayValueInternal()]);\\n\\t\\t\\t\\t\\tgs.addErrorMessage(warnMsg);\\n\\t\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\t}\\n\\t\\t\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t\\t\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Date validation\"\n}```"}
{"prompt":"{\"prompt\":\"Add label path property to scratchpad\",\"table\":\"sys_atf_step\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_atf_step\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"g_scratchpad.use_label_path = GlidePropertiesDB.get('sn_atf.element.use_label_path', true);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"step_config.category=581a597353d21300ac15ddeeff7b12a6^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Add label path property to scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"Put isPluginActive on scratchpad\",\"table\":\"sys_cs_live_agent_setup\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cs_live_agent_setup\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tg_scratchpad.isConversationBuilderPluginActive=new GlidePluginManager().isActive('com.snc.conversation_builder');\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Put isPluginActive on scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"Restrict one task config per user\",\"table\":\"agent_schedule_task_config_rel_user_pref\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"agent_schedule_task_config_rel_user_pref\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar taskConfigUserPrefRel = new GlideRecord(\\\"agent_schedule_task_config_rel_user_pref\\\");\\n\\ttaskConfigUserPrefRel.addQuery(\\\"config\\\", current.config);\\n\\ttaskConfigUserPrefRel.addQuery(\\\"task_config\\\", current.task_config);\\n\\tif(current.operation() == \\\"update\\\")\\n\\t\\ttaskConfigUserPrefRel.addEncodedQuery(\\\"sys_id!=\\\" + current.getValue(\\\"sys_id\\\"));\\n\\ttaskConfigUserPrefRel.query();\\n\\tif(taskConfigUserPrefRel.getRowCount() > 0)\\n\\t\\tcurrent.setAbortAction(true);\\t\\t\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Restrict one task config per user\"\n}```"}
{"prompt":"{\"prompt\":\"Restrict Search Config CB creation\",\"table\":\"sn_ace_content_block\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_ace_content_block\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tvar contentBlockGr = new GlideRecord('sn_ace_content_block');\\n\\t\\tcontentBlockGr.addQuery('ace_config', current.ace_config);\\n\\t\\tcontentBlockGr.addQuery('type', current.type);\\n\\t\\tcontentBlockGr.query();\\n\\t\\tif (contentBlockGr.next() && contentBlockGr.canRead()) {\\n\\t\\t\\t\\tgs.addInfoMessage(gs.getMessage('Search Config content block already exists'));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"type=9b2e3d0e6b110110da18ec188e44af13^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Restrict Search Config CB creation\"\n}```"}
{"prompt":"{\"prompt\":\"Populate group\",\"table\":\"cmn_rota_escalation_set\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmn_rota_escalation_set\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (current.cmn_rota + '') {\\n\\t\\tcurrent.group = current.cmn_rota.group + '';\\n\\t}\\n\\telse {\\n\\t\\tif (current.group_escalation + '') {\\n\\t\\t\\tcurrent.group = current.group_escalation.group + '';\\n\\t\\t}\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Populate group\"\n}```"}
{"prompt":"{\"prompt\":\"CTI Processing\",\"table\":\"global\",\"when\":\"after\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"\\n\\t\\t\\t/**\\n\\t\\t\\t\\t\\tN.B. As of Istanbul release CTI implementations must conform to new rules for security reasons.\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tExisting CTI implementations must be made to conform and tested in a sub-prod instance before upgrading the\\n\\t\\t\\t\\t\\tproduction instance to Istanbul, or the CTI implementation will malfunction in production.\\n\\n\\t\\t\\t\\t\\tPlease refer to KB0620953 for details\\n\\t**/\\n\\t\\t\\t\\t\\t\\n\\t\\tfunction cti() {\\n\\t\\t\\t\\t\\t\\tvar url = null;\\n\\t\\t\\t\\t\\t\\tvar name = sysparm_caller_name;\\n\\t\\t\\t\\t\\t\\teid = sysparm_caller_id;\\n\\t\\t\\t\\t\\t\\tvar phone = sysparm_caller_phone;\\n\\t\\t\\t\\t\\t\\tvar taskID = sysparm_task_id;\\n\\t\\t\\t\\t\\t\\tvar fQuery = sysparm_query;\\n\\t\\t\\t\\t\\t\\tif (fQuery == null)\\n\\t\\t\\t\\t\\t\\t\\t fQuery = '';\\n\\t\\t\\t\\t\\t\\tvar view = sysparm_view;\\n\\t\\t\\t\\t\\t\\tif (view == null || view == '')\\n\\t\\t\\t\\t\\t\\t\\tview = \\\"itil\\\";\\n\\n\\t\\t\\t\\t\\t\\tvar userID = null;\\n\\t\\t\\t\\t\\t\\tif (eid != null && eid != '') {\\n\\t\\t\\t\\t\\t\\t\\t\\tuserID = UserGetSysId(\\\"employee_number\\\",eid);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif (userID == null && name != null && name != '') {\\n\\t\\t\\t\\t\\t\\t\\tuserID = UserGetSysId(\\\"name\\\", name);\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif (userID == null && phone != null && phone != '') {\\n\\t\\t\\t\\t\\t\\t\\tuserID = UserGetSysId(\\\"phone\\\", phone);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif (userID != null) {\\n\\t\\t\\t\\t\\t\\t\\tvar gr = new GlideRecord(\\\"incident\\\");\\n\\t\\t\\t\\t\\t\\t\\tgr.addQuery(\\\"active\\\", \\\"true\\\");\\n\\t\\t\\t\\t\\t\\t\\tgr.addQuery(\\\"caller_id\\\", userID);\\n\\t\\t\\t\\t\\t\\t\\t\\tgr.setWorkflow(false);\\n\\t\\t\\t\\t\\t\\t\\tgr.query();\\n\\t\\t\\t\\t\\t\\t\\tif (gr.next())\\n\\t\\t\\t\\t\\t\\t\\t\\t url = \\\"sys_user.do?sys_id=\\\" + userID + \\\"&sysparm_view=\\\" + view;\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tif (taskID != null && taskID != '') {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t //var task = new GlideRecord('incident');\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t //task.addQuery('number', taskID);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t //task.query();\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t //if (task.next()) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t //if (typeof(sysparm_work_notes) != 'undefined')\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t //\\t\\ttask.work_notes.setJournalEntry(sysparm_work_notes);\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t //if (typeof(sysparm_priority) != 'undefined') \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t //\\t\\ttask.priority = sysparm_priority;\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t //task.update();\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t //}\\n\\t\\t\\t\\t\\t\\t\\t\\t url = \\\"task.do?sys_id=\\\" + taskID + \\\"&sysparm_view=\\\" + view;\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif (userID != null) {\\n\\t\\t\\t\\t\\t\\t\\tif (fQuery.length > 0)\\n\\t\\t\\t\\t\\t\\t\\t\\tfQuery += \\\"^\\\";\\n\\t\\t\\t\\t\\t\\t\\tfQuery += \\\"caller_id=\\\" + userID;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif (url == null) {\\n\\t\\t\\t\\t\\t\\t\\turl = \\\"incident.do?sys_id=-1\\\";\\n\\t\\t\\t\\t\\t\\t\\tif (fQuery != null)\\n\\t\\t\\t\\t\\t\\t\\t\\t url += \\\"&sysparm_query=\\\" + fQuery;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tanswer = url;\\n\\t\\t\\t\\t\\t\\treturn url;\\n}\\n\\nfunction UserGetSysId(field, value) {\\n\\tvar user = new GlideRecord(\\\"sys_user\\\");\\n\\tuser.addQuery(field, value);\\n\\tuser.query();\\n\\tif (user.next())\\n\\t\\t return user.sys_id;\\n\\telse\\n\\t\\t return null;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"CTI Processing\"\n}```"}
{"prompt":"{\"prompt\":\"CMDB Dependent CI Ledger CI Uniqueness\",\"table\":\"cmdb_dependent_ci_ledger\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_dependent_ci_ledger\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Empty cmdb group is allowed\\n\\t\\tif (current.cmdb_ci == '' || current.cmdb_ci == null)\\n\\t\\t\\t\\treturn;\\n\\n\\t\\t// No need to perform check on update operation in case the cmdb group field was not changed\\n\\t\\tvar op = current.operation();\\n\\t\\tif (op == 'update' && current.cmdb_ci == previous.cmdb_ci)\\n\\t\\t\\t\\treturn;\\n\\n\\t\\t// Abort the operation in case a dynamic CI group with the same CMDB group already exists\\n\\t\\tvar gr = new GlideRecord('cmdb_dependent_ci_ledger');\\n\\t\\tgr.addQuery('cmdb_ci', current.cmdb_ci);\\n\\t\\tgr.query();\\n\\t\\tif (gr.next()) {\\n\\t\\t\\t\\tif (gr.getValue(\\\"sys_id\\\") != current.sys_id) {\\n\\t\\t\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"CMDB Dependent CI Ledger CI Uniqueness\"\n}```"}
{"prompt":"{\"prompt\":\"Abort insert on glide.servlet.uri\",\"table\":\"sys_properties\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tgs.log('You can not add the glide.servlet.uri property in the database');\\n\\tgs.addErrorMessage(gs.getMessage(\\\"You cannot modify <b>{0}</b>. This property is controlled by ServiceNow\\\", \\\"glide.servlet.uri\\\"));\\n\\tcurrent.setAbortAction(true);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.name == 'glide.servlet.uri'\",\n\t\"name\": \"Abort insert on glide.servlet.uri\"\n}```"}
{"prompt":"{\"prompt\":\"Remove results from record producer\",\"table\":\"cxs_rp_config\",\"when\":\"after\",\"actions\":\"ud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cxs_rp_config\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"500\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.operation() == \\\"delete\\\" && cxs_App.getBusiness(current).isOnRecordProducer())\\n\\tcxs_App.getBusiness(current).removeFromRecordProducer();\\nelse if (current.operation() == \\\"update\\\" && cxs_App.getBusiness(previous).isOnRecordProducer(true) && current.sc_cat_item.changes())\\n\\tcxs_App.getBusiness(previous).removeFromRecordProducer();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Remove results from record producer\"\n}```"}
{"prompt":"{\"prompt\":\"Put vendor name onto g_scratchpad\",\"table\":\"sys_app_template_detail\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_app_template_detail\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var defaultVendorName = gs.hasRole('maint') ? 'ServiceNow' : '';\\ng_scratchpad.author = gs.getProperty('glide.appcreator.company.friendly_name', defaultVendorName);\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Put vendor name onto g_scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"Stamp Approvals\",\"table\":\"task\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"1001\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.approval == 'approved' || current.approval == 'rejected') {\\r\\n\\t\\tcurrent.approval_set = nowDateTime();\\r\\n\\t\\t} else {\\r\\n\\t\\tcurrent.approval_set.setValue('');\\r\\n\\t\\t}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.approval.changes()\",\n\t\"name\": \"Stamp Approvals\"\n}```"}
{"prompt":"{\"prompt\":\"Ensure default MID set\",\"table\":\"ecc_agent\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_agent\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function() {\\n\\tvar gr = new GlideRecord('ecc_agent');\\n\\tgr.query();\\n\\t// If we only have one MID server defined, set it as the default!\\n\\tif (gr.getRowCount() == 1) {\\n\\t\\tgs.setProperty('mid.server.rba_default', current.name);\\n\\t}\\n}())\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"gs.nil(gs.getProperty('mid.server.rba_default'))\",\n\t\"name\": \"Ensure default MID set\"\n}```"}
{"prompt":"{\"prompt\":\"Sync to Product catalog item\",\"table\":\"pc_vendor_cat_item\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pc_vendor_cat_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.model.sys_class_name == 'cmdb_hardware_product_model' || current.model.sys_class_name == 'cmdb_consumable_product_model') {\\n\\t\\tif (current.product_catalog_item.vendor_catalog_item == current.sys_id)\\n\\t\\t\\t\\t(new ProductCatalogUtils()).updateProductCatalog(current, 'vendor', 'pc_hardware_cat_item');\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.product_id.changes() || current.price.changes() || current.description.changes() || current.short_description.changes() || current.model.changes() || current.upc.changes() || current.specs.changes() || current.features.changes()\",\n\t\"name\": \"Sync to Product catalog item\"\n}```"}
{"prompt":"{\"prompt\":\"Update User Task Stats\",\"table\":\"sn_hr_core_case\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_case\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"800\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar userStatsUtil = new global.UserTaskStatsUtil();\\n\\t\\n\\tif ((current.assigned_to.changes() || current.active.changes()) && !current.assigned_to.nil() && current.active == true)\\n\\t\\tuserStatsUtil.incrementTaskAssigned(current.assigned_to);\\t\\n\\t\\n\\tif (current.active.changes() && current.active == false && !previous.assigned_to.nil())\\n\\t\\tuserStatsUtil.decrementTaskAssigned(previous.assigned_to);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"new global.UserTaskStatsUtil().conditionCheck(current,previous)\",\n\t\"name\": \"Update User Task Stats\"\n}```"}
{"prompt":"{\"prompt\":\"SLA Workflow Condition Check\",\"table\":\"contract_sla\",\"when\":\"before_display\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"contract_sla\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"SLAvalidation.warnWorkflowCondition(current.workflow, current);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"SLA Workflow Condition Check\"\n}```"}
{"prompt":"{\"prompt\":\"Automatically update Extension Field\",\"table\":\"ecc_agent_ext_context_event\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_agent_ext_context_event\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"extension!=6652e26693522200833b76df067ffb35^ORextensionISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Automatically update Extension Field\"\n}```"}
{"prompt":"{\"prompt\":\"Reset field values if advanced\",\"table\":\"ticket_configuration\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ticket_configuration\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t// Add your code here\\n\\tvar checkbox = current.advanced;\\n\\tif(checkbox)\\n\\t\\tcurrent.info_fields = '';\\n\\telse\\n\\t\\tcurrent.info_widget = '';\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"advancedVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Reset field values if advanced\"\n}```"}
{"prompt":"{\"prompt\":\"ValidateExpiryInterval\",\"table\":\"jwt_provider\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"jwt_provider\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"50\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar currExpInterval = current.expiry_interval;\\n\\tvar expIntervalLimit = gs.getProperty(\\\"jwt.provider.expiry.interval.limit\\\");\\n\\t// If the given expiryInterval value is greater than the value of the \\n\\t// property jwt.provider.expiry.limit property then don't submit the form and \\n\\t// show an appropriate message on the form.\\n\\tif (currExpInterval > expIntervalLimit) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(gs.getMessage('Expiry Interval (sec) cannot be greater than {0}. This limit is controlled by the jwt.provider.expiry.interval.limit system property.', expIntervalLimit));\\n\\t} else if(currExpInterval <= 0) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Expiry Interval (sec) cannot be less or equal to zero.\\\"));\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"ValidateExpiryInterval\"\n}```"}
{"prompt":"{\"prompt\":\"Sync Document ID with Work item\",\"table\":\"sn_gf_goal_m2m_relationship\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_gf_goal_m2m_relationship\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"60\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tvar tableToFieldMapping = {\\n\\t\\t\\t\\t'dmn_demand': 'demand',\\n\\t\\t\\t\\t'pm_project': 'project',\\n\\t\\t\\t\\t'pm_program': 'program',\\n\\t\\t\\t\\t'rm_epic': 'scrum_epic',\\n\\t\\t'sn_safe_epic': 'scrum_epic',\\n\\t\\t\\t\\t'rm_feature': 'scrum_feature',\\n\\t\\t};\\n\\t\\tvar planningItemTables = [\\\"sn_align_core_planning_item\\\", \\\"sn_align_core_demand\\\", \\\"sn_align_core_project\\\", \\\"sn_align_core_program\\\", \\\"sn_align_core_scrum_epic\\\", \\\"sn_align_core_big_rock\\\", \\\"sn_align_core_initiative\\\"];\\n\\t\\tvar tableName = current.getValue(\\\"table_name\\\");\\n\\tif (tableName in tableToFieldMapping && current.isValidField(tableToFieldMapping[tableName]) & current.getValue(tableToFieldMapping[tableName]) == null) {\\n\\t\\t\\t\\tcurrent.setValue(tableToFieldMapping[tableName], current.getValue('entity_id'));\\n\\t\\tcurrent.setValue('is_work_item', true);\\n\\t\\t} else if ((new global.ArrayUtil()).contains(planningItemTables, tableName) && current.isValidField(\\\"planning_item_id\\\") && current.getValue(\\\"planning_item_id\\\") == null) {\\n\\t\\t\\t\\tcurrent.setValue(\\\"planning_item_id\\\", current.getValue('entity_id'));\\n\\t\\tcurrent.setValue('is_work_item', true);\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.isActionAborted() && current.getValue('entity_id') != null;\",\n\t\"name\": \"Sync Document ID with Work item\"\n}```"}
{"prompt":"{\"prompt\":\"Create/Update User Interaction Step\",\"table\":\"help_user_interaction_log\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"help_user_interaction_log\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar setupService = new SNHelpSetupService();\\n\\tsetupService.upsertInteractionStep(current);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Create/Update User Interaction Step\"\n}```"}
{"prompt":"{\"prompt\":\"gtd_tour_analytics_set_pplication\",\"table\":\"sys_guided_tour_analytics\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_guided_tour_analytics\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t\\tif(current.application)\\n\\t\\treturn null; \\n\\t\\n\\tvar tUritl = new sn_tourbuilder.TourBuilderUtility();\\n\\tcurrent.application = tUritl.getAppDetails(current.tour);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"gtd_tour_analytics_set_pplication\"\n}```"}
{"prompt":"{\"prompt\":\"Set Request State\",\"table\":\"sc_request\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"1100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"setDesiredState();\\n\\nfunction setDesiredState() {\\n\\t\\tvar desired = getDesiredState();\\n\\t\\tgs.debug(\\\"DESIRED = \\\" + desired);\\n\\t\\tcurrent.request_state = desired;\\n}\\n\\nfunction getDesiredState() {\\n\\t\\tvar desired = current.request_state;\\n\\t\\tif (desired == 'closed_cancelled') // if we're cancelled we're cancelled\\n\\t\\t\\t\\treturn desired;\\n\\n\\tgs.debug(\\\"APPROVAL = \\\" + current.approval + \\\" CHANGES = \\\" + current.approval.changes());\\n\\t\\tgs.debug(\\\"CURRENT STAGE = \\\" + current.stage);\\n\\n\\t\\tif (current.approval.changesTo('approved')) {\\n\\t\\t\\t\\tdesired = 'in_process';\\n\\t\\t} else if (current.approval.changesTo('rejected')) {\\n\\t\\t\\t\\tdesired = 'closed_rejected';\\n\\t\\t\\t\\tcurrent.stage = 'closed_incomplete';\\n\\t\\t\\t\\tcurrent.state = 4;\\n\\t\\t} else if (current.stage == 'closed_complete') \\n\\t\\t\\t\\t desired = 'closed_complete';\\n\\telse if (current.stage == 'closed_skipped')\\n\\t\\tdesired = 'closed_skipped';\\n\\telse if (current.stage == 'closed_incomplete')\\n\\t\\tdesired = 'closed_incomplete';\\n\\n\\t\\treturn desired;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set Request State\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent delete for referenced scripts\",\"table\":\"sys_script_include\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_script_include\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// if the script is used by an active process, abort deletion.\\n\\npreventDeletion();\\n\\nfunction preventDeletion() {\\n\\t// Check for password-reset extension-script category pattern:\\n\\tif (current.script.indexOf(\\\"category: 'password_reset.extension\\\") > 0) {\\n\\t\\tif (checkReferences('pwd_verification_type', ['verification_processor', 'enrollment_processor', 'is_enrolled']))\\n\\t\\t\\treturn;\\n\\n\\t\\tif (checkReferences('pwd_cred_store', ['auto_gen_password_script', 'account_lookup']))\\n\\t\\t\\treturn;\\n\\n\\t\\tif (checkReferences('pwd_identification_type', ['identification_processor']))\\n\\t\\t\\treturn;\\n\\n\\t\\tif (checkReferences('pwd_process', ['post_processor']))\\n\\t\\t\\treturn;\\n\\t}\\n}\\n\\nfunction checkReferences(table, fields) {\\n\\t// check that 'fields' is a valid array:\\n\\tif (!(fields instanceof Array) || fields.length <= 0)\\n\\t\\treturn false;\\n\\n\\t// Check if the current script is referenced from one of the <fields> in the <table>:\\n\\tvar gr = new GlideRecord(table);\\n\\tvar gc = gr.addQuery(fields[0], current.sys_id);\\n\\tfor (i = 1; i < fields.length; i++) {\\n\\t\\tgc.addOrCondition(fields[i],\\tcurrent.sys_id);\\n\\t}\\n\\tgr.query();\\n\\t\\n\\tif (!gr.hasNext()) {\\n\\t\\treturn false;\\n\\t}\\n\\t\\n\\twhile (gr.next()) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"The script cannot be deleted because it is referenced by '{0}', in table {1}\\\", [gr.getDisplayValue(), table]));\\n\\t}\\n\\tcurrent.setAbortAction(true);\\n\\treturn true;\\n}\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent delete for referenced scripts\"\n}```"}
{"prompt":"{\"prompt\":\"Disallow Portal URL Suffix for SP\",\"table\":\"sp_portal\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sp_portal\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tgs.addErrorMessage(gs.getMessage(\\\"'portal' is a reserved word - choose another URL suffix\\\"));\\n\\tcurrent.setAbortAction(true);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"url_suffix=portal^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Disallow Portal URL Suffix for SP\"\n}```"}
{"prompt":"{\"prompt\":\"Clustering - Validate Fields\",\"table\":\"ml_solution_definition\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ml_solution_definition\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar min_records = parseInt(current.min_records);\\n\\tvar threshold = parseInt(current.threshold);\\n\\tvar outputErrorMessage = '';\\n\\tif (isNaN(min_records) || (min_records < 2)){\\n\\t\\toutputErrorMessage = gs.getMessage('Minimum number of records in a cluster should be an integer greater than or equal to 2');\\n\\t\\tgs.addErrorMessage(outputErrorMessage);\\n\\t\\treturn false;\\n\\t} else if (isNaN(threshold) || threshold < 0 || threshold > 100) {\\n\\t\\toutputErrorMessage = gs.getMessage('Target Solution Coverage should be between 0 to 100');\\n\\t\\tgs.addErrorMessage(outputErrorMessage);\\n\\t\\treturn false;\\n\\t}\\n\\t\\n\\treturn true;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"trainer.name=clustering_trainer^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Clustering - Validate Fields\"\n}```"}
{"prompt":"{\"prompt\":\"Delete duplicates\",\"table\":\"sys_cs_custom_control_execution_plan\",\"when\":\"async_always\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cs_custom_control_execution_plan\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async_always\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar gr = new GlideRecord('sys_cs_custom_control_execution_plan');\\n\\tgr.addQuery('custom_control', current.custom_control);\\n\\tgr.addQuery('topic', current.topic);\\n\\tgr.addQuery('topic_node_id', current.topic_node_id);\\n\\tgr.addQuery('sys_id', '!=', current.getUniqueValue());\\n\\tgr.query();\\n\\tgr.deleteMultiple();\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete duplicates\"\n}```"}
{"prompt":"{\"prompt\":\"Unique lifecycle creation per model\",\"table\":\"cmdb_model_lifecycle\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_model_lifecycle\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\tif (!current.active)\\n\\t\\treturn;\\n\\n\\tvar modelLifecycleGr = new GlideRecord('cmdb_model_lifecycle');\\n\\tmodelLifecycleGr.addQuery('source', current.source);\\n\\tmodelLifecycleGr.addQuery('lifecycle_type', current.lifecycle_type);\\n\\tmodelLifecycleGr.addQuery('lifecycle_phase', current.lifecycle_phase);\\n\\tmodelLifecycleGr.addQuery('model', current.model);\\n\\tmodelLifecycleGr.addQuery('active', true);\\n\\tmodelLifecycleGr.query();\\n\\n\\tif (modelLifecycleGr.next() && modelLifecycleGr.getValue('sys_id') !== current.getValue('sys_id')) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('A record with the same combination of model, lifecycle type, lifecycle phase and source already exists'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Unique lifecycle creation per model\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent Catalog Item in List Filter\",\"table\":\"sys_ux_list\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ux_list\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar table = current.table;\\n\\tif (new global.GlobalServiceCatalogUtil().isCatItemTable(table)) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Catalog Item can't be added as List Filter\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent Catalog Item in List Filter\"\n}```"}
{"prompt":"{\"prompt\":\"Require unique Application\",\"table\":\"sys_repo_config\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_repo_config\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// allow when removing application or it hasn't changed\\n\\tif (current.sys_app.nil() || !current.sys_app.changes())\\n\\t\\treturn;\\n\\t\\t\\n\\t// abort insert/update if application already used by another record\\n\\tvar ga = new GlideAggregate(\\\"sys_repo_config\\\");\\n\\tga.addQuery(\\\"sys_app\\\", current.sys_app);\\n\\tga.query();\\n\\tif (ga.getRowCount() > 0) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Another record is already associated to this application: {0}\\\", current.sys_app.name));\\n\\t\\tcurrent.sys_app = null;\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Require unique Application\"\n}```"}
{"prompt":"{\"prompt\":\"Handle SLA configuration delete\",\"table\":\"em_sla_configuration\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"em_sla_configuration\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar slaConfigurationManager = new SNC.SlaConfigurationManager();\\n\\tslaConfigurationManager.deleteCiTasksAndAssocRelatedToDeletedConfiguration(current.getUniqueValue());\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Handle SLA configuration delete\"\n}```"}
{"prompt":"{\"prompt\":\"RaiseCMDBGroupModifiedEvent\",\"table\":\"qb_saved_query\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"qb_saved_query\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar gr = new GlideRecord(\\\"cmdb_group_contains_qb_query\\\");\\n\\tgr.addQuery(\\\"qb_query\\\", current.sys_id);\\n\\tgr.query();\\n\\t// One QB query could be associated with many groups\\n\\twhile(gr.next()) {\\n\\t\\tsn_cmdbgroup.CMDBGroupAPI.enqueueEvent(gr.group, 'update');\\t\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"RaiseCMDBGroupModifiedEvent\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Query Term Threshold\",\"table\":\"sys_cs_auto_resolution_configuration\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cs_auto_resolution_configuration\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar score = current.getValue('query_term_threshold');\\n\\t\\n\\t// it's ok even if does not exist.\\n\\tif (gs.nil(score)) \\n\\t\\treturn;\\n\\t\\n\\t// the score should be equal or smaller than 1\\n\\tif (score < 0 || score > 1) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"The range of Query term threshold should be between 0 and 1\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate Query Term Threshold\"\n}```"}
{"prompt":"{\"prompt\":\"Update orc default MID frm ecc_agent_app\",\"table\":\"ecc_agent_application\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_agent_application\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif(current.default_mid_server === previous.default_mid_server){\\n\\t\\treturn;\\n\\t}\\n\\n\\tvar sysProperties = new GlideRecord('sys_properties');\\n\\tif( sysProperties.get('b7c4086d0a0005957b2ebc930bc717bd')) {\\n\\n\\tgs.setProperty(\\\"mid.server.rba_default\\\",\\tcurrent.default_mid_server.getDisplayValue());\\n}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=Orchestration^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Update orc default MID frm ecc_agent_app\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent Creation of UI related rules\",\"table\":\"sys_hub_resource_filter_rule\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_hub_resource_filter_rule\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"resource.table=sys_hub_ui_section^ORresource.table=sys_hub_ui_element^EQ\",\n\t\"condition\": \"gs.getSession().isInteractive();\",\n\t\"name\": \"Prevent Creation of UI related rules\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent Recursion\",\"table\":\"scan_check_suite\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"scan_check_suite\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t//Prevent recursive parent of a scan_check_suite\\n\\tvar rt = new RecursionTester('scan_check_suite', 'parent');\\n\\tif (rt.isRecursive(current)) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tcurrent.parent.setError('Invalid Parent');\\n\\t\\tgs.addErrorMessage(gs.getMessage('The selected parent loops back to this record (recursive suite loop)'));\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.parent.changes() && !current.parent.nil()\",\n\t\"name\": \"Prevent Recursion\"\n}```"}
{"prompt":"{\"prompt\":\"Mark Positive Paths\",\"table\":\"wf_condition\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"wf_condition\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"setPostiveness();\\n\\nfunction setPostiveness() {\\n\\tvar POSITIVES = ['approved', 'yes', 'ok', 'complete', 'completed', 'always'];\\n\\t\\n\\tcurrent.is_positive = isPositive(current);\\n\\t\\n\\tfunction isPositive(condition) {\\n\\t\\t return new ArrayUtil().contains(POSITIVES, condition.name.toLowerCase());\\n\\t}\\t\\n\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Mark Positive Paths\"\n}```"}
{"prompt":"{\"prompt\":\"AIS trigger reindexing\",\"table\":\"label_entry\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"label_entry\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// we ignore non trivial changes in sys updated\\n\\tif (previous && current.operation() != 'delete') {\\n\\t\\tvar changed = false;\\n\\t\\tfor (var k in current) {\\n\\t\\t\\tif (k != 'read' && k != 'sys_mod_count' && k != 'sys_updated_on' && k != 'sys_updated_by' && current[k] != previous[k])\\n\\t\\t\\t\\tchanged = true;\\n\\t\\t}\\n\\t\\tif (!changed)\\n\\t\\t\\treturn;\\n\\t}\\n\\n\\t// we index only shared tags, and only based on the table indexing parameters\\n\\tvar aisConfig = new sn_ais.AisUtil();\\n\\tif (aisConfig.isTableIndexable(current.table)) {\\n\\t\\tvar tagIndexLevel = aisConfig.getTableLevelAttribute(current.table, 'index_tags', 'none');\\n\\t\\tvar triggerIndex = false;\\n\\n\\t\\tif (tagIndexLevel == 'all_shared' || tagIndexLevel == 'everyone_only') {\\n\\t\\t\\tvar viewableBy = null;\\n\\n\\t\\t\\tvar recentDeletion = gs.getSession().getClientData('glide.ais.recent.label.deletion');\\n\\t\\t\\tif (recentDeletion) {\\n\\t\\t\\t\\tvar parts = recentDeletion.split(',', 2);\\n\\t\\t\\t\\tif (parts.length == 2 && parts[0] == current.label)\\n\\t\\t\\t\\t\\tviewableBy = parts[1];\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (!viewableBy) {\\n\\t\\t\\t\\tvar label = new GlideRecord('label');\\n\\t\\t\\t\\tif (label.get(current.label))\\n\\t\\t\\t\\t\\tviewableBy = label.viewable_by;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (tagIndexLevel == 'all_shared' && viewableBy != 'me')\\n\\t\\t\\t\\ttriggerIndex = true;\\n\\t\\t\\telse if (tagIndexLevel == 'everyone_only' && viewableBy == 'everyone')\\n\\t\\t\\t\\ttriggerIndex = true;\\n\\n\\t\\t}\\n\\n\\t\\tif (triggerIndex)\\n\\t\\t\\tnew sn_ais.IndexEvent().indexRecord(current.table, current.table_key, 'tags');\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"new sn_ais.StatusApi().isAisQueueWritable()\",\n\t\"name\": \"AIS trigger reindexing\"\n}```"}
{"prompt":"{\"prompt\":\"Rollup TOL cancellation to TO\",\"table\":\"alm_transfer_order_line\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"alm_transfer_order_line\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(new TransferOrderStageHandler()).pushStageFromTOL(current,'cancelled');\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.stage.changes() && current.stage == 'cancelled'\",\n\t\"name\": \"Rollup TOL cancellation to TO\"\n}```"}
{"prompt":"{\"prompt\":\"Synchronize Collaborator Permissions\",\"table\":\"sys_appcollab_permission_m2m\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_appcollab_permission_m2m\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tvar synchronizer = new sn_appcollab.CollabPermissionSynchronizer(current.descriptor);\\n\\t\\tsynchronizer.syncCollaboratorPermissions();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Synchronize Collaborator Permissions\"\n}```"}
{"prompt":"{\"prompt\":\"Set Availability for Wrap Up State\",\"table\":\"interaction_wrap_up_configuration\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"interaction_wrap_up_configuration\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tvar grWrapUpState = new GlideRecord(\\\"sys_choice\\\");\\n\\t\\tgrWrapUpState.addQuery(\\\"name\\\", \\\"interaction\\\");\\n\\t\\tgrWrapUpState.addQuery(\\\"value\\\", \\\"wrap_up\\\");\\n\\t\\tgrWrapUpState.query();\\n\\n\\t\\tif (grWrapUpState.hasNext()) {\\n\\t\\t\\t\\t//Only enable the Wrap Up state for Interactions if an active configuration record exists\\n\\t\\t\\t\\tvar grConfigurations = new GlideRecord(\\\"interaction_wrap_up_configuration\\\");\\n\\t\\t\\t\\tgrConfigurations.addQuery(\\\"active\\\", \\\"true\\\");\\n\\t\\t\\t\\tgrConfigurations.query();\\n\\n\\t\\t\\t\\tif (grConfigurations.hasNext()) {\\n\\t\\t\\t\\t\\t\\tgrWrapUpState.inactive = false;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tgrWrapUpState.inactive = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tgrWrapUpState.updateMultiple();\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set Availability for Wrap Up State\"\n}```"}
{"prompt":"{\"prompt\":\"Set Default Length\",\"table\":\"sys_dictionary\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_dictionary\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"\\n\\t\\t\\tvar internal_type = current.internal_type.toString();\\n\\t\\t\\tswitch (internal_type) {\\n\\t\\t\\t\\tcase \\\"reference\\\":\\n\\t\\t\\t\\t\\tcurrent.max_length = 32;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"glide_list\\\":\\n\\t\\t\\t\\t\\tcurrent.max_length = 4000;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"glide_action_list\\\":\\n\\t\\t\\t\\t\\tcurrent.max_length = 4000;\\n\\t\\t\\t\\t\\tbreak;\\t\\t\\t\\t\\t\\n\\t\\t\\t\\tcase \\\"journal\\\":\\n\\t\\t\\t\\t\\tcurrent.max_length = 4000;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"journal_input\\\":\\n\\t\\t\\t\\t\\tcurrent.max_length = 4000;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"journal_list\\\":\\n\\t\\t\\t\\t\\tcurrent.max_length = 4000;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"user_roles\\\":\\n\\t\\t\\t\\t\\tcurrent.max_length = 255;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"url\\\":\\n\\t\\t\\t\\t\\tcurrent.max_length = 1024;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"script\\\":\\n\\t\\t\\t\\t\\tcurrent.max_length = 8000;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"script_plain\\\":\\n\\t\\t\\t\\t\\tcurrent.max_length = 8000;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"email_script\\\":\\n\\t\\t\\t\\t\\tcurrent.max_length = 8000;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"html\\\":\\n\\t\\t\\t\\t\\tcurrent.max_length = 8000;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"translated_html\\\":\\n\\t\\t\\t\\t\\tcurrent.max_length = 8000;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"decimal\\\":\\n\\t\\t\\t\\t\\tcurrent.max_length = 20;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"email\\\":\\n\\t\\t\\t\\t\\tcurrent.max_length = 100;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase \\\"conditions\\\":\\n\\t\\t\\t\\t\\tcurrent.max_length = 4000;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\tcurrent.max_length = new GlideDefaultObjectLengthResolver().resolve(internal_type);\\n\\t\\t\\t}\\n\\t\\t\\t\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.max_length.nil()\",\n\t\"name\": \"Set Default Length\"\n}```"}
{"prompt":"{\"prompt\":\"getMyRequestIDs\",\"table\":\"global\",\"when\":\"before\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function getMyRequestIDs() {\\n\\treturn GlideappScriptHelper.getMyRequestIDs();\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"getMyRequestIDs\"\n}```"}
{"prompt":"{\"prompt\":\"Clear Can Write User Criteria Cache\",\"table\":\"sttrm_model_user_criteria_write_mtom\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sttrm_model_user_criteria_write_mtom\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tSTTRMModel.clearCache();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear Can Write User Criteria Cache\"\n}```"}
{"prompt":"{\"prompt\":\"Delete associated flow catalog model\",\"table\":\"sys_hub_flow_base\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_hub_flow_base\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar gr = new GlideRecord(\\\"sys_flow_cat_variable_model\\\");\\n\\tgr.addQuery(\\\"id\\\", current.sys_id);\\n\\tgr.query();\\n\\tif (gr.next())\\n\\t\\tgr.deleteRecord();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete associated flow catalog model\"\n}```"}
{"prompt":"{\"prompt\":\"Start Tasks\",\"table\":\"sc_req_item\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_req_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tgs.include(\\\"DeliveryPlan\\\");\\n\\t\\tvar plan = new DeliveryPlan(current);\\n\\t\\tplan.initTasks();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.approval.changesTo('approved') && !current.delivery_plan.nil()\",\n\t\"name\": \"Start Tasks\"\n}```"}
{"prompt":"{\"prompt\":\"Set Table Name\",\"table\":\"sys_import_set\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_import_set\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var s = current.table_name.toString();\\n\\ns = s.toLowerCase();\\ns = replaceAll(s, \\\" \\\", \\\"_\\\");\\n\\nvar db = GlideDBObjectManager.get();\\nif (db.getAbsoluteBase(s) != \\\"sys_import_set_row\\\") {\\n\\tif (GlideTableDescriptor.isValid(s)) {\\n\\t\\tcurrent.table_name.setError(\\\"Import set table must be an extension of sys_import_set_row\\\");\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n} else {\\n\\tcurrent.table_name = s;\\n}\\n\\nfunction replaceAll(str, from, to) {\\n\\tvar idx = str.indexOf( from );\\n\\n\\twhile ( idx > -1 ) {\\n\\t str = str.replace( from, to ); \\n\\t idx = str.indexOf( from );\\n\\t}\\n\\t\\n\\treturn str;\\t\\t\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.table_name.changes()\",\n\t\"name\": \"Set Table Name\"\n}```"}
{"prompt":"{\"prompt\":\"Format for Configurable Workspace\",\"table\":\"sys_ui_action\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ui_action\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar uiaction = current.sys_id;\\n\\tvar uxFomAction = new GlideRecord('sys_ux_form_action');\\n\\tuxFomAction.addQuery('ui_action', uiaction);\\n\\tuxFomAction.query();\\n\\tif (!uxFomAction.next()) {\\n\\t\\tvar table = current.table;\\n\\t\\tvar action_type = 'ui_action';\\n\\t\\tvar gr = new GlideRecord('sys_ux_form_action');\\n\\t\\tgr.initialize();\\n\\t\\tgr.setValue('table', table);\\n\\t\\tgr.setValue('ui_action', uiaction);\\n\\t\\tgr.setValue('active', true);\\n\\t\\tgr.setValue('action_type', 'ui_action');\\n\\t\\tgr.setValue('name', current.name || current.action_name);\\n\\t\\tvar insertedId = gr.insert();\\n\\t\\tif (insertedId) {\\n\\t\\t\\tgs.addInfoMessage(gs.getMessage(\\\"A UX Form Action record has been successfully inserted for {0}\\\", [current.name]));\\n\\t\\t} else {\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Unable to create a UX Form Action record for {0}\\\", [current.name]));\\n\\t\\t}\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.format_for_configurable_workspace==true\",\n\t\"name\": \"Format for Configurable Workspace\"\n}```"}
{"prompt":"{\"prompt\":\"Delete Activity Variables\",\"table\":\"wf_workflow_version\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"wf_workflow_version\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"110\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar gr = new GlideRecord(\\\"wf_activity\\\");\\n\\tgr.addQuery(\\\"workflow_version\\\", current.getUniqueValue());\\n\\tgr.query();\\n\\twhile(gr.next()) {\\n\\t\\tvar toDel = new GlideRecord(\\\"sys_variable_value\\\");\\n\\t\\ttoDel.addQuery(\\\"document_key\\\", gr.getUniqueValue());\\n\\t\\ttoDel.query();\\n\\t\\tif(toDel.hasNext()) {\\n\\t\\t\\ttoDel.deleteMultiple();\\n\\t\\t}\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete Activity Variables\"\n}```"}
{"prompt":"{\"prompt\":\"Protect cmdb_ci_class\",\"table\":\"cmdb_model_category\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_model_category\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.addErrorMessage(gs.getMessage(\\\"Changing the CI class after creation is not allowed\\\"));\\r\\ncurrent.setAbortAction(true);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.cmdb_ci_class.changes()\",\n\t\"name\": \"Protect cmdb_ci_class\"\n}```"}
{"prompt":"{\"prompt\":\"Start Peer Tasks\",\"table\":\"sc_task\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"startPeerTasks();\\n\\nfunction startPeerTasks() {\\n\\t\\tgs.include(\\\"DeliveryPlan\\\");\\n\\t\\tvar parent_id = current[\\\"parent\\\"] + '';\\n\\t\\tvar prec = new GlideRecord('sc_req_item');\\n\\t\\tprec.get(parent_id);\\n\\t\\tvar plan = new DeliveryPlan(prec);\\n\\t\\tif (plan.canStartTasks(current))\\n\\t\\t\\t\\tplan.startTasks(current);\\n\\t\\tsynchRequestItem(parent_id, plan);\\n}\\n\\nfunction synchRequestItem(parent_id, plan) {\\n\\t\\tvar sc_req_item = new GlideRecord('sc_req_item');\\n\\t\\tsc_req_item.get(parent_id);\\n\\t\\tif (!sc_req_item.isValidRecord())\\n\\t\\t\\t\\treturn;\\n\\n\\t\\tvar gr = new GlideRecord('sc_task');\\n\\t\\tgr.addQuery('parent', sc_req_item.sys_id);\\n\\t\\tgr.addQuery('state', '1').addOrCondition('state', '-5').addOrCondition('state', '2');\\n\\t\\tgr.orderBy('order');\\n\\t\\tgr.query();\\n\\n\\t\\tif (gr.next()) {\\n\\t\\t\\t\\tif (gr.state == '-5')\\n\\t\\t\\t\\t\\t\\treturn;\\n\\n\\t\\t\\t\\t// gs.print('plan = ' + plan + ' .plan = ' + plan.plan);\\n\\t\\t\\t\\t// gs.print('id = ' + gr.delivery_task);\\n\\t\\t\\t\\tvar tt = plan.plan.getToken(gr.delivery_task);\\n\\t\\t\\t\\t// gs.print('tt = ' + tt);\\n\\t\\t\\t\\t// gs.print('tt.name = ' + tt.getName());\\n\\t\\t\\t\\tif (tt)\\n\\t\\t\\t\\t\\t\\tsc_req_item.stage.setValue(tt.getName());\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\tsc_req_item.stage = gr.short_description;\\n\\n\\t\\t\\t\\t// gs.print('stage = ' + sc_req_item.stage);\\n\\n\\t\\t\\t\\tif (sc_req_item.stage.changes())\\n\\t\\t\\t\\t\\t\\tsc_req_item.update();\\n\\t\\t} else {\\n\\t\\t\\t\\t// reset the query.\\n\\t\\t\\t\\tgr.initialize();\\n\\t\\t\\t\\tgr.addQuery('parent', sc_req_item.sys_id);\\n\\t\\t\\t\\tgr.query();\\n\\t\\t\\t\\tvar stage = 'complete';\\n\\t\\t\\t\\tvar closed_skipped = 0;\\n\\t\\t\\t\\tvar closed_incomplete = 0;\\n\\t\\t\\t\\tvar taskCount = gr.getRowCount();\\n\\t\\t\\t\\twhile (gr.next()) {\\n\\t\\t\\t\\t\\t\\tif (gr.state == 4) {\\n\\t\\t\\t\\t\\t\\t\\t\\tclosed_incomplete++;\\n\\t\\t\\t\\t\\t\\t\\t\\tstage = 'closed_incomplete';\\n\\t\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t} else if (gr.state == 7) {\\n\\t\\t\\t\\t\\t\\t\\t\\tclosed_skipped++;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (closed_skipped == taskCount)\\n\\t\\t\\t\\t\\t\\tstage = 'closed_skipped';\\n\\t\\t\\t\\tsc_req_item.stage = stage;\\n\\t\\t\\t\\tsc_req_item.update();\\n\\t\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.work_end.changes() && current.approval != 'rejected' && !current.parent.delivery_plan.nil()\",\n\t\"name\": \"Start Peer Tasks\"\n}```"}
{"prompt":"{\"prompt\":\"EVAM DataSource SortBy Validation\",\"table\":\"sys_ux_composite_datasource\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ux_composite_datasource\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar sortType = SNC.EVAMUXFDatasourceSortUtils.getSortTypeByTableAndField(current.table, current.sort_by);\\n\\t\\tvar m2mDataSets = new GlideRecord('sys_ux_composite_data_m2m_datasource');\\n\\t\\tm2mDataSets.addQuery('datasource', current.sys_id);\\n\\t\\tm2mDataSets.query();\\n\\t\\twhile (m2mDataSets.next()) {\\n\\t\\t\\t\\tif (SNC.EVAMUXFDatasourceSortUtils.hasMismatchedSortType(m2mDataSets.dataset, current.sys_id, sortType)) {\\n\\t\\t\\t\\t\\t\\tgs.addErrorMessage('The SortBy type from the Datasource needs to match' +\\n\\t\\t\\t\\t\\t\\t\\t\\t' the SortBy type from all Datasources within the same EVAM Definition');\\n\\t\\t\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\t\\t\\tcurrent.sort_by = previous.sort_by;\\n\\t\\t\\t\\t\\t\\t// remove the mapping created by the UI submit action as the sort type is invalid\\n\\t\\t\\t\\t\\t\\tif (current.isNewRecord()) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (!SNC.EVAMUXFDatasourceSortUtils.deleteEVAMMapping(m2mDataSets.dataset, current.sys_id))\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tgs.warn('Unable to delete EVAM Mapping dataset =' + dataset + ', datasource=' + datasource);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"sort_byVALCHANGES^active=true^NQactiveCHANGESTOtrue^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"EVAM DataSource SortBy Validation\"\n}```"}
{"prompt":"{\"prompt\":\"Alert on missing Alert key value field\",\"table\":\"sn_em_arm_additional_info\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_em_arm_additional_info\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tgs.addErrorMessage(gs.getMessage(\\\"'Alert Key Value' field shouldn't be empty when 'Alert Key field' has a value\\\"));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"alert_key_fieldISNOTEMPTY^alert_key_valueISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Alert on missing Alert key value field\"\n}```"}
{"prompt":"{\"prompt\":\"Live Feed Group\",\"table\":\"asmt_assessable_record\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_assessable_record\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.live_feed == true) {\\n\\tvar gr = new GlideRecord(\\\"live_group_profile\\\");\\n\\tgr.addQuery(\\\"document\\\", current.source_id);\\n\\tgr.addQuery(\\\"table\\\", current.source_table);\\n\\tgr.query();\\n\\tif (!gr.next()) {\\n\\t\\t//Create a live feed group for this assessable record\\n\\t\\tvar gr_new = new GlideRecord(\\\"live_group_profile\\\");\\n\\t\\tgr_new.document = current.source_id;\\n\\t\\tgr_new.table = current.source_table;\\n\\t\\tgr_new.document_group = true;\\n\\t\\tgr_new.name = current.name;\\n\\t\\tgr_new.short_description = gs.getMessage(\\\"Conversation for assessable record '{0}'\\\", current.name);\\n\\t\\tgr_new.public_group = true;\\n\\t\\tgr_new.visible_group = true;\\n\\t\\tcurrent.live_feed_group = gr_new.insert();\\n\\t} else {\\n\\t\\tcurrent.live_feed_group = gr.sys_id;\\n\\t}\\n} else if (current.operation() != 'insert' && current.live_feed == false){\\n\\tnew LiveFeedUtil().deleteGroup(current.live_feed_group);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(current.operation() == 'update' && current.live_feed.changes()) || (current.operation() == 'insert')\",\n\t\"name\": \"Live Feed Group\"\n}```"}
{"prompt":"{\"prompt\":\"Recalculate 'selected_user_count'\",\"table\":\"sn_hr_core_bulk_case_user_segment_group\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_bulk_case_user_segment_group\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"300\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\t//update included-user-count on 'Bulk case request'\\n\\t\\tvar includedUserCount = new sn_hr_core.hr_BulkCaseRequestUtils().getIncludedUserCount(current.bulk_case_request.sys_id);\\n\\t\\tvar bulkCaseRequestGR = current.bulk_case_request.getRefRecord();\\n\\t\\tbulkCaseRequestGR.setValue('selected_user_count', includedUserCount);\\n\\tif (includedUserCount == 0)\\n\\t\\tbulkCaseRequestGR.setValue('status', 'draft');\\n\\t\\tbulkCaseRequestGR.update();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"bulk_case_request.status=draft^ORbulk_case_request.status=ready^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Recalculate 'selected_user_count'\"\n}```"}
{"prompt":"{\"prompt\":\"Template name cannot be blank\",\"table\":\"sys_report_page_hdrftr\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_report_page_hdrftr\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.name.trim() == \\\"\\\") {\\n\\tcurrent.setAbortAction(true);\\n\\tgs.addErrorMessage(gs.getMessage('The name of the header footer template cannot be blank'));\\n}\\n\\t\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Template name cannot be blank\"\n}```"}
{"prompt":"{\"prompt\":\"Calculate Data Broker API Name\",\"table\":\"sys_ux_data_broker\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ux_data_broker\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar scope = current.sys_scope.scope;\\n\\n\\tif (scope.nil())\\n\\t\\tscope = 'global';\\n\\n\\tvar api_name = '';\\n\\n\\tif (!current.name.nil())\\n\\t\\tapi_name = scope + '.' + current.name;\\t\\n\\n\\tcurrent.api_name = api_name;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"nameVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Calculate Data Broker API Name\"\n}```"}
{"prompt":"{\"prompt\":\"Set draft if item image changed\",\"table\":\"sys_attachment\",\"when\":\"after\",\"actions\":\"cd\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_attachment\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var gr = new GlideRecord(\\\"sc_ic_item_staging\\\");\\nif (gr.get(current.table_sys_id))\\n\\tsc_ic_Factory.wrap(gr).setDraftForImage();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.table_name == \\\"ZZ_YYsc_ic_item_staging\\\" && (current.file_name == \\\"desktop_image\\\" || current.file_name == \\\"mobile_image\\\")\",\n\t\"name\": \"Set draft if item image changed\"\n}```"}
{"prompt":"{\"prompt\":\"Either of Catalog Item or Variable Set\",\"table\":\"catalog_ui_policy\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"catalog_ui_policy\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\tif (current.applies_to == \\\"item\\\")\\n\\t\\tcurrent.variable_set = \\\"\\\";\\n\\telse if (current.applies_to == \\\"set\\\")\\n\\t\\tcurrent.catalog_item = \\\"\\\";\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Either of Catalog Item or Variable Set\"\n}```"}
{"prompt":"{\"prompt\":\"Set Parent\",\"table\":\"change_task\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"current.parent = current.change_request;\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.change_request.changes()\",\n\t\"name\": \"Set Parent\"\n}```"}
{"prompt":"{\"prompt\":\"Check for bad MID credential after clone\",\"table\":\"ecc_agent\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_agent\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\t//\\n\\t// Business Rule:\\n\\t// 1) On entry the status of the MID Server is attempting to transition from 'Down' to 'Up.\\n\\t// 2) If a record exists in the ecc_issue_agent table for the current\\n\\t//\\t\\tMID Server logged by the InstanceClone with a state other than\\n\\t//\\t\\tResolved, update the state to Resolved and the last_detected\\n\\t//\\t\\tfield to the current time.\\n\\t//\\n\\tvar ECC_AGENT_SOURCE_FIELD_VALUE = \\\"InstanceClone\\\";\\n\\tvar ECC_AGENT_ISSUE_TABLE = \\\"ecc_agent_issue\\\";\\n\\tvar LAST_DETECTED = \\\"last_detected\\\";\\n\\tvar MID_SERVER = \\\"mid_server\\\";\\n\\tvar NOT_EQUAL = \\\"!=\\\";\\n\\tvar SOURCE_FIELD = \\\"source\\\";\\n\\tvar STATE_FIELD = \\\"state\\\";\\n\\tvar STATE_FIELD_VALUE_RESOLVED = \\\"Resolved\\\";\\n\\tvar SYSID_FIELD = \\\"sys_id\\\";\\n\\t\\n\\t// Search for existing ecc_agent_issue table record for MID Server logged by InstanceClone\\n\\tvar eccAgentIssueGlideRecord = new GlideRecord(ECC_AGENT_ISSUE_TABLE);\\n\\teccAgentIssueGlideRecord.addQuery(MID_SERVER, current.getValue(SYSID_FIELD));\\n\\teccAgentIssueGlideRecord.addQuery(SOURCE_FIELD, ECC_AGENT_SOURCE_FIELD_VALUE);\\n\\teccAgentIssueGlideRecord.addQuery(STATE_FIELD, NOT_EQUAL, STATE_FIELD_VALUE_RESOLVED);\\n\\teccAgentIssueGlideRecord.query();\\n\\t\\n\\t// update existing record status to Resolved?\\n\\tif (eccAgentIssueGlideRecord.next()) {\\n\\t\\t\\n\\t\\t// Notate the problem has been resolved\\n\\t\\teccAgentIssueGlideRecord.setValue(LAST_DETECTED, new GlideDateTime());\\n\\t\\teccAgentIssueGlideRecord.setValue(STATE_FIELD, STATE_FIELD_VALUE_RESOLVED);\\n\\t\\t\\n\\t\\tif (eccAgentIssueGlideRecord.update() == null)\\n\\t\\t\\tgs.error(\\\"Table update failed: \\\" + ECC_AGENT_ISSUE_TABLE);\\n\\t\\t\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"statusCHANGESFROMDown^statusCHANGESTOUp^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Check for bad MID credential after clone\"\n}```"}
{"prompt":"{\"prompt\":\"Validate content group\",\"table\":\"gsw_content_group\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"gsw_content_group\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"10\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (!(new GuidedSetupUtilSNC().validateContentGroup(current))) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"is_root_contentVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate content group\"\n}```"}
{"prompt":"{\"prompt\":\"Domain - Override Copy\",\"table\":\"sn_ex_sp_favorite_content_type\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_ex_sp_favorite_content_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar contentConfigGr = new GlideRecord(\\\"sn_ex_sp_favorite_content_config\\\");\\n\\n\\t\\tif (!contentConfigGr.isValid())\\n\\t\\t\\t\\treturn;\\n\\n\\t\\tcontentConfigGr.addQuery(\\\"favorite_content_type\\\", current.sys_overrides);\\n\\t\\tcontentConfigGr.query();\\n\\t\\twhile (contentConfigGr.next()) {\\n\\t\\t\\t\\tcontentConfigGr.favorite_content_type = current.getUniqueValue();\\n\\t\\t\\t\\tcontentConfigGr.insert();\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"active=true^EQ\",\n\t\"condition\": \"!current.sys_overrides.nil()\",\n\t\"name\": \"Domain - Override Copy\"\n}```"}
{"prompt":"{\"prompt\":\"Cost cannot be negative\",\"table\":\"cmdb_software_product_model\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_software_product_model\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (parseFloat(current.cost) < 0) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"The value of cost should be positive\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.cost.changes()\",\n\t\"name\": \"Cost cannot be negative\"\n}```"}
{"prompt":"{\"prompt\":\"Add extra data category\",\"table\":\"em_alert\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"em_alert\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\tif (!current.sn_extra_data) {\\n\\t\\t\\t\\treturn; // if there's no extra data, this is not a Log Analytics alert\\n\\t\\t}\\n\\t\\n\\tvar gr = new GlideRecord('em_alert_extra_data');\\n\\tgr.addQuery('alert',current.getValue('sys_id'));\\n\\tgr.query();\\n\\t\\n\\tif (gr.next()){\\n\\t\\tg_scratchpad.category = gr.getValue('category');\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Add extra data category\"\n}```"}
{"prompt":"{\"prompt\":\"Check duplicate notification preferences\",\"table\":\"sys_notification_preference\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_notification_preference\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar duplicateGr = new GlideRecord('sys_notification_preference');\\n\\tduplicateGr.addQuery(\\\"recipient_table\\\", current.recipient_table);\\n\\tduplicateGr.addQuery(\\\"recipient\\\", current.recipient);\\n\\tduplicateGr.addQuery(\\\"destination_table\\\", current.destination_table);\\n\\tduplicateGr.addQuery(\\\"destination\\\", current.destination);\\n\\tduplicateGr.addQuery(\\\"destination_identifier_field\\\", current.destination_identifier_field);\\n\\tduplicateGr.addQuery(\\\"notification\\\", current.notification);\\n\\tif (current.operation() == 'update')\\n\\t\\tduplicateGr.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.sys_id);\\n\\tduplicateGr.query();\\n\\tif (duplicateGr.next()) {\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"This notification preference already exists\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Check duplicate notification preferences\"\n}```"}
{"prompt":"{\"prompt\":\"Copy State to Problem State\",\"table\":\"problem\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"false\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"problem\",\n\t\"advanced\": \"false\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"0\",\n\t\"add_message\": \"false\",\n\t\"script\": \"\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"stateVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Copy State to Problem State\"\n}```"}
{"prompt":"{\"prompt\":\"Delete Sections\",\"table\":\"sc_ic_item_staging\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_ic_item_staging\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"deleteSections();\\n\\nfunction deleteSections() {\\n\\tvar section = new GlideRecord(\\\"sc_ic_section\\\");\\n\\tsection.addQuery(\\\"sc_ic_item_staging\\\", current.sys_id);\\n\\tsection.query();\\n\\twhile (section.next())\\n\\t\\tsection.deleteRecord();\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete Sections\"\n}```"}
{"prompt":"{\"prompt\":\"Show Conflict ErrorMessage\",\"table\":\"sys_ui_policy_action\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ui_policy_action\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var msg = policyActionConflicts();\\r\\nif (msg != \\\"\\\")\\r\\n\\t gs.addErrorMessage(gs.getMessage(\\\"There are multiple UI Policies with the same Order for this field - their run order is not predictable\\\") + \\\": \\\" + msg);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Show Conflict ErrorMessage\"\n}```"}
{"prompt":"{\"prompt\":\"Auto sync user for assble record and cat\",\"table\":\"asmt_metric_type\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_metric_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar asmtUtil = new global.AssessmentUtils();\\n\\tasmtUtil.updateCategoryUsers(current, previous);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"schedule_type=scheduled^evaluation_method=assessment^user_fieldISNOTEMPTY^user_fieldVALCHANGES^publish_state=published^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Auto sync user for assble record and cat\"\n}```"}
{"prompt":"{\"prompt\":\"Send email upon test suite completion\",\"table\":\"sys_atf_test_suite_result\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_atf_test_suite_result\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.base_suite_result.number == current.number){\\n\\t\\tgs.eventQueue(\\\"suite.completed\\\", current, gs.getUserID(), gs.getUserName());\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"statusINcompleted,success,failure,error,canceled,skipped^schedule_runISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Send email upon test suite completion\"\n}```"}
{"prompt":"{\"prompt\":\"Maintain Catalog Category M2M Delete\",\"table\":\"sc_cat_item_category\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_cat_item_category\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"SNC.CatalogItemCategory.handleRemove(current);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"sc_cat_item.state!=draft^EQ\",\n\t\"condition\": \"!current.isActionAborted() && new global.GlobalServiceCatalogUtil().getCatalogWizardOrigin() != 'aes'\",\n\t\"name\": \"Maintain Catalog Category M2M Delete\"\n}```"}
{"prompt":"{\"prompt\":\"Clear Escalation Set when type is shift\",\"table\":\"cmn_rota_contact_preference\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmn_rota_contact_preference\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"type=rota^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear Escalation Set when type is shift\"\n}```"}
{"prompt":"{\"prompt\":\"Event Management - Create Scheduled Jobs\",\"table\":\"sys_properties\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var sysPropertiesGr = new GlideRecord(\\\"sys_properties\\\");\\nvar qc = sysPropertiesGr.addQuery(\\\"name\\\", \\\"evt_mgmt.event_processor_job_count\\\");\\nqc.addOrCondition(\\\"name\\\", \\\"evt_mgmt.event_processor_enable_multi_node\\\");\\nqc.addOrCondition(\\\"name\\\", \\\"evt_mgmt.events_processing_delay_sec\\\");\\nsysPropertiesGr.query();\\nvar count = 1;\\nvar enableMultiNode = false;\\nvar duration = '';\\nwhile (sysPropertiesGr.next()) {\\n\\tif (sysPropertiesGr.getValue(\\\"name\\\") == 'evt_mgmt.event_processor_job_count')\\n\\t\\tcount = sysPropertiesGr.getValue(\\\"value\\\");\\n\\telse if (sysPropertiesGr.getValue(\\\"name\\\") == 'evt_mgmt.event_processor_enable_multi_node')\\n\\t\\tenableMultiNode = sysPropertiesGr.getValue(\\\"value\\\");\\n\\telse if (sysPropertiesGr.getValue(\\\"name\\\") == 'evt_mgmt.events_processing_delay_sec')\\n\\t\\tduration = sysPropertiesGr.getValue(\\\"value\\\");\\n}\\nvar maxNumberOfJobs = 4;\\n\\ncurrentParamName = current.name;\\nif(currentParamName == 'evt_mgmt.event_processor_job_count'){\\n\\tcount = current.value;\\n\\tif(count > maxNumberOfJobs)\\n\\t\\tdisallowInvalidJobsNumber();\\n}else if(currentParamName == 'evt_mgmt.event_processor_enable_multi_node')\\n\\tenableMultiNode = current.value;\\nelse if (currentParamName == 'evt_mgmt.events_processing_delay_sec')\\n\\tduration = current.value;\\n\\nvar processEventsJobs = ProcessEventsJobs.get();\\nprocessEventsJobs.createNewJobs(count, enableMultiNode, duration);\\n\\nfunction disallowInvalidJobsNumber() {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"The number of defined jobs cannot be more than {0}\\\", maxNumberOfJobs));\\n\\t\\tcurrent.setAbortAction(true);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=evt_mgmt.event_processor_job_count^ORname=evt_mgmt.event_processor_enable_multi_node^ORname=evt_mgmt.events_processing_delay_sec^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Event Management - Create Scheduled Jobs\"\n}```"}
{"prompt":"{\"prompt\":\"Auto stakeholder creation\",\"table\":\"asmt_m2m_category_user\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_m2m_category_user\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"createStakeholder(current);\\n\\nfunction createStakeholder(record) {\\n\\t\\n\\tvar catAssess = new GlideRecord(\\\"asmt_m2m_category_assessment\\\");\\n\\tcatAssess.addQuery(\\\"category\\\", record.metric_category.sys_id);\\n\\tcatAssess.query();\\n\\twhile (catAssess.next()){\\n\\t\\t\\tvar assessmentSys = catAssess.assessment_record.sys_id;\\n\\t\\t\\tnew AssessmentUtils().createStakeholders(/*categoryUserSys*/record.sys_id, assessmentSys);\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.metric_category.create_stakeholders == true\",\n\t\"name\": \"Auto stakeholder creation\"\n}```"}
{"prompt":"{\"prompt\":\"SendToClientDefaultEmailTemplateSysId\",\"table\":\"sysevent_email_action\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sysevent_email_action\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar defaultTemplateSysId = gs.getProperty('glide.notification.email.default_template_sys_id');\\n\\n\\t// Make sure the record exists before returning it\\n\\tvar templateGR = new GlideRecord('sysevent_email_template');\\n\\tif (defaultTemplateSysId && templateGR.get(defaultTemplateSysId))\\n\\t\\tg_scratchpad.defaultEmailTemplateSysId = defaultTemplateSysId;\\n\\telse \\n\\t\\tg_scratchpad.defaultEmailTemplateSysId = \\\"\\\";\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"SendToClientDefaultEmailTemplateSysId\"\n}```"}
{"prompt":"{\"prompt\":\"Cascade topic manager and contributor\",\"table\":\"topic\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"topic\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar topicPermissionUtil = new TopicPermissionUtil();\\n\\n\\tif (current.topic_manager.toString() !== previous.topic_manager.toString()) {\\n\\t\\ttopicPermissionUtil.applyCascadeForTopicManager(current, previous);\\n\\t}\\n\\n\\tif (current.topic_contributor.toString() !== previous.topic_contributor.toString()) {\\n\\t\\ttopicPermissionUtil.applyCascadeForTopicContributor(current, previous);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"topic_managerVALCHANGES^ORtopic_contributorVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Cascade topic manager and contributor\"\n}```"}
{"prompt":"{\"prompt\":\"Validate vendor key change\",\"table\":\"sys_properties\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"1000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\tif (!gs.hasRole('maint')) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(gs.getMessage('Vendor key cannot be changed by non-maint'));\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=glide.appcreator.company.code^EQ\",\n\t\"condition\": \"gs.isInteractive()\",\n\t\"name\": \"Validate vendor key change\"\n}```"}
{"prompt":"{\"prompt\":\"Flush shareWith to match empty lists\",\"table\":\"chg_soc_definition\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"chg_soc_definition\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"share_groupsCHANGESTO^share_rolesISEMPTY^share_usersISEMPTY^share_with=2^NQshare_rolesCHANGESTO^share_groupsISEMPTY^share_usersISEMPTY^share_with=2^NQshare_usersCHANGESTO^share_groupsISEMPTY^share_rolesISEMPTY^share_with=2^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Flush shareWith to match empty lists\"\n}```"}
{"prompt":"{\"prompt\":\"Validate only one resolver per type\",\"table\":\"sys_graphql_typeresolver\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_graphql_typeresolver\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar resolverAggregate = new GlideAggregate('sys_graphql_typeresolver');\\n\\t\\tresolverAggregate.addQuery('schema', current.schema);\\n\\t\\tresolverAggregate.addQuery('type_name', current.type_name);\\n\\t\\tresolverAggregate.addQuery('sys_id', '!=', current);\\n\\t\\tresolverAggregate.addAggregate('count');\\n\\t\\tresolverAggregate.query();\\n\\n\\t\\tif (resolverAggregate.next() && resolverAggregate.getAggregate('count') > 0) {\\n\\t\\t\\t\\tgs.addErrorMessage('Resolver already defined for ' + current.type_name + ' type. Only one resolver can be defined for a type.');\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.type_name.changes()\",\n\t\"name\": \"Validate only one resolver per type\"\n}```"}
{"prompt":"{\"prompt\":\"Copy Attachment - new Task\",\"table\":\"task\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\tvar session = gs.getSession();\\n\\tvar interactionId = session.getClientData('parent_interaction');\\n\\tsession.clearClientData('parent_interaction');\\n\\t\\n\\tif (!gs.nil(interactionId) && new global.VAGlobalUtil().isAttachmentCopyEnabled(current.getTableName())) {\\n\\t\\tvar interactionGr = new GlideRecord('interaction');\\n\\t\\tif (interactionGr.get(interactionId)) {\\n\\t\\t\\tnew InteractionRelationshipUtil().copyAttachments(interactionGr, current);\\n\\t\\t}\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\\tcurrent.isNewRecord()\",\n\t\"name\": \"Copy Attachment - new Task\"\n}```"}
{"prompt":"{\"prompt\":\"National Tax ID UI Message\",\"table\":\"sn_hr_core_contact\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_contact\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar taxIDEl = current.getElement('national_tax_id');\\n\\t\\n\\tif (!taxIDEl || !taxIDEl.canWrite() || !(taxIDEl.getED().getInternalType() == 'string') || !current.national_tax_id)\\n\\t\\treturn;\\n\\t\\n\\tgs.addInfoMessage(gs.getMessage('Consider encrypting the \\\"{0}\\\" text by using the \\\"{1}\\\" field instead', [taxIDEl.getLabel(), current.getElement('national_tax_id_encrypted').getLabel()]));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"National Tax ID UI Message\"\n}```"}
{"prompt":"{\"prompt\":\"Check if name field is unique\",\"table\":\"sys_sg_screen_field\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_screen_field\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif(!current.getValue('field_name'))\\n\\t\\treturn;\\n\\t\\n\\tvar fieldName = current.getValue('field_name');\\n\\tvar screen = current.getValue('screen');\\n\\tgr = new GlideRecord('sys_sg_screen_field');\\n\\tgr.addQuery('data_item_field_name', fieldName);\\n\\tgr.addQuery('screen', screen);\\n\\tgr.query();\\n\\tif (gr.next() && gr.getUniqueValue() != current.getUniqueValue()) {\\n\\t\\tgs.addInfoMessage(gs.getMessage('Name field must be unique'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\t\\n\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Check if name field is unique\"\n}```"}
{"prompt":"{\"prompt\":\"Validate inputs\",\"table\":\"em_connector_definition\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"em_connector_definition\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"check();\\n\\nfunction check(){\\n\\tvar min_schedule = GlideProperties.getInt('evt_mgmt.connector.minimum_schedule',0);\\n\\t\\n\\tif (current.schedule < min_schedule) {\\n\\t\\tvar errMsg = gs.getMessage(\\\"Schedule must be greater than or equal to {0}\\\", [min_schedule]);\\n\\t\\terrorAndAbort(errMsg);\\n\\t}\\n\\t\\n\\tif (gs.nil(current.name.trim())) {\\n\\t\\tvar errMsg = gs.getMessage(\\\"Name should not be empty\\\");\\n\\t\\terrorAndAbort(errMsg);\\n\\t}\\n\\t\\n\\tfunction errorAndAbort(errMsg) {\\n\\t\\tgs.addErrorMessage(errMsg);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate inputs\"\n}```"}
{"prompt":"{\"prompt\":\"Add info message on subscriptions lists\",\"table\":\"license_details\",\"when\":\"before\",\"actions\":\"r\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"true\",\n\t\"collection\": \"license_details\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"90\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\ttry {\\n\\t\\tif (RP.isHomePage())\\n\\t\\t\\treturn;\\n\\t\\t\\n\\t\\tif (JSUtil.nil(ListProperties))\\n\\t\\t\\treturn;\\n\\t\\t\\n\\t\\tif (JSUtil.nil(ListProperties.getTable()))\\n\\t\\t\\treturn;\\n\\t\\t\\n\\t\\tif (ListProperties.getTable() + '' != 'license_details')\\n\\t\\t\\treturn;\\n\\t\\t\\n\\t\\tif (ListProperties.isRelatedList())\\n\\t\\t\\treturn;\\n\\t\\t\\t\\n\\t\\tif (ListProperties.isEmbeddedList())\\n\\t\\t\\treturn;\\n\\t\\t\\n\\t\\tvar viewName = ListProperties.getView();\\n\\t\\tif (JSUtil.notNil(viewName)) {\\n\\t\\t\\tif ((viewName.indexOf(\\\"rpt-temp\\\") == 0) || (viewName.indexOf(\\\"RPT\\\") == 0))\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tvar unmappedTableCount = SNC.CustomTableUtils.getUnmappedTableCount();\\n\\t\\tif (unmappedTableCount > 0) {\\n\\t\\t\\tvar link = SNC.CustomTableUtils.getInventoryURI();\\n\\t\\t\\tgs.addInfoMessage(gs.getMessage('warn_user_of_subscription_impact', link));\\n\\t\\t}\\n\\n\\t\\tgs.addInfoMessage(gs.getMessage('Not all subscription services are monitored and not all of your purchased subscriptions may appear in the list. ') + '<a id=\\\"permalink\\\" class=\\\"linked\\\" style=\\\"color:#666666;\\\" href=\\\"/weba_redirect.do?sysparm_url=http://docs.servicenow.com/?context=CSHelp:Subscription-Management-Missing-Subscriptions&sysparm_category=Subscription-List&sysparm_action=More-Info&sysparm_name=Clicked\\\" target=\\\"_blank\\\">' + gs.getMessage('More Info') + '</a>');\\n\\n\\t\\tif (SNC.UsageAnalyticsScriptUtils.getEntitlementLevel() === 'OFF' && SNC.UsageAnalyticsScriptUtils.isAutoSystemEntitlementEnabled())\\n\\t\\t\\tgs.addInfoMessage(gs.getMessage('licensing_per_user_allocation_info'));\\n\\n\\t} catch (e) {\\n\\t}\\n\\t\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Add info message on subscriptions lists\"\n}```"}
{"prompt":"{\"prompt\":\"SNC - ITIL - Close Related\",\"table\":\"global\",\"when\":\"after\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"//\\n// Close any tasks that are related to the current task\\n//\\nfunction closeRelatedTasks(me) {\\n\\tvar task = new GlideRecord(\\\"task\\\");\\n\\ttask.addQuery(\\\"parent\\\", me.sys_id);\\n\\ttask.addQuery(\\\"sys_class_name\\\", \\\"!=\\\", \\\"kb_submission\\\");\\n\\ttask.addQuery(\\\"sys_class_name\\\", \\\"!=\\\", \\\"incident\\\");\\n\\ttask.query();\\n\\twhile (task.next()) {\\n\\t\\tif (task.sys_class_name == 'problem')\\n\\t\\t\\tcloseProblem(task.sys_id, me.number);\\n\\t\\telse if (task.sys_class_name == 'change_request')\\n\\t\\t\\tcloseChange(task.sys_id, me.number);\\n\\t\\telse {\\n\\t\\t\\ttask.active.setValue(false);\\n\\t\\t\\ttask.update();\\n\\t\\t\\tgs.print(\\\"Task \\\" + task.number + ' closed based on closure of task ' + me.number);\\n\\t\\t}\\n\\t}\\n\\t\\n\\tthis.closeIncident(me);\\n}\\n\\nfunction closeIncident(me) {\\n\\tvar incident = new GlideRecord('incident');\\n\\tif (incident.isValidField('parent_incident'))\\n\\t\\tincident.addQuery('parent_incident', me.sys_id);\\n\\telse if(incident.isValidField('parent'))\\n\\t\\t\\tincident.addQuery('parent', me.sys_id);\\n\\t\\telse\\n\\t\\t\\treturn;\\n\\tincident.addActiveQuery();\\n\\tincident.query();\\n\\twhile (incident.next()) {\\n\\t\\tvar msg = gs.getMessage(\\\"Incident '{0}' closed based on closure of task '{1}'\\\", [incident.number, me.number]);\\n\\t\\tgs.print(msg);\\n\\t\\tincident.incident_state.setValue(IncidentState.CLOSED);\\n\\t\\tincident.active.setValue(false);\\n\\t\\tincident.comments = msg;\\n\\t\\tif (incident.isValidField(\\\"close_notes\\\")) {\\n\\t\\t\\tvar notes = incident.close_notes.getDisplayValue();\\n\\t\\t\\tnotes = notes + '\\\\n' + msg + '\\\\n\\\\n' + me.close_notes;\\n\\t\\t\\tincident.close_notes.setValue(notes);\\n\\t\\t}\\n\\t\\tif(incident.isValidField(\\\"close_code\\\"))\\n\\t\\t\\tincident.close_code.setValue(me.close_code);\\n\\t\\tincident.update();\\n\\t}\\n}\\n\\nfunction closeProblem(myID, fromNumber) {\\n\\tif (pm.isActive('com.snc.best_practice.problem.madrid.state_model'))\\n\\t\\treturn;\\n\\tvar problem = new GlideRecord('problem');\\n\\tif (problem.get('sys_id', myID)) {\\n\\t\\tvar msg = gs.getMessage(\\\"Problem '{0}' closed based on closure of task '{1}'\\\", [problem.number, fromNumber]);\\n\\t\\tproblem.problem_state.setValue(4);\\n\\t\\tvar notes = problem.close_notes.getDisplayValue();\\n\\t\\tnotes = notes + '\\\\n' + msg;\\n\\t\\tproblem.close_notes.setValue(notes);\\n\\t\\tproblem.update();\\n\\t\\tgs.print(msg);\\n\\t}\\n}\\n\\nfunction closeChange(myID, fromNumber) {\\n\\tvar rfc = new GlideRecord('change_request');\\n\\tif (rfc.get('sys_id', myID)) {\\n\\t\\tvar chgReq = ChangeRequest(rfc);\\n\\t\\t\\n\\t\\tif (!chgReq.isClosed() && !chgReq.isCancelled()) {\\n\\t\\t\\tchgReq.close();\\n\\t\\t\\tvar msg = gs.getMessage(\\\"Change '{0}' closed based on closure of task '{1}'\\\", [rfc.number, fromNumber]);\\n\\t\\t\\tvar notes = rfc.close_notes.getDisplayValue();\\n\\t\\t\\tnotes = notes + '\\\\n' + msg;\\n\\t\\t\\trfc.close_notes = notes;\\n\\t\\t\\trfc.update();\\n\\t\\t}\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"SNC - ITIL - Close Related\"\n}```"}
{"prompt":"{\"prompt\":\"Transfer commenting and suggesting\",\"table\":\"kb_knowledge\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"kb_knowledge\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\t\\tif(current.kb_knowledge_base != previous.kb_knowledge_base) {\\n\\t\\t\\t\\tcurrent.disable_commenting = current.kb_knowledge_base.disable_commenting;\\n\\t\\t\\t\\tcurrent.disable_suggesting = current.kb_knowledge_base.disable_suggesting;\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"sys_class_name!=kb_knowledge_block^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Transfer commenting and suggesting\"\n}```"}
{"prompt":"{\"prompt\":\"RefreshStrategiesMap\",\"table\":\"sm_flapper_strategy\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sm_flapper_strategy\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar script = new SNC.FlapperStrategiesCenterWrapper();\\n\\t\\tscript.refresh();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"RefreshStrategiesMap\"\n}```"}
{"prompt":"{\"prompt\":\"PA Delete indicator breakdowns\",\"table\":\"pa_breakdown_mappings\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_breakdown_mappings\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar indicator_breakdowns = new GlideRecord('pa_indicator_breakdowns');\\n\\tindicator_breakdowns.addQuery('breakdown', current.breakdown);\\n\\tindicator_breakdowns.addQuery('indicator.cube.facts_table', current.facts_table);\\n\\t\\n\\tindicator_breakdowns.query();\\n\\tindicator_breakdowns.deleteMultiple();\\t\\t\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"PA Delete indicator breakdowns\"\n}```"}
{"prompt":"{\"prompt\":\"MID invalidation\",\"table\":\"ecc_agent\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_agent\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\t //This function will be automatically called when this rule is processed.\\n\\t \\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"public_keyVALCHANGES^validated!=rekey^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"MID invalidation\"\n}```"}
{"prompt":"{\"prompt\":\"Clean user_roles fields\",\"table\":\"sys_user_role\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_user_role\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"fixUserRolesFields();\\r\\n\\r\\nfunction fixUserRolesFields() {\\r\\n\\tgs.log(\\\"Removing deleted role from role picker fields: \\\" + current.name);\\r\\n\\tvar role = current.name.toString();\\r\\n\\tvar roles = new GlideRecord(\\\"sys_user_role\\\");\\r\\n\\troles.addQuery(\\\"name\\\", role);\\r\\n\\troles.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.sys_id);\\r\\n\\troles.query();\\r\\n\\tif (roles.next())\\r\\n\\t\\treturn; // if another role exists with the same name, do nothing\\r\\n\\t\\r\\n\\tvar gr = new GlideRecord('sys_dictionary');\\r\\n\\tgr.addQuery('internal_type', 'user_roles');\\r\\n\\tgr.query();\\r\\n\\twhile (gr.next()) {\\r\\n\\t\\tif (!GlideTableDescriptor.isValid(gr.name + gr.element))\\r\\n\\t\\t\\tcontinue;\\r\\n\\r\\n\\t\\tvar rolestable = new GlideMultipleDelete(gr.name + gr.element); // e.g., sys_app_moduleroles\\r\\n\\t\\trolestable.addQuery(\\\"value\\\", role);\\r\\n\\t\\trolestable.execute();\\r\\n\\t}\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Clean user_roles fields\"\n}```"}
{"prompt":"{\"prompt\":\"Name and pattern cannot be empty\",\"table\":\"em_event_type\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"em_event_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if(gs.nil(current.name) || current.name.trim().length == 0){\\n\\tgs.addErrorMessage( gs.getMessage('Name cannot be empty') );\\n\\tcurrent.setAbortAction(true);\\n}\\n\\nif(gs.nil(current.pattern) || current.pattern.trim().length == 0){\\n\\tgs.addErrorMessage( gs.getMessage('Pattern cannot be empty') );\\n\\tcurrent.setAbortAction(true);\\n}\\n\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Name and pattern cannot be empty\"\n}```"}
{"prompt":"{\"prompt\":\"Flush Form Cache\",\"table\":\"sys_ui_policy\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ui_policy\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.cacheFlush('syscache_realform');\\r\\ngs.cacheFlush('syscache_jelly_script');\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Flush Form Cache\"\n}```"}
{"prompt":"{\"prompt\":\"Flush Form Cache\",\"table\":\"sys_ui_policy_action\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ui_policy_action\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.cacheFlush('syscache_realform');\\r\\ngs.cacheFlush('syscache_jelly_script');\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Flush Form Cache\"\n}```"}
{"prompt":"{\"prompt\":\"Check if quantity received is populated\",\"table\":\"alm_transfer_order_line_task\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"alm_transfer_order_line_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// As quantity received is mandatory for consumables of multiple quantity, check if 'quantity_received' is not empty\\nif(current.getValue('stage') === 'received' && parseInt(current.transfer_order_line.quantity_remaining) !== 1 && !(gs.nil(current.transfer_order_line.quantity_remaining)) && (current.transfer_order_line.model.sys_class_name.toString() === 'cmdb_consumable_product_model' ||\\tcurrent.transfer_order_line.model.asset_tracking_strategy.toString() === 'track_as_consumable')){\\n\\tif(gs.nil(current.getValue('quantity_received'))){\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Please provide quantity received to be received\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.getValue('state') !== '7'\",\n\t\"name\": \"Check if quantity received is populated\"\n}```"}
{"prompt":"{\"prompt\":\"Clean Previous Update Set Origin Id\",\"table\":\"sys_update_xml\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_update_xml\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var originCleaner = new SNC.UpdateSetOriginCleaner(current, sys_action);\\r\\noriginCleaner.before(previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Clean Previous Update Set Origin Id\"\n}```"}
{"prompt":"{\"prompt\":\"Ensure non-empty request content setting\",\"table\":\"sys_ws_definition\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ws_definition\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"120\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\t//This function will be automatically called when this rule is processed.\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"consumesISEMPTY^consumes_customized=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Ensure non-empty request content setting\"\n}```"}
{"prompt":"{\"prompt\":\"Recalculate Affected Cis before delete\",\"table\":\"cmdb_ci_outage\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci_outage\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t// Delete Affected Ci's mtom record before cascade delete to recalculate availability of affected offerings.\\n\\tvar cmdb_outage_ci_mtom = new GlideRecord('cmdb_outage_ci_mtom');\\n\\tcmdb_outage_ci_mtom.addQuery('outage', current.sys_id);\\n\\tcmdb_outage_ci_mtom.query();\\n\\tcmdb_outage_ci_mtom.deleteMultiple();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Recalculate Affected Cis before delete\"\n}```"}
{"prompt":"{\"prompt\":\"Default Activity and Attachments tab\",\"table\":\"ticket_configuration\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ticket_configuration\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar gr = new GlideRecord('ticket_tab_configuration');\\n\\t\\n\\t\\t//Creating default activity tab\\n\\t\\tgr.initialize();\\n\\t\\tgr.type = 'activity';\\n\\t\\tgr.tab_name = gs.getMessage('Activity');\\n\\t\\tgr.order = 10;\\n\\t\\tgr.parent = current.sys_id;\\n\\tgr.table = current.table;\\n\\t\\tgr.insert();\\n\\t\\n\\t\\t//Creating default attachments tab\\n\\t\\tgr.initialize();\\n\\t\\tgr.type = 'attachments';\\n\\t\\tgr.tab_name = gs.getMessage('Attachments');\\n\\t\\tgr.order = 20;\\n\\t\\tgr.parent = current.sys_id;\\n\\tgr.table = current.table;\\n\\t\\tgr.insert();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.sys_overrides.nil()\",\n\t\"name\": \"Default Activity and Attachments tab\"\n}```"}
{"prompt":"{\"prompt\":\"Update Email Devices\",\"table\":\"sys_user\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_user\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var thisSysID = current.sys_id;\\nvar device = new GlideRecord('cmn_notif_device');\\ndevice.addQuery('user', thisSysID);\\ndevice.addQuery('type', 'Email');\\ndevice.addQuery('primary_email', true);\\ndevice.query();\\n\\nwhile (device.next()) {\\n\\tgs.log('Updating ' + current.name + '\\\\'s primary email device based on change to user record email address');\\n\\tdevice.email_address = current.email; \\n\\tdevice.setWorkflow(false);\\n\\tdevice.update();\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.email.changes()\",\n\t\"name\": \"Update Email Devices\"\n}```"}
{"prompt":"{\"prompt\":\"Sync transferred for from task to tol\",\"table\":\"alm_transfer_order_line_task\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"alm_transfer_order_line_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if(!(gs.nil(current.transferred_for))){\\n\\tvar tolGr = new GlideRecord('alm_transfer_order_line');\\n\\tif(tolGr.get(current.transfer_order_line)){\\n\\t\\ttolGr.transferred_for = current.transferred_for;\\n\\t\\ttolGr.update();\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"stage=delivered^EQ\",\n\t\"condition\": \"current.getValue('state') === '3' || current.getValue('state') === '7'\",\n\t\"name\": \"Sync transferred for from task to tol\"\n}```"}
{"prompt":"{\"prompt\":\"Populate Order on Display\",\"table\":\"cab_agenda_item\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cab_agenda_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar cabMeeting = new CABMeeting(current.cab_meeting.getRefRecord());\\n\\tcurrent.order = cabMeeting.getNextOrder();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"orderISEMPTY^cab_meetingISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Populate Order on Display\"\n}```"}
{"prompt":"{\"prompt\":\"Update Closed fields\",\"table\":\"problem_task\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"problem_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"2000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tcurrent.closed_at = new GlideDateTime();\\n\\tcurrent.closed_by = gs.getUserID();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"state=157^close_code=completed^ORclose_code=canceled^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Update Closed fields\"\n}```"}
{"prompt":"{\"prompt\":\"Update VTB Card-Labels Count On Delete\",\"table\":\"label_entry\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"label_entry\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar gr = new GlideRecord(\\\"vtb_card\\\");\\n\\t\\tif (gr.get(current.table_key)) {\\n\\t\\t\\t\\tvar count = parseInt(gr.getValue(\\\"labels_count\\\"));\\n\\t\\t\\t\\tif (count > 0) {\\n\\t\\t\\t\\t\\t\\tgr.setValue(\\\"labels_count\\\", count - 1);\\n\\t\\t\\t\\t\\t\\tgr.update();\\n\\t\\t\\t\\t}\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"table=vtb_card^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Update VTB Card-Labels Count On Delete\"\n}```"}
{"prompt":"{\"prompt\":\"Create Business Rule on Remote table\",\"table\":\"asmt_metric_type\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_metric_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"110\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if ((!current.table.nil()) && !isTableBlacklisted(current.table)\\n\\t&& (current.operation() == 'insert' || current.table.changes() || current.condition.changes())) {\\n\\tvar updateCurrent = false;\\n\\t\\tupdateCurrent = createBusinessRule(current);\\n\\t\\tupdateCurrent = createDeleteBusinessRule(current) || updateCurrent;\\n\\tif (updateCurrent) {\\n\\t\\tcurrent.setWorkflow(false);\\n\\t\\tcurrent.update();\\n\\t\\tcurrent.setWorkflow(true);\\n\\t}\\n}\\n\\nfunction createBusinessRule(current) {\\n\\tvar gr = new GlideRecord(\\\"sys_script\\\");\\n\\tif (!current.business_rule.nil() && ((!gr.get(current.business_rule)) || (current.operation() == \\\"insert\\\")))\\n\\t\\t\\tcurrent.business_rule = \\\"\\\";\\n\\t\\n\\tif ((current.table.changes()) || current.condition.changes() || (current.operation() == \\\"insert\\\")) {\\n\\t\\tgr.collection = current.table;\\n\\t\\tgr.script = buildScript(current);\\n\\t\\tgr.execute_function = true;\\n\\t\\tgr.condition = \\\"\\\";\\n\\t}\\n\\tif (current.business_rule.nil()) {\\n\\t\\tgr.name = \\\"Auto business rule for Assessments\\\";\\n\\t\\tgr.action_insert = true;\\n\\t\\tgr.action_update = true;\\n\\t\\tgr.active = true;\\n\\t\\tgr.when = \\\"after\\\";\\n\\t\\tvar br = gr.insert();\\n\\t\\tcurrent.business_rule = br;\\n\\t\\treturn true;\\n\\t} else\\n\\t\\tgr.update();\\n\\treturn false;\\n}\\n\\nfunction createDeleteBusinessRule(current) {\\n\\tvar gr = new GlideRecord(\\\"sys_script\\\");\\n\\t\\t\\n\\tif (!current.delete_business_rule.nil() && ((!gr.get(current.delete_business_rule)) || (current.operation() == \\\"insert\\\")))\\n\\t\\t\\tcurrent.delete_business_rule = \\\"\\\";\\n\\tif ((current.table.changes()) || (current.operation() == \\\"insert\\\")) {\\n\\t\\tgr.collection = current.table;\\n\\t\\tgr.script = buildDeletionScript(current);\\n\\t\\tgr.execute_function = true;\\n\\t}\\n\\tif (current.delete_business_rule.nil()) {\\n\\t\\tgr.name = \\\"Auto deletion rule for Assessments\\\";\\n\\t\\tgr.action_delete = true;\\n\\t\\tgr.active = true;\\n\\t\\tgr.when = \\\"before\\\";\\n\\t\\tgr.script = buildDeletionScript(current);\\n\\t\\tvar br = gr.insert();\\n\\t\\tcurrent.delete_business_rule = br;\\n\\t\\treturn true;\\n\\t} else \\n\\t\\tgr.update();\\n\\treturn false;\\n}\\n\\nfunction buildScript(current) {\\n\\tvar escapeCondition = current.condition.toString();\\n\\tescapeCondition = escapeCondition.replace(/[\\\\'\\\\\\\"]/g, \\\"\\\\\\\\'\\\");\\n\\tvar brCondition = \\\"AssessmentUtils.conditionCheck(current, '\\\" + escapeCondition + \\\"')\\\";\\n\\tvar script = \\\"function onAfter(current, previous) {\\\\n var AssessmentUtils = new global.AssessmentUtils(); \\\\n if (\\\" + brCondition + \\\") { \\\\n \\\";\\n\\tscript += \\\"\\t\\tAssessmentUtils.checkRecord(current, '\\\" + current.sys_id + \\\"', true);\\\\n\\\";\\n\\tscript += \\\"}}\\\";\\n\\treturn script;\\n}\\n\\nfunction buildDeletionScript(current) {\\n\\tvar script = \\\"function onBefore(current, previous) { \\\\n\\\";\\n\\tscript += \\\"\\t new global.AssessmentUtils().checkDeleteRecord(current, '\\\" + current.sys_id + \\\"', true);\\\\n\\\";\\n\\tscript += \\\"}\\\";\\n\\treturn script;\\n\\n}\\n\\nfunction isTableBlacklisted(table) {\\n\\tvar isBlackListTable = false;\\n\\tvar blackListTables = gs.getProperty(\\\"com.snc.assessment.tables.blacklist\\\");\\n\\tif (!blackListTables) return false;\\n\\tblackListTables = blackListTables.toString().split(',');\\n\\tfor (var i = 0; i < blackListTables.length; i++) {\\n\\t\\tif (blackListTables[i] == table) return true;\\n\\t}\\n\\treturn false;\\n}\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(current.evaluation_method == \\\"assessment\\\" || current.evaluation_method == \\\"attestation_v2\\\" || current.evaluation_method == \\\"risk_assessment\\\" || current.evaluation_method == \\\"vdr_risk_asmt\\\") && current.sys_class_name + \\\"\\\" !== \\\"change_risk_asmt\\\"\",\n\t\"name\": \"Create Business Rule on Remote table\"\n}```"}
{"prompt":"{\"prompt\":\"Sync on insert with label users list\",\"table\":\"label_user_m2m\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"label_user_m2m\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"sync();\\n\\nfunction sync() {\\n\\t(new LabelUpdate()).syncUserLabelAdditionFromM2M(current);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"granted_byISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Sync on insert with label users list\"\n}```"}
{"prompt":"{\"prompt\":\"Validate JSON value\",\"table\":\"sys_sg_properties\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\ttry {\\n\\t\\tJSON.parse(current.getValue(\\\"value\\\"));\\n\\t} catch(e) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Invalid JSON value\\\"));\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"type=json^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate JSON value\"\n}```"}
{"prompt":"{\"prompt\":\"Set OAuth info on scratchpad\",\"table\":\"sys_rest_message\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_rest_message\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*undefined when async or display*/) {\\n\\t\\n\\tg_scratchpad.oauth_provider_id = current.oauth2_profile.oauth_entity;\\n\\tg_scratchpad.grant_type = String(current.oauth2_profile.grant_type);\\n\\t\\n})(current, typeof previous != 'undefined' ?\\tprevious : null);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"oauth2_profileISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Set OAuth info on scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"Generate Safe Output Variable Name\",\"table\":\"sys_app_template_output_var\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_app_template_output_var\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// If the name is changed for any reason a info message will be displayed to the user, as well as, logged.\\n\\tvar templateAPI = new sn_templates.TemplateScriptableAPI();\\n\\tvar cleanVarName = templateAPI.generateCleanFlowVariableName(current.name);\\n\\n\\tif (cleanVarName !== current.getValue('name')) {\\t\\n\\t\\t// Inform the user that a change in the variable name was made.\\n\\t\\tvar infoMessage = gs.getMessage(\\\"Template Output Variable name was modified. New name: '{0}', previous name: '{1}'\\\", [cleanVarName, current.name]);\\n\\t\\tgs.addInfoMessage(infoMessage);\\n\\n\\t\\t// Set the name to be the clean variable name.\\n\\t\\tcurrent.name = cleanVarName;\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Generate Safe Output Variable Name\"\n}```"}
{"prompt":"{\"prompt\":\"Edit Dynamic Value from List View\",\"table\":\"sys_dictionary\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_dictionary\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"updateDynamic();\\ncleanSimple();\\ncleanDynamic();\\n\\n\\nfunction updateDynamic(){\\nvar currentUseReferenceQual = current.use_reference_qualifier; \\n\\tif (((currentUseReferenceQual == 'simple'|| currentUseReferenceQual == 'advanced' ) || currentUseReferenceQual == 'dynamic' ) && !current.dynamic_ref_qual.nil()){\\n\\t\\t\\tcurrent.use_reference_qualifier = 'dynamic';\\n\\t\\t\\tcurrent.reference_qual = \\\"javascript:\\\" + current.dynamic_ref_qual.script;\\n\\t} else {\\n\\t\\tcurrent.use_reference_qualifier = 'simple';\\n\\t\\tcurrent.reference_qual = \\\"\\\";\\n\\t\\t}\\n}\\n\\nfunction cleanSimple() {\\n\\tvar curUseRef = current.use_reference_qualifier;\\n\\tif (curUseRef == 'dynamic') \\n\\t\\tcurrent.reference_qual_condition = \\\"\\\";\\n\\telse if (curUseRef == 'advanced') \\n\\t\\tcurrent.reference_qual_condition = \\\"\\\";\\n}\\n\\nfunction cleanDynamic() {\\n\\tvar curUseRef = current.use_reference_qualifier;\\n\\tif (curUseRef == 'simple') \\n\\t\\tcurrent.dynamic_ref_qual = \\\"\\\";\\n\\telse if (curUseRef == 'advanced') \\n\\t\\tcurrent.dynamic_ref_qual = \\\"\\\";\\n}\\n\\t\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.dynamic_ref_qual.changes()\",\n\t\"name\": \"Edit Dynamic Value from List View\"\n}```"}
{"prompt":"{\"prompt\":\"Set Template from Service\",\"table\":\"sn_hr_core_case\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_case\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tcurrent.template = current.hr_service.template;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.template_invoked && current.hr_service.changes() && !current.hr_service.nil() && !current.hr_service.template.nil()\",\n\t\"name\": \"Set Template from Service\"\n}```"}
{"prompt":"{\"prompt\":\"Update item glidelist\",\"table\":\"sc_cat_item_catalog\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_cat_item_catalog\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.sc_cat_item != '') {\\n\\t GlideappCatalogItem.get(current.sc_cat_item).updateCatalogsList();\\n\\t GlideappCatalogItem.get(current.sc_cat_item).checkCategories();\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"sc_cat_item.state!=draft^EQ\",\n\t\"condition\": \"!current.isActionAborted() && new global.GlobalServiceCatalogUtil().getCatalogWizardOrigin() != 'aes'\",\n\t\"name\": \"Update item glidelist\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Creation of Field Alias\",\"table\":\"sys_report_field_alias\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_report_field_alias\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar reportGR = new GlideRecord('sys_report');\\n\\tif (! reportGR.isValid()) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('There is something wrong with the report table'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\treportGR.setWorkflow(false);\\n\\tif (! reportGR.get(current.report)) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('This report does not exist'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\tif (! reportGR.canWrite()) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('You do not have permission to access the report'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"reportISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate Creation of Field Alias\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent admin from snc_read_only\",\"table\":\"sys_user_role_contains\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_user_role_contains\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"\\nfunction onBefore(current, previous) {\\n\\tvar grUserRole = new GlideRecord(\\\"sys_user_role\\\");\\n\\tgrUserRole.addQuery(\\\"name\\\", \\\"admin\\\");\\n\\tgrUserRole.query();\\n\\tgrUserRole.next();\\n\\tvar adminRoleId = grUserRole.getValue(\\\"sys_id\\\");\\n\\t\\t\\n\\tgrUserRole = new GlideRecord(\\\"sys_user_role\\\");\\n\\tgrUserRole.addQuery(\\\"name\\\", \\\"snc_read_only\\\");\\n\\tgrUserRole.query();\\n\\tgrUserRole.next();\\n\\tvar readOnlyRoleId = grUserRole.getValue(\\\"sys_id\\\");\\n\\t\\n\\tif (current.role != adminRoleId && current.role != readOnlyRoleId && \\n\\t\\tcurrent.contains != adminRoleId && current.contains != readOnlyRoleId) {\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\tif ((current.role == adminRoleId && current.contains == readOnlyRoleId) || \\n\\t\\t(current.role == readOnlyRoleId && current.contains == adminRoleId)) {\\n\\t\\t// case (direct): admin[->]snc_read_only OR: snc_read_only[->]admin\\n\\t \\t\\tpostError();\\n\\t} else if (current.role == adminRoleId && roleContains(current.contains, readOnlyRoleId)) {\\n\\t\\t// case (indirect): admin[->]ROLE->snc_read_only\\n\\t \\t\\tpostError();\\n\\t} else if (current.contains == readOnlyRoleId && roleContains(adminRoleId, current.role)) {\\n\\t\\t// case (indirect): admin->ROLE[->]snc_read_only\\n\\t \\t\\tpostError();\\n\\t} else if (current.role == readOnlyRoleId && roleContains(current.contains, adminRoleId)) {\\n\\t\\t// case (indirect): snc_read_only[->]ROLE->admin\\n\\t \\t\\tpostError();\\n\\t} else if (current.contains == adminRoleId && roleContains(readOnlyRoleId, current.role)) {\\n\\t\\t// case (indirect): snc_read_only->ROLE[->]admin\\n\\t \\t\\tpostError();\\n\\t}\\n}\\n\\nfunction roleContains(roleId, containsId) {\\n\\tvar grURC = new GlideRecord(\\\"sys_user_role_contains\\\");\\n\\tgrURC.addQuery(\\\"role\\\", roleId);\\n\\tgrURC.addQuery(\\\"contains\\\", containsId);\\n\\tgrURC.query();\\n\\tif (grURC.hasNext())\\n\\t\\treturn true;\\n\\treturn false;\\n}\\n\\nfunction postError() {\\n\\tcurrent.setAbortAction(true);\\n\\tgs.addErrorMessage(gs.getMessage(\\\"The admin role is not allowed to contain, directly or indirectly, the snc_read_only role!\\\"));\\n}\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent admin from snc_read_only\"\n}```"}
{"prompt":"{\"prompt\":\"Validate template variables\",\"table\":\"sn_hr_core_email_content\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_email_content\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tverifyEmails(String(current.subject),gs.getMessage(\\\"Following variables in subject are not valid:\\\"),false);\\n\\tverifyEmails(String(current.message_html),gs.getMessage(\\\"Following variables are not valid or defined:\\\"),true);\\n\\t\\n\\tfunction verifyEmails(content,message,setBody) {\\n\\t\\tvar hrform = new sn_hr_core.GeneralHRForm();\\n\\t\\tvar body = hrform.validateTemplate(content, current.table, true);\\n\\t\\tif(setBody)\\n\\t\\t\\tcurrent.message_html = body;\\n\\t\\tvar unEvaluatedVariables = hrform.unEvaluatedVariable;\\n\\t\\tif (unEvaluatedVariables && unEvaluatedVariables.length > 0)\\n\\t\\t\\tthrowError(message,unEvaluatedVariables);\\n\\t}\\n\\t\\n\\tfunction throwError(message,unevaluatedVariables) {\\n\\t\\tfor (var i=0; i<unevaluatedVariables.length; i++) {\\n\\t\\t\\tmessage += ' ' + unevaluatedVariables[i];\\n\\t\\t\\tif (i != unevaluatedVariables.length - 1)\\n\\t\\t\\tmessage += ',';\\n\\t\\t}\\n\\t\\tgs.addErrorMessage(message);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate template variables\"\n}```"}
{"prompt":"{\"prompt\":\"Delete cluster update attachment\",\"table\":\"ml_update_set\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ml_update_set\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current != null) {\\n\\t\\tvar gr = new GlideRecord('sys_attachment');\\n\\t\\tgr.addQuery('table_name', 'ml_update_set');\\n\\t\\tgr.addQuery('table_sys_id', current.getUniqueValue());\\n\\t\\tgr.query();\\n\\t\\tif (gr.next()) {\\n\\t\\t\\tgr.deleteRecord();\\n\\t\\t} else {\\n\\t\\t\\tgs.error('Unable to find attachment');\\n\\t\\t}\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete cluster update attachment\"\n}```"}
{"prompt":"{\"prompt\":\"Chat Survey compatibility check\",\"table\":\"asmt_metric_category\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_metric_category\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"1000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar typeId = current.metric_type + '';\\n\\tvar categoryCount = new global.ChatSurveyUtil().getCategoryCount(current.metric_type + '');\\n\\tif (categoryCount >= 1) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('For Chat Survey, all questions must belong to a single category'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"metric_type.chat_survey=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Chat Survey compatibility check\"\n}```"}
{"prompt":"{\"prompt\":\"Instruct User to Run Index\",\"table\":\"ais_datasource\",\"when\":\"before_display\",\"actions\":\"r\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"true\",\n\t\"collection\": \"ais_datasource\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tif (current.type == \\\"external\\\")\\n\\t\\t\\t\\treturn;\\n\\n\\t\\tvar gr = new GlideRecord(\\\"ais_ingest_datasource_stats\\\");\\n\\t\\tgr.addQuery(\\\"datasource\\\", current.source);\\n\\t\\tgr.query();\\n\\t\\tif (!gr.next()) {\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"This Indexed Source has never been fully processed. Click &quot;Index All Tables&quot; to ensure the content is available to be searched\\\"));\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Instruct User to Run Index\"\n}```"}
{"prompt":"{\"prompt\":\"Log on Node Type Change\",\"table\":\"sys_cluster_state\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cluster_state\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\n\\tgs.info(\\\"Node type was changed from \\\" + previous.node_type.name + \\\" to \\\" + \\n\\tcurrent.node_type.name + \\\" by user '\\\" + gs.getUserName() + \\\"'\\\");\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.node_type.changes()\",\n\t\"name\": \"Log on Node Type Change\"\n}```"}
{"prompt":"{\"prompt\":\"CSDM - Synchronize Managed By Group\",\"table\":\"cmdb_class_info\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_class_info\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t// If current changes and the changes are not ex: empty string -> null\\n\\tif (current.managed_by_group.changes() && !(JSUtil.nil(current.managed_by_group) && JSUtil.nil(previous.managed_by_group))) {\\n\\t\\tgs.eventQueue(\\\"csdm.ciclass.modified\\\", current, current.managed_by_group, previous.managed_by_group, \\\"sn_csdm_tso_queue\\\");\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"CSDM - Synchronize Managed By Group\"\n}```"}
{"prompt":"{\"prompt\":\"Populate CI Manufacturer\",\"table\":\"cmdb_ci\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"742\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (!current.model_id.nil())\\n\\t current.manufacturer = current.model_id.manufacturer;\\nelse if (!current.asset.nil() && !current.asset.model.nil())\\n\\t current.manufacturer = current.asset.model.manufacturer;\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.manufacturer.nil() && !current.manufacturer.changes() && (current.model_id.changes() || current.asset.changes()) && (!SNC.CMDBUtil.isExcludedFromBR(current.getTableName()))\",\n\t\"name\": \"Populate CI Manufacturer\"\n}```"}
{"prompt":"{\"prompt\":\"Show message on duplicates RCA records\",\"table\":\"sys_restricted_caller_access\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_restricted_caller_access\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\t// same as CrossScopeAccessRecorder\\n\\t\\tvar gr = new GlideRecord(\\\"sys_restricted_caller_access\\\");\\n\\t\\tgr.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.sys_id);\\n\\t\\tgr.addQuery(\\\"source\\\", current.source);\\n\\t\\tgr.addQuery(\\\"source_scope\\\", current.source_scope);\\n\\t\\tgr.addQuery(\\\"source_type\\\", current.source_type);\\n\\t\\tgr.addQuery(\\\"source_table\\\", current.source_table);\\n\\t\\tgr.addQuery(\\\"target\\\", current.target);\\n\\t\\tgr.addQuery(\\\"target_scope\\\", current.target_scope);\\n\\t\\tgr.addQuery(\\\"target_type\\\", current.target_type);\\n\\t\\tgr.addQuery(\\\"target_table\\\", current.target_table);\\n\\t\\tgr.addQuery(\\\"operation\\\", current.operation);\\n\\t\\tif (SNC.RCAScriptUtils.isRequestedRcaEnabled())\\n\\t\\t\\t\\tgr.addQuery(\\\"sys_scope\\\", current.sys_scope);\\n\\t\\tgr.setLimit(1);\\n\\t\\tgr.query();\\n\\t\\tif (gr.next()) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Duplicate Restricted Caller Access Privilege exists with the same fields. <a target='_blank' href='{0}'>Click here to view</a>\\\", gr.getLink(true)));\\n\\t\\t}\\n\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Show message on duplicates RCA records\"\n}```"}
{"prompt":"{\"prompt\":\"Ensure Header Background Color is Valid\",\"table\":\"sys_app_template_detail\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_app_template_detail\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tfunction isColorValid(color) {\\n\\t\\t\\n\\t\\t// No color provided is a valid state, otherwise verify it conforms to #RGB or #RRGGBB.\\n\\t\\t\\n\\t\\tif (gs.nil(color))\\n\\t\\t\\treturn true;\\n\\t\\t\\n\\t\\tvar pattern = /^#(?:[0-9a-fA-F]{3}){1,2}$/;\\n\\t\\treturn color.match(pattern);\\n\\t\\n\\t}\\n\\t\\n\\tvar color = current.header_background_color;\\n\\n\\tif (!isColorValid(color)) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('Header Background Color must be a valid hexadecimal format: (#RGB or #RRGGBB)'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t} \\t\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Ensure Header Background Color is Valid\"\n}```"}
{"prompt":"{\"prompt\":\"Rule validation on Identifier form\",\"table\":\"cmdb_identifier\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_identifier\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"999\",\n\t\"add_message\": \"false\",\n\t\"script\": \"new IdentificationRuleValidator().validate(current);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"gs.isInteractive() && !current.isNewRecord()\",\n\t\"name\": \"Rule validation on Identifier form\"\n}```"}
{"prompt":"{\"prompt\":\"Attachment index on state change\",\"table\":\"sys_attachment\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_attachment\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var att = new Attachment();\\natt.setRecord(current);\\nif (att.isIndexed()) {\\n\\t var key = current.table_name + '-' + current.table_sys_id + '-' + current.sys_id;\\n\\t gs.eventQueue(\\\"text_index.attachment\\\", null, current.operation(), key, \\\"text_index\\\");\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"stateCHANGESFROMnot_available^ORstateCHANGESTOnot_available^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Attachment index on state change\"\n}```"}
{"prompt":"{\"prompt\":\"Refresh Navigator after Label deletion\",\"table\":\"label\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"label\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/**\\n Service-now.com\\n\\n Description:\\tRefresh the navigator after a label is deleted.\\n**/\\n(function() {\\n\\tif (!gs.isInteractive())\\n\\t\\treturn;\\n\\n\\tvar displayName = GlideTableDescriptor.get(current.getTableName()).getLabel();\\n\\tvar message = gs.getMessage(\\\"{0} {1} deleted\\\", [displayName, GlideStringUtil.escapeHTML(current.name)]);\\n\\t// the legacy UI refreshes the nav because the tags appear there\\n\\tif (GlideMobileExtensions.getDeviceType() != 'doctype') {\\n\\t\\tvar notification = new UINotification('system_event');\\n\\t\\tnotification.setAttribute('event', 'refresh_nav');\\n\\t\\tnotification.send();\\n\\t}\\n\\n\\tgs.addInfoMessage(message);\\n})();\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Refresh Navigator after Label deletion\"\n}```"}
{"prompt":"{\"prompt\":\"Update type for M I/O script operation\",\"table\":\"sys_rte_eb_multiple_input_output_script_operation\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_rte_eb_multiple_input_output_script_operation\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update type for M I/O script operation\"\n}```"}
{"prompt":"{\"prompt\":\"Enforce CI Rules\",\"table\":\"cmdb_model_category\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_model_category\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.cmdb_ci_class != '') {\\r\\n\\tgs.addErrorMessage(gs.getMessage('CI Class should be empty if Asset Class equals \\\"Consumable\\\" or \\\"Software License\\\"'));\\r\\n\\tcurrent.setAbortAction(true);\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.asset_class=='alm_consumable' || current.asset_class == 'alm_license'\",\n\t\"name\": \"Enforce CI Rules\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent OOB action step delete\",\"table\":\"sys_hub_step_instance\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_hub_step_instance\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"action.system_level=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent OOB action step delete\"\n}```"}
{"prompt":"{\"prompt\":\"Default Fulfillment User\",\"table\":\"sc_cat_item_producer_service\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_cat_item_producer_service\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"50\",\n\t\"add_message\": \"false\",\n\t\"script\": \"populateFulfillmentUser();\\n\\nfunction populateFulfillmentUser() {\\n\\tvar request = new GlideRecord(\\\"catalog_category_request\\\");\\n\\tif (request.get(\\\"category\\\", current.category))\\n\\t\\tcurrent.fulfillment_user = request.manager;\\n\\telse\\n\\t\\tcurrent.fulfillment_user = gs.getUserID();\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.fulfillment_user.nil() && current.group.nil()\",\n\t\"name\": \"Default Fulfillment User\"\n}```"}
{"prompt":"{\"prompt\":\"Limit Recomputation Job Count\",\"table\":\"sys_properties\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar utils = new ServiceMappingRecomputationUtils();\\n\\tvar isFast = (current.name == 'glide.service_mapping.fast_recomputation.job_count');\\n\\tvar otherJobCount = 0;\\n\\tif (isFast) \\n\\t\\totherJobCount = parseInt(gs.getProperty('glide.service_mapping.recomputation.job_count', utils.defaultJobCount()));\\n\\telse \\n\\t\\totherJobCount = parseInt(gs.getProperty('glide.service_mapping.fast_recomputation.job_count', utils.defaultJobCount()));\\n\\t\\n\\tvar workers = parseInt(gs.getProperty('glide.sys.schedulers', 8));\\t\\n\\tvar currentJobCount = parseInt(current.value);\\n\\tvar allRecompJobCount = currentJobCount + otherJobCount;\\n\\tif (allRecompJobCount > workers) {\\n\\t\\tvar msg = gs.getMessage('Recomputation job count (regular+fast): {0}, cannot be greater than the number of worker threads: {1}', [allRecompJobCount, workers]);\\n\\t\\tgs.addErrorMessage(msg);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\t\\n\\tif (currentJobCount < 0) {\\n\\t\\tvar msg1 = gs.getMessage('Recomputation job count ({0}) cannot be lower than 0', [currentJobCount]);\\n\\t\\tgs.addErrorMessage(msg1);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=glide.service_mapping.recomputation.job_count^ORname=glide.service_mapping.fast_recomputation.job_count^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Limit Recomputation Job Count\"\n}```"}
{"prompt":"{\"prompt\":\"Set table read only\",\"table\":\"sys_sg_filter_condition_type\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_filter_condition_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tgs.addInfoMessage(gs.getMessage(\\\"Table is in read mode\\\"));\\n\\tcurrent.setAbortAction(true);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set table read only\"\n}```"}
{"prompt":"{\"prompt\":\"Delete active breakdown data on inactive\",\"table\":\"sla_breakdown_definition\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sla_breakdown_definition\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tnew SLABreakdownDefinition(current).deleteBreakdownDataForActiveSLAs();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"activeCHANGESTOfalse^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete active breakdown data on inactive\"\n}```"}
{"prompt":"{\"prompt\":\"MID: Synchronize name change\",\"table\":\"ecc_agent\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_agent\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function() {\\n\\tvar newName = ''+current.name;\\n\\t\\n\\t// retrieve mid config: 'name'\\n\\tvar configGr = new GlideRecord('ecc_agent_config');\\n\\tconfigGr.addQuery('ecc_agent', ''+current.sys_id);\\n\\tconfigGr.addQuery('param_name', 'name');\\n\\tconfigGr.setLimit(1);\\n\\tconfigGr.query();\\n\\t\\n\\tif (!configGr.next() || configGr.value == newName) // then the config hasn't been sync'd for the first time yet; quit\\n\\t\\treturn;\\n\\t\\n\\t// if the config property is different than the MID's name field, update it\\n\\tconfigGr.value = newName;\\n\\tconfigGr.update(); // this will trigger the business rule that syncs config from instance to mid\\n})();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.name.changes() && !current.name.nil()\",\n\t\"name\": \"MID: Synchronize name change\"\n}```"}
{"prompt":"{\"prompt\":\"VIP scratchpad\",\"table\":\"incident\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"incident\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tg_scratchpad.is_vip = false;\\n\\tif (!current.assigned_to.nil()) {\\n\\t\\tg_scratchpad.is_vip = current.assigned_to.vip; \\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"VIP scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"Limit video type card template elements \",\"table\":\"sys_sg_view_template_slot\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_view_template_slot\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar viewTemplateSlotProvider = new GlideRecord(\\\"sys_sg_view_template_slot\\\");\\n\\tviewTemplateSlotProvider.addQuery(\\\"view_template\\\", current.view_template);\\t\\n\\tviewTemplateSlotProvider.addQuery(\\\"type\\\", \\\"video\\\");\\n\\tif(current.operation() == \\\"update\\\")\\n\\t\\tviewTemplateSlotProvider.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.sys_id);\\n\\t\\t\\n\\tviewTemplateSlotProvider.query();\\n\\tif(viewTemplateSlotProvider.getRowCount() > 0){\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tvar errormsg = gs.getMessage(\\\"Only one card template element of type video can be added to a template.\\\");\\t\\t\\n\\t\\tgs.addErrorMessage(errormsg);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"type=video^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Limit video type card template elements \"\n}```"}
{"prompt":"{\"prompt\":\"Set table name\",\"table\":\"sys_data_source\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_data_source\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var s = current.import_set_table_name.toString();\\r\\n\\r\\ns = s.toLowerCase();\\r\\ns = replaceAll(s, \\\" \\\", \\\"_\\\");\\r\\n\\r\\nvar db = GlideDBObjectManager;\\r\\nif (db.getAbsoluteBase(s) != \\\"sys_import_set_row\\\") {\\r\\n\\tvar td = GlideTableDescriptor;\\r\\n\\tif (td.isValid(s)) {\\r\\n\\t\\tcurrent.import_set_table_name.setError(\\\"Import set table must be an extension of sys_import_set_row\\\");\\r\\n\\t\\tcurrent.setAbortAction(true);\\r\\n\\t}\\r\\n} else {\\r\\n\\tcurrent.import_set_table_name = s;\\r\\n}\\r\\n\\r\\nfunction replaceAll(str, from, to) {\\r\\n\\tvar idx = str.indexOf( from );\\r\\n\\r\\n\\twhile ( idx > -1 ) {\\r\\n\\t str = str.replace( from, to ); \\r\\n\\t idx = str.indexOf( from );\\r\\n\\t}\\r\\n\\t\\r\\n\\treturn str;\\t\\t\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.import_set_table_name.changes()\",\n\t\"name\": \"Set table name\"\n}```"}
{"prompt":"{\"prompt\":\"Create identifier for new Endpoint types\",\"table\":\"sys_db_object\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_db_object\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"9999\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// This business rule is used to create identifier for new leaf Endpoint types\\nvar iden = new GlideRecord('cmdb_identifier');\\niden.addQuery('applies_to', current.name);\\niden.query();\\nvar sysId;\\nvar rule;\\nif (iden.next()) {\\n\\t// clear old rule entries\\n\\tsysId = iden.sys_id;\\n\\trule = new GlideRecord('cmdb_identifier_entry');\\n\\trule.addQuery('identifier', sysId);\\n\\trule.deleteMultiple();\\n} else {\\n\\tiden.initialize();\\n\\tiden.name = current.label + ' Rule';\\n\\tiden.applies_to = current.name;\\n\\tiden.description = 'Identifier created by business rule';\\n\\tsysId = iden.insert();\\n}\\n\\nif (sysId !== null) {\\n\\trule = new GlideRecord('cmdb_identifier_entry');\\n\\trule.initialize();\\n\\trule.identifier = sysId;\\n\\trule.table = current.name;\\n\\trule.attributes = getEndpointAttributes(rule.table).join(',');\\n\\trule.allow_null_attribute = true; // following Endpoint convention\\n\\trule.insert();\\n} else {\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Identifier not created for {0}\\\", current.label));\\n}\\n\\nfunction getEndpointAttributes(table) {\\n\\tvar util = new ArrayUtil();\\n\\tvar hierarchy = util.convertArray(new TableUtils(table).getTables());\\n\\tvar idxEndpoint = util.indexOf(hierarchy, 'cmdb_ci_endpoint');\\n\\t\\n\\tvar attributes = [];\\n\\tvar td = GlideTableDescriptor.get(table);\\n\\tvar activeFields = td.getActiveFieldNames();\\n\\tfor (var i =0; i< activeFields.size(); i++) {\\n\\t\\tvar attr = activeFields.get(i);\\n\\t\\tvar ed = td.getElementDescriptor(attr);\\n\\t\\tif (!ed.isAutoOrSysID() &&\\n\\t\\t\\tutil.indexOf(hierarchy, ed.getTableName()) <= idxEndpoint) {\\n\\t\\t\\tattributes.push(attr);\\n\\t\\t}\\n\\t}\\n\\t\\n\\treturn attributes;\\n}\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"new TableUtils(current.name).getTables().contains('cmdb_ci_endpoint')\",\n\t\"name\": \"Create identifier for new Endpoint types\"\n}```"}
{"prompt":"{\"prompt\":\"Create Request Item Child Tasks\",\"table\":\"sc_req_item\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_req_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar plan = GlideappDeliveryPlan.get(current.delivery_plan);\\n\\t\\tgs.include('CatalogTaskGenerator');\\n\\t\\tvar gr = new GlideRecord(current.getRecordClassName());\\n\\t\\tgr.get(current.getUniqueValue());\\n\\t\\tvar gen = new CatalogTaskGenerator(plan, gr);\\n\\t\\tgen.createTasks();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.delivery_plan.nil()\",\n\t\"name\": \"Create Request Item Child Tasks\"\n}```"}
{"prompt":"{\"prompt\":\"Format last run datetime\",\"table\":\"sys_data_source\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_data_source\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// The last_run_datetime field has the following format \\n// \\\"2007-11-08 10:48:38\\\" by default\\n//\\n// The filter has the following syntax:\\n//\\tSELECT * FROM [tableName] \\n//\\t\\t\\t WHERE [last_run_database_field] >= [last_run_datetime]\\n//\\n\\n// if its not quoted already, quote it\\nif (current.last_run_datetime.indexOf(\\\"'\\\") != 0) {\\n\\tcurrent.last_run_datetime = \\\"'\\\" + current.last_run_datetime + \\\"'\\\";\\n}\\n\\n// the following script truncates the time part, uncomment to use\\n//\\n//var s = current.last_run_datetime.toString();\\n//current.last_run_datetime = s.split(' ')[0] + \\\"'\\\";\\n\\n// the following script converts our datetime stamp into an oracle date format\\n// uncomment to use\\n//\\n//var s = current.last_run_datetime.toString();\\n//current.last_run_datetime = \\\"to_date(\\\" + s.split(' ')[0] + \\\"','yyyy-mm-dd')\\\";\\n\\n// the following script converts our datetime stamp into an SQL server date format\\n// uncomment to use\\n//\\n//var s = current.last_run_datetime.toString();\\n//current.last_run_datetime = \\\"convert(datetime, \\\" + s + \\\", 21)\\\";\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.use_last_run_datetime == true && !current.last_run_datetime.nil()\",\n\t\"name\": \"Format last run datetime\"\n}```"}
{"prompt":"{\"prompt\":\"Validate template variables\",\"table\":\"sn_hr_core_document_template\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_document_template\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar hrform = new sn_hr_core.GeneralHRForm();\\n\\tvar body = hrform.validateTemplate(current.html_script_body, current.table);\\n\\n\\tvar unEvaluatedVariables = hrform.unEvaluatedVariable;\\n\\tvar inaccessibleVariables = hrform.inaccessibleVariable;\\n\\tcurrent.html_script_body = body;\\n\\tif ((unEvaluatedVariables.length > 0) || (inaccessibleVariables.length > 0)) {\\n\\t\\tvar errStr = '';\\n\\t\\tif (unEvaluatedVariables && unEvaluatedVariables.length > 0) {\\n\\t\\t\\terrStr = gs.getMessage(\\\"Following variables are not valid or defined:\\\");\\n\\t\\t\\tfor (var i=0; i<unEvaluatedVariables.length; i++) {\\n\\t\\t\\t\\terrStr += ' ' + unEvaluatedVariables[i];\\n\\t\\t\\t\\tif (i != unEvaluatedVariables.length - 1)\\n\\t\\t\\t\\t\\terrStr += ',';\\n\\t\\t\\t}\\n\\t\\t\\tgs.addErrorMessage(errStr);\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (inaccessibleVariables && inaccessibleVariables.length > 0) {\\n\\t\\t\\terrStr = gs.getMessage(\\\"Following variables are not accessible based on your permissions:\\\");\\n\\t\\t\\tfor (var j=0; j<inaccessibleVariables.length; j++) {\\n\\t\\t\\t\\terrStr += ' ' + inaccessibleVariables[j];\\n\\t\\t\\t\\tif (j != inaccessibleVariables.length - 1)\\n\\t\\t\\t\\t\\terrStr += ',';\\n\\t\\t\\t}\\n\\t\\t\\tgs.addErrorMessage(errStr);\\n\\t\\t}\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn false;\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"html_script_bodyISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate template variables\"\n}```"}
{"prompt":"{\"prompt\":\"Aggregated cant be true if not Automated\",\"table\":\"sa_agg_alert_filter\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sa_agg_alert_filter\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tif (!current.automated) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Aggregated group can be set only if Automated group is set to true\\\"));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"aggregatedCHANGESTOtrue^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Aggregated cant be true if not Automated\"\n}```"}
{"prompt":"{\"prompt\":\"RemoveMetric2CiMapping\",\"table\":\"sa_source_metric_type\",\"when\":\"async\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sa_source_metric_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// on de activation of the metric go over all metric2ci records and remove them\\n\\tif (!current.active) {\\n\\n\\t\\tvar gr = new GlideRecord(\\\"sa_metric_map\\\");\\n\\n\\t\\tgr.addQuery(\\\"metric_type_id.source_metric_type\\\", current.getUniqueValue());\\n\\t\\tgr.query();\\n\\n\\t\\tgs.log(\\\"RemoveMetric2CiMapping for metric type '\\\" + \\n\\t\\t\\t\\t current.source_metric_type + \\\"': \\\" + gr.getRowCount() + \\\" of metric map rows will be removed.\\\");\\n\\t\\tgr.deleteMultiple();\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"RemoveMetric2CiMapping\"\n}```"}
{"prompt":"{\"prompt\":\"Check duplicate subscriptions\",\"table\":\"sys_notif_subscription\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_notif_subscription\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, _previous /*null when async*/) {\\n\\tvar gr = new GlideRecord('sys_notif_subscription');\\n\\tgr.addQuery(\\\"user\\\", current.user);\\n\\tgr.addQuery(\\\"notification\\\", current.notification);\\n\\tgr.addQuery(\\\"affected_table\\\", current.affected_table)\\n\\tgr.addQuery(\\\"affected_record\\\", current.affected_record);\\n\\tgr.query();\\n\\tif (gr.next()) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\n\\t\\tif (current.affected_record) {\\n\\t\\t\\tgs.addInfoMessage(gs.getMessage(\\\"You have already subscribed to this notification for the affected record\\\"));\\n\\t\\t} else {\\n\\t\\t\\tgs.addInfoMessage(gs.getMessage(\\\"You have already subscribed to this notification\\\"));\\n\\t\\t}\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Check duplicate subscriptions\"\n}```"}
{"prompt":"{\"prompt\":\"CSDM Data Sync on DCG delete\",\"table\":\"cmdb_ci_query_based_service\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci_query_based_service\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tgs.log(\\\"Begin CSDM Data Sync on dynamic ci group delete.\\\", \\\"CSDMCMDBUtil\\\");\\n\\t// query all CIs associated to the dcg being deleted for revert\\n\\tvar svcCiAssoc = new GlideRecord(\\\"svc_ci_assoc\\\");\\n\\tsvcCiAssoc.addQuery(\\\"service_id\\\", current.sys_id);\\n\\tsvcCiAssoc.query();\\n\\tvar ciSysIdArray = [];\\n\\twhile (svcCiAssoc.next()) {\\n\\t\\tciSysIdArray.push(svcCiAssoc.getValue(\\\"ci_id\\\"));\\n\\t}\\n\\tvar job = new GlideRunScriptJob();\\n\\t// convert ci array to strings for scheduled job argument\\n\\tjob.scheduleScript(\\\"new CSDMCMDBUtil().updateCiOnAssocDelete(\\\" + JSON.stringify(ciSysIdArray.join()) + \\\")\\\");\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"service_classification=Technical Service^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"CSDM Data Sync on DCG delete\"\n}```"}
{"prompt":"{\"prompt\":\"Delete AI Search Assist RP Variable\",\"table\":\"aisa_rp_config\",\"when\":\"after\",\"actions\":\"ud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"aisa_rp_config\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar utils = new global.AISARecordProducerUtils();\\n\\t\\n\\tfunction deleteFunc(gr) {\\n\\t\\tif (utils.removeFromRecordProducer(gr))\\n\\t\\t\\tgs.addInfoMessage(gs.getMessage(\\\"The AI Search Assist variable has been removed from the '{0}' Record Producer\\\", current.sc_cat_item.name));\\n\\t}\\n\\t\\n\\tif (current.operation() == \\\"delete\\\") {\\n\\t\\tdeleteFunc(current);\\n\\t} else if (current.operation() == \\\"update\\\" && current.sc_cat_item.changes()) {\\n\\t\\tdeleteFunc(previous);\\n\\t\\tutils.addToRecordProducer(current);\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete AI Search Assist RP Variable\"\n}```"}
{"prompt":"{\"prompt\":\"Autofill Comments for Parameterized Test\",\"table\":\"sys_dictionary\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_dictionary\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"400\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.name == \\\"sys_atf_parameter_set\\\")\\n\\t\\tcurrent.comments = \\\"Shared Parameter\\\";\\n\\tif(current.name.indexOf(\\\"var__m_sys_atf_parameter_variable_\\\") == 0)\\n\\t\\tcurrent.comments = \\\"Exclusive Parameter\\\";\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"sys_class_name=sys_atf_parameter_variable^ORname=sys_atf_parameter_set^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Autofill Comments for Parameterized Test\"\n}```"}
{"prompt":"{\"prompt\":\"Disallow >1 page registries per UX App\",\"table\":\"sys_ux_page_registry\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ux_page_registry\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tfunction getAppConfigsInUse(currSysId) {\\n\\t\\tvar gr = new GlideRecord('sys_ux_page_registry');\\n\\t\\tgr.addQuery('admin_panel_table', 'sys_ux_app_config');\\n\\t\\tgr.addQuery('sys_id!='+currSysId);\\n\\t\\tgr.query();\\n\\t\\tvar appConfigsAlreadyInUse = [];\\n\\t\\twhile (gr.next()) {\\n\\t\\t\\tvar adminPanel = gr.getValue('admin_panel');\\n\\t\\t\\tvar adminPanelSysIdString = adminPanel != null ? adminPanel.toString() : '';\\n\\t\\t\\tif (adminPanelSysIdString.length > 0)\\n\\t\\t\\t\\tappConfigsAlreadyInUse.push(adminPanelSysIdString);\\n\\n\\t\\t}\\n\\t\\treturn appConfigsAlreadyInUse;\\n\\t}\\n\\tvar adminPanel = current.admin_panel.toString();\\n\\tif (adminPanel.length > 0) {\\n\\t\\tvar appConfigsInUse = getAppConfigsInUse(current.sys_id);\\n\\t\\tif (appConfigsInUse.indexOf(adminPanel) > -1) {\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage('A record with the same UX App Configuration already exists. Please create a new UX App Configuration.'));\\n\\t\\t\\tcurrent.setAbortAction(true);\\t\\t\\t\\n\\t\\t}\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"admin_panel_table=sys_ux_app_config^EQ\",\n\t\"condition\": \"!current.admin_panel.nil()\",\n\t\"name\": \"Disallow >1 page registries per UX App\"\n}```"}
{"prompt":"{\"prompt\":\"Update the operation type for concat\",\"table\":\"sys_rte_eb_concat_operation\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_rte_eb_concat_operation\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tcurrent.type = \\\"4e38102a73b333002b6265a751ab9e1f\\\";\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update the operation type for concat\"\n}```"}
{"prompt":"{\"prompt\":\"Get VNCC Property\",\"table\":\"sys_cluster_state\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cluster_state\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tg_scratchpad.vncc_property = gs.getProperty('com.snc.cluster.vncc.enabled', 'false');\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Get VNCC Property\"\n}```"}
{"prompt":"{\"prompt\":\"Create External Dependencies\",\"table\":\"sc_request\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tgs.include('ExternalDependencyGenerator');\\n\\t\\tvar gen = new ExternalDependencyGenerator(current);\\n\\t\\tgen.generate();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Create External Dependencies\"\n}```"}
{"prompt":"{\"prompt\":\"Items Added After Request Approved\",\"table\":\"sc_req_item\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_req_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/**\\n * If items are added after the request is set to 'approved' ensure the stage and approval fields are set correctly\\n * and that the workflow will be attached through invoking the 'Start Tasks' business rule.\\n * Designed to work with the 'Add New Item' UI Action on sc_request.\\n * Not designed to work if a new item is added manually. such as enabling the new button on the 'Requested Items' related list.\\n */\\n\\nsetApprovalFields();\\n\\nfunction setApprovalFields() {\\n\\t // We handle this differently for delivery plans vs. workflows\\n\\t if (current.cat_item.workflow && !current.cat_item.workflow.nil()) {\\n\\t\\t\\tcurrent.approval = \\\"requested\\\";\\n\\t\\t\\tcurrent.stage = \\\"request_approved\\\";\\n\\t } else {\\n\\t\\t\\tcurrent.approval = current.request.approval;\\t \\n\\t\\t\\tcurrent.stage = getNextStage(current);\\n\\t }\\n}\\n\\nfunction getNextStage(reqItem) {\\n\\t // return the first delivery task\\n\\t var nextStage = \\\"nothing\\\";\\n\\t var planID = GlideappDeliveryPlan.resolvePlanID(reqItem);\\n\\t var gr = new GlideRecord(\\\"sc_cat_item_delivery_task\\\");\\n\\t gr.addQuery(\\\"delivery_plan\\\", planID);\\n\\t gr.orderBy(\\\"order\\\");\\n\\t gr.query();\\n\\t if(gr.next())\\n\\t\\t\\tnextStage = gr.name.getDisplayValue();\\n\\t \\n\\t return nextStage;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.request.nil() && current.request.approval == \\\"approved\\\" && current.stage == \\\"waiting_for_approval\\\"\",\n\t\"name\": \"Items Added After Request Approved\"\n}```"}
{"prompt":"{\"prompt\":\"Validate OAuth entity profile\",\"table\":\"oauth_entity_profile\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"oauth_entity_profile\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var builder =\\tnew SNC.OAuthEntityBuilder(current);\\nbuilder.validateEntityProfile();\\n\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate OAuth entity profile\"\n}```"}
{"prompt":"{\"prompt\":\"Populate rating field id\",\"table\":\"sys_sg_button_instance\",\"when\":\"async\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_button_instance\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar uiParamGR = new GlideRecord('sys_sg_ui_parameter');\\n\\n\\t// if virtual field value is true, ui parameter is receiving value from virtual field\\n\\tuiParamGR.addEncodedQuery('button='+current.button+'^input_source=user^virtual_field_value=true');\\n\\tuiParamGR.query();\\n\\t\\n\\tif (uiParamGR.next()) {\\n\\t\\tvar fieldGR = new GlideRecord('sys_sg_screen_field');\\n\\t\\tfieldGR.addQuery('type', current.button.type);\\n\\t\\tfieldGR.addQuery('screen', current.parent);\\n\\t\\tfieldGR.query();\\n\\t\\t\\n\\t\\tif (fieldGR.next()) {\\n\\t\\t\\tfieldGR.setValue('field_name', uiParamGR.getUniqueValue());\\n\\t\\t\\tfieldGR.update();\\n\\t\\t}\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"button.type=spannable_rating^ORbutton.type=select_one_rating^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Populate rating field id\"\n}```"}
{"prompt":"{\"prompt\":\"Send Notification\",\"table\":\"live_notification\",\"when\":\"async\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"live_notification\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar profile = current.profile;\\n\\tif(!profile) {\\n \\t\\t\\tprofile = new GlideappLiveProfile().getIDFromProfileOrUser(current.user);\\n\\t\\t\\tif (!profile)\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\tcurrent.setValue(\\\"profile\\\", profile);\\n\\t\\tcurrent.update();\\n\\t}\\n\\t\\n\\tvar liveGroupProfileGR = new GlideRecord(\\\"live_group_profile\\\");\\n\\tliveGroupProfileGR.setWorkflow(false);\\n\\tliveGroupProfileGR.addQuery(\\\"document\\\", current.document);\\n\\tliveGroupProfileGR.addQuery(\\\"table\\\", current.table);\\n\\tliveGroupProfileGR.addQuery(\\\"type\\\", \\\"!=\\\", \\\"support\\\");\\n\\tliveGroupProfileGR.query();\\n\\n\\tif(liveGroupProfileGR.next()) {\\n\\t\\tvar liveGroupMemberGR = new GlideRecord(\\\"live_group_member\\\");\\n\\t\\tliveGroupMemberGR.setWorkflow(false);\\n\\t\\tliveGroupMemberGR.addQuery(\\\"group\\\", liveGroupProfileGR.getUniqueValue());\\n\\t\\tliveGroupMemberGR.addQuery(\\\"member\\\", profile);\\n\\t\\tliveGroupMemberGR.addQuery(\\\"state\\\", \\\"!=\\\", \\\"inactive\\\");\\n\\t\\tliveGroupMemberGR.query();\\n\\n\\t\\tif(liveGroupMemberGR.next()) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t}\\n\\n\\tnew GlideNotificationBroadcaster().broadcast({\\n\\t\\ttitle: current.title,\\n\\t\\tmessage: current.message,\\n\\t\\ttable: current.table,\\n\\t\\tdocument: current.document\\n\\t}, profile);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Send Notification\"\n}```"}
{"prompt":"{\"prompt\":\"Cat Item Scratchpad\",\"table\":\"sc_cat_item\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_cat_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"g_scratchpad.use_user_criteria = (gs.getProperty('glide.sc.use_user_criteria', 'false') == 'true') + '';\\ng_scratchpad.user_criteria_migration = (gs.getProperty('glide.sc.user_criteria_migration', 'false') == 'true') + '';\\ng_scratchpad.use_cart_layouts = (gs.getProperty('glide.sc.use_cart_layouts', 'false') == 'true') + '';\\ng_scratchpad.item_use_cart_layouts = (current.use_sc_layout + '' == 'true') + '';\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Cat Item Scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Target dates\",\"table\":\"sn_gf_goal_target\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_gf_goal_target\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar errorMsg = (new sn_gf.GFTarget(current.getUniqueValue(), current)).validateDates();\\n\\t\\tif (errorMsg) {\\n\\t\\t\\t\\tgs.addErrorMessage(errorMsg);\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"start_dateVALCHANGES^ORend_dateVALCHANGES^ORgoalVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate Target dates\"\n}```"}
{"prompt":"{\"prompt\":\"Set variable_table for tasks\",\"table\":\"sys_cb_goal\",\"when\":\"before_display\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cb_goal\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tcurrent.setValue(\\\"variable_table\\\", \\\"var__m_topic_variable_\\\" + current.topic);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"sys_idISEMPTY^ORsys_idISNOTEMPTY^NQvariable_tableISEMPTY^EQ\",\n\t\"condition\": \"true\",\n\t\"name\": \"Set variable_table for tasks\"\n}```"}
{"prompt":"{\"prompt\":\"Update Predictor Result on Case Complete\",\"table\":\"sn_hr_core_case\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_case\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tvar updatePredictionForTransferredFromCase = !gs.nil(current.getValue('transferred_from'));\\n\\t\\tvar predictions = getPredictionGR(current.sys_id, false);\\n\\n\\t\\t//update predictions for current case\\n\\t\\twhile (predictions.next()) {\\n\\t\\t\\t\\tvar predictionField = predictions.getValue('predicted_output_value_name');\\n\\t\\t\\t\\tvar actualFieldValue = current.getDisplayValue(predictionField);\\n\\t\\t\\t\\tvar predictedValue = getPredictedValue(predictions);\\n\\n\\t\\t\\t\\tif (actualFieldValue == predictedValue) {\\n\\t\\t\\t\\t\\t\\tpredictions.setValue('predicted_correctly', true);\\n\\t\\t\\t\\t\\t\\tpredictions.update();\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t//update HR service predictions for transferred-from case\\n\\t\\tif (updatePredictionForTransferredFromCase) {\\n\\t\\t\\t\\tvar hrServicePredictions = getPredictionGR(current.getValue('transferred_from'), true);\\n\\n\\t\\t\\t\\twhile (hrServicePredictions.next()) {\\n\\t\\t\\t\\t\\t\\tvar actualHRService = current.getDisplayValue('hr_service');\\n\\t\\t\\t\\t\\t\\tvar predictedHRService = getPredictedValue(hrServicePredictions);\\n\\n\\t\\t\\t\\t\\t\\tif (actualHRService == predictedHRService) {\\n\\t\\t\\t\\t\\t\\t\\t\\thrServicePredictions.setValue('predicted_correctly', true);\\n\\t\\t\\t\\t\\t\\t\\t\\thrServicePredictions.setValue(\\\"final_value_date\\\", new GlideDateTime());\\n\\t\\t\\t\\t\\t\\t\\t\\thrServicePredictions.setValue(\\\"final_output_value\\\", actualHRService);\\n\\n\\t\\t\\t\\t\\t\\t\\t\\thrServicePredictions.update();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfunction getPredictionGR(sourceCaseID, forHRService) {\\n\\t\\t\\t\\tvar gr = new GlideRecord('ml_predictor_results');\\n\\t\\t\\t\\tgr.addQuery('source_sys_id', sourceCaseID);\\n\\t\\t\\t\\tgr.addQuery('predicted_correctly', false);\\n\\t\\t\\t\\tif (forHRService)\\n\\t\\t\\t\\t\\t\\tgr.addQuery('predicted_output_value_name', 'hr_service');\\n\\n\\t\\t\\t\\tgr.query();\\n\\t\\t\\t\\treturn gr;\\n\\t\\t}\\n\\n\\t\\tfunction getPredictedValue(predictionRecord) {\\n\\t\\t\\t\\tvar allPredictedValues = predictionRecord.getValue('predicted_output_value');\\n\\t\\t\\t\\tvar predictedValues = allPredictedValues.split(\\\", \\\");\\n\\n\\t\\t\\t\\treturn predictedValues[0];\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"stateCHANGESTO3^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Update Predictor Result on Case Complete\"\n}```"}
{"prompt":"{\"prompt\":\"Update live_profile with sys_user\",\"table\":\"sys_user\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_user\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.name != previous.name) {\\n\\t\\tvar sysUser = new GlideRecord(\\\"sys_user\\\");\\n\\t\\tsysUser.addQuery(\\\"sys_id\\\", current.sys_id);\\n\\t\\tsysUser.query();\\n\\t\\t\\n\\t\\tvar liveProfile = new GlideRecord(\\\"live_profile\\\");\\n\\t\\tliveProfile.addQuery(\\\"document\\\", current.sys_id);\\n\\t\\tliveProfile.query();\\n\\t\\t\\n\\t\\tif(sysUser.next() && liveProfile.next()) {\\n\\t\\t\\tliveProfile.name = sysUser.name;\\n\\t\\t\\tliveProfile.update();\\t\\n\\t\\t}\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"nameVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Update live_profile with sys_user\"\n}```"}
{"prompt":"{\"prompt\":\"Get Statistics Options for Exclusion\",\"table\":\"global\",\"when\":\"before\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function getStatsOptions() {\\n\\tanswer.add('Number', gs.getMessage('Number of scores'));\\n\\tanswer.add('Sum', gs.getMessage('Sum'));\\n\\tanswer.add('Change', gs.getMessage('Change'));\\n\\tanswer.add('Change%', gs.getMessage('Change %'));\\n\\tanswer.add('Average', gs.getMessage('Average'));\\n\\tanswer.add('Minimum', gs.getMessage('Minimum'));\\n\\tanswer.add('Maximum', gs.getMessage('Maximum'));\\n\\tanswer.add('Median', gs.getMessage('Median'));\\n\\tanswer.add('STDEV', gs.getMessage('Standard deviation'));\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Get Statistics Options for Exclusion\"\n}```"}
{"prompt":"{\"prompt\":\"Base Upgrade Reason message\",\"table\":\"sys_upgrade_history_log\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_upgrade_history_log\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar reason = \\\"\\\";\\n\\tswitch(String(current.disposition)) {\\n\\t\\tcase \\\"201\\\": \\n\\t\\t\\treason = \\\"inserted\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"202\\\":\\n\\t\\t\\treason = \\\"updated\\\";\\n\\t\\t\\tbreak;\\n\\t\\tcase \\\"203\\\":\\n\\t\\t\\treason = \\\"deleted\\\";\\n\\t\\t\\tbreak;\\n\\t}\\n\\t\\n\\tvar gr = new GlideRecord(\\\"sys_copied_base_upgrade_log_mapping\\\");\\n\\tgr.addQuery(\\\"copied_record_upgrade_log\\\", current.sys_id);\\n\\tgr.query();\\n\\tif (!gr.next())\\n\\t\\treturn;\\n\\n\\tvar baselog = new GlideRecord(\\\"sys_upgrade_history_log\\\");\\n\\tif (!baselog.get(gr.getValue(\\\"base_record_upgrade_log\\\")))\\n\\t\\treturn;\\n\\t\\n\\tvar link_text = baselog.getValue(\\\"file_name\\\");\\n\\tvar link = current.getTableName()+\\\".do?sys_id=\\\"+gr.getValue(\\\"base_record_upgrade_log\\\");\\n\\t\\n\\tgs.addInfoMessage(gs.getMessage(\\\"We added this upgrade history log because base record <a {0}> {1} </a> was {2}\\\",[\\\"href=\\\"+link, link_text, reason]));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Base Upgrade Reason message\"\n}```"}
{"prompt":"{\"prompt\":\"Set process definition updated\",\"table\":\"sys_pd_activity\",\"when\":\"async_always\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_pd_activity\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async_always\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar definition = new GlideRecord(\\\"sys_pd_process_definition\\\");\\n\\tdefinition.addQuery(\\\"sys_id\\\", current.process_definition);\\n\\tdefinition.query();\\n\\twhile (definition.next()) {\\n\\t\\tdefinition.autoSysFields(false);\\n\\t\\tvar updated = current.operation() === \\\"delete\\\" ? gs.nowDateTime() : current.sys_updated_on;\\n\\t\\tdefinition.sys_updated_on = updated;\\n\\t\\tdefinition.update();\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set process definition updated\"\n}```"}
{"prompt":"{\"prompt\":\"Mark JRobin Shard Fragmented\",\"table\":\"sys_pattern\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_pattern\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tgs.print(\\\"Pattern is removed.\\tFragmented JRobin Shard: \\\" + current.shard + \\\" Position is now available: \\\" + current.position);\\n\\tSNC.JRobinSharder.markFragmented(current.sys_class_name + \\\"_count\\\", current.shard, current.position);\\n \\tSNC.JRobinSharder.markFragmented(current.sys_class_name + \\\"_execution_time\\\", current.shard, current.position);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Mark JRobin Shard Fragmented\"\n}```"}
{"prompt":"{\"prompt\":\"Resource default message\",\"table\":\"cxs_context_config\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cxs_context_config\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar cxsDSU = new cxs_DefSearcherUtils(current);\\n\\tvar aDefResGr = cxsDSU.getDefaultAdditionalResources();\\n\\tvar sResGr = cxsDSU.getSearcherResources();\\n\\t\\n\\t// Quick check of more than one searcher resource\\n\\tvar multiSR = sResGr.next() && sResGr.next();\\n\\tvar searcherDefault = (!current.cxs_searcher_config.nil() && !aDefResGr.next()) || current.isNewRecord();\\n\\t\\n\\tg_scratchpad.cxs = {\\n\\t\\t\\\"searcher_default\\\": searcherDefault,\\n\\t\\t\\\"show_searcher_resource\\\": searcherDefault && multiSR\\n\\t};\\n\\t\\n\\t// We don't want to add a message for new records.\\n\\tif (current.isNewRecord())\\n\\t\\treturn;\\n\\t\\n\\tvar messageParams = null;\\n\\tif (searcherDefault) {\\n\\t\\tif (current.default_searcher_resource.nil() || current.getValue(\\\"default_searcher_resource\\\") === \\\"all\\\") {\\n\\t\\t\\tmessageParams = multiSR ? [gs.getMessage(\\\"All\\\")] : [sResGr.getDisplayValue(\\\"label\\\")];\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tvar searcherResource = new GlideRecord(\\\"cxs_search_res_config\\\");\\n\\t\\t\\tif (searcherResource.get(current.getValue(\\\"default_searcher_resource\\\")))\\n\\t\\t\\t\\tmessageParams = [searcherResource.getDisplayValue(\\\"label\\\")];\\n\\t\\t}\\n\\n\\t\\tif (messageParams !== null)\\n\\t\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Default search source is the Searcher Resource '{0}'\\\", messageParams));\\n\\t}\\n\\telse if (!current.cxs_searcher_config.nil())\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Default search source is the Additional Resource '{0}'\\\",[aDefResGr.getDisplayValue()]));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Resource default message\"\n}```"}
{"prompt":"{\"prompt\":\"Ensure Valid Schedule\",\"table\":\"sys_trigger\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_trigger\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"110\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t if (current.isActionAborted())\\n\\t\\t\\treturn;\\n\\n\\t if (!current.next_action.nil())\\n\\t\\t\\treturn;\\n\\t\\n\\t var m = GlideARecurrence.get(current);\\n\\t\\n\\t if (m == null) {\\n\\t\\t\\tcurrent.next_action = nowDateTime();\\n\\t\\t\\treturn;\\n\\t }\\n\\t \\n\\t current.setValue('next_action', m.next());\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Ensure Valid Schedule\"\n}```"}
{"prompt":"{\"prompt\":\"Remove auto create Business Rules\",\"table\":\"asmt_metric_type\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_metric_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var gr = new GlideRecord(\\\"sys_script\\\");\\nif (current.business_rule) {\\n\\tgr.get(current.business_rule);\\n\\tgr.deleteRecord();\\n}\\n\\ngr = new GlideRecord(\\\"sys_script\\\");\\nif (current.delete_business_rule) {\\n\\tgr.get(current.delete_business_rule);\\n\\tgr.deleteRecord();\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Remove auto create Business Rules\"\n}```"}
{"prompt":"{\"prompt\":\"Restrict edit if the item is checked out\",\"table\":\"catalog_dl_definition\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"catalog_dl_definition\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Restrict edit if the item is checked out\"\n}```"}
{"prompt":"{\"prompt\":\"Table Rotation - Remove Extensions\",\"table\":\"sys_table_rotation\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_table_rotation\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var model = current.name.toString();\\nif (model == 'sys_replication_queue')\\n\\tcurrent.setAbortAction(true);\\nelse\\n\\tdeleteShards();\\n\\nfunction deleteShards() {\\n\\tvar table = (current.type === 'shard') ? 'sys_table_shard' : 'sys_table_rotation_schedule';\\n\\t\\n\\tvar shardEntry = new GlideRecord(table);\\n\\tshardEntry.addQuery('name', current.sys_id);\\n\\tshardEntry.query();\\n\\twhile (shardEntry.next()) {\\n\\t\\tif (gs.nil(shardEntry.table_name))\\n\\t\\t\\tcontinue;\\n\\n\\t\\tif (shardEntry.table_name != current.name)\\n\\t\\t\\tgs.eventQueue(\\\"table_rotation.delete_extension\\\", null, shardEntry.table_name, '');\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Table Rotation - Remove Extensions\"\n}```"}
{"prompt":"{\"prompt\":\"Process changes to tables\",\"table\":\"sla_breakdown_definition\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sla_breakdown_definition\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar slaBreakdownDefinition = new SLABreakdownDefinition(current);\\n\\n\\tif (current.sla_breakdown_table.changes())\\n\\t\\tslaBreakdownDefinition.removeRelatedFields();\\n\\n\\tif (current.task_table.changes()) {\\n\\t\\tslaBreakdownDefinition.validateRelatedFields();\\n\\t\\tslaBreakdownDefinition.removeRelatedSlaDefinitions();\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"task_tableVALCHANGES^ORsla_breakdown_tableVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Process changes to tables\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent duplicate names in same scope\",\"table\":\"scan_check_suite\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"scan_check_suite\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar gr = new GlideRecord('scan_check_suite');\\n\\tgr.addQuery('sys_id', '!=', current.getUniqueValue());\\n\\tgr.addQuery('sys_scope', current.getValue('sys_scope'));\\n\\tgr.addQuery('name', current.getValue('name'));\\n\\tgr.query();\\n\\tif (gr.next()) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"A suite with that name already exists in this scope\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.element.nil() \",\n\t\"name\": \"Prevent duplicate names in same scope\"\n}```"}
{"prompt":"{\"prompt\":\"Add Handled vCenter Events\",\"table\":\"ecc_agent_ext_context_vcenter\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_agent_ext_context_vcenter\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar evGr;\\n\\tvar m2mGr;\\n\\tvar i;\\n\\tvar qc;\\n\\t\\n\\t// Find all the events we have OOB handlers for.\\n\\tevGr = new GlideRecord('vcenter_event');\\n\\tevGr.addQuery('event_id', 'IN', Object.keys(VCenterVmStateUpdater.handlers));\\n\\tevGr.query();\\n\\t\\n\\t// For each event name found, add to vctr_evt_vctr_ext_cx_m2m for this vCenter context.\\n\\twhile (evGr.next()) {\\n\\t\\tm2mGr = new GlideRecord(\\\"vctr_evt_vctr_ext_cx_m2m\\\");\\n\\t\\tm2mGr.initialize();\\n\\t\\tm2mGr.context = current.getUniqueValue();\\n\\t\\tm2mGr.event = evGr.getUniqueValue();\\n\\t\\tm2mGr.insert();\\n\\t}\\n\\tgs.addInfoMessage(gs.getMessage('vCenter Event Collector Context \\\"{0}\\\" has been pre-populated with events handled by default in the base system', current.name));\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Add Handled vCenter Events\"\n}```"}
{"prompt":"{\"prompt\":\"Auto set button type\",\"table\":\"sys_sg_button_chat_launcher\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_button_chat_launcher\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Auto set button type\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent Invalid Table\",\"table\":\"sys_search_source\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_search_source\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"\\n\\t\\t (function executeRule(current, previous /*null when async*/) { // Add your code here })(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!(new GlideRecord(current.source_table)).isValid()\",\n\t\"name\": \"Prevent Invalid Table\"\n}```"}
{"prompt":"{\"prompt\":\"Trim Name\",\"table\":\"sys_user_role\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_user_role\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"current.name = current.name.trim();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Trim Name\"\n}```"}
{"prompt":"{\"prompt\":\"reassignment counter\",\"table\":\"task\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"current.reassignment_count += 1;\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.assignment_group.changes()\",\n\t\"name\": \"reassignment counter\"\n}```"}
{"prompt":"{\"prompt\":\"Discovery - Assign Discovery app to MID\",\"table\":\"discovery_schedule\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"discovery_schedule\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function() {\\n\\n/* All MID servers used by the schedule (either directly or through cluster) will\\n\\t be assigned to Discovery application if not already assigned to Discovery or\\n\\t to ALL. */\\n\\n\\t var discoAppSysId = getSysId('ecc_agent_application', 'name', 'Discovery');\\n\\t var allAppSysId = getSysId('ecc_agent_application', 'name', 'ALL');\\n\\t var appAssigned = false;\\n\\n\\t if (!discoAppSysId) {\\n\\t\\t\\tgs.error('Discovery application does not exist in ecc_agent_application table');\\n\\t\\t\\treturn;\\n\\t }\\n\\t if (!allAppSysId) {\\n\\t\\t\\tgs.error('ALL application does not exist in ecc_agent_application table');\\n\\t\\t\\treturn;\\n\\t }\\n\\t if (current.mid_select_method == 'specific_mid') {\\n\\t\\t\\tcreateMapping(current.mid_server);\\n\\t } else if (current.mid_select_method == 'specific_cluster') {\\n\\t\\t\\tprocessCluster(current.mid_cluster);\\n\\t }\\n\\t if (appAssigned) {\\n\\t\\t\\tvar msg = gs.getMessage('The Discovery application was added to the MID Server(s) configured for this schedule. ');\\n\\t\\t\\tvar ref = gs.getProperty('help.base.servicenow') + 'CSHelp:MIDDiscoApplication';\\n\\t\\t\\tvar link = ' <a target=\\\"_blank\\\" href=\\\"' + ref + '\\\">' + gs.getMessage('More Info') + '</a>';\\n\\t\\t\\tgs.addInfoMessage(msg + link);\\n\\t }\\n\\n\\t function createMapping(midSysId) {\\n\\t\\t\\tif (mappingExists(midSysId)) {\\n\\t\\t\\t\\t gs.log('MID server application mapping already exists');\\n\\t\\t\\t\\t return;\\n\\t\\t\\t}\\n\\t\\t\\tgs.log('Assigning Discovery application to MID ' + midSysId);\\n\\t\\t\\tvar gr = new GlideRecord('ecc_agent_application_m2m');\\n\\t\\t\\tgr.agent = '' + midSysId;\\n\\t\\t\\tgr.application = '' + discoAppSysId;\\n\\t\\t\\tif (JSUtil.notNil(gr.insert()))\\n\\t\\t\\t\\t appAssigned = true;\\n\\t }\\n\\n\\t function processCluster(mid_cluster) {\\n\\t\\t\\tgr = new GlideRecord('ecc_agent_cluster_member_m2m');\\n\\t\\t\\tgr.addQuery('cluster', mid_cluster);\\n\\t\\t\\tgr.query();\\n\\t\\t\\twhile (gr.next())\\n\\t\\t\\t\\t createMapping(gr.agent);\\n\\t }\\n\\n\\t function mappingExists(midSysId) {\\n\\t\\t\\tvar gr = new GlideRecord('ecc_agent_application_m2m');\\n\\t\\t\\tgr.addQuery('agent', midSysId);\\n\\t\\t\\tvar qc = gr.addQuery('application', discoAppSysId);\\n\\t\\t\\tqc.addOrCondition('application', allAppSysId);\\n\\t\\t\\tgr.query();\\n\\t\\t\\treturn gr.hasNext();\\n\\t }\\n\\n\\t function getSysId(tableName, fieldName, value) {\\n\\t\\t\\tvar gr = new GlideRecord(tableName);\\n\\t\\t\\tgr.addQuery(fieldName, value);\\n\\t\\t\\tgr.query();\\n\\t\\t\\tif (gr.next())\\n\\t\\t\\t\\t return gr.sys_id;\\n\\t\\t\\treturn null;\\n\\t }\\n\\n})();\\n\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"mid_clusterVALCHANGES^ORmid_serverVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Discovery - Assign Discovery app to MID\"\n}```"}
{"prompt":"{\"prompt\":\"Add Type and Experience to scratchpad\",\"table\":\"sys_playbook_activity_renderer\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_playbook_activity_renderer\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif ((current.activity_definition || {}).activity_type) {\\n\\t\\tg_scratchpad.experience_type = current.activity_definition.activity_type;\\n\\t} else if ((current.activity_ui || {}).experience_type) {\\n\\t\\tg_scratchpad.experience_type = current.activity_ui.experience_type;\\n\\t\\tg_scratchpad.playbook_experience = current.activity_ui.playbook_experience;\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Add Type and Experience to scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"Load properties and strings\",\"table\":\"sys_email_account\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_email_account\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t // This function loads all the needed strings and properties up front\\n\\t // to give a better user experience\\n\\n\\t g_scratchpad.glideEmailReadActive = gs.getProperty(\\\"glide.email.read.active\\\");\\n\\t g_scratchpad.glideEmailSmtpActive =\\tgs.getProperty(\\\"glide.email.smtp.active\\\");\\n\\n\\t g_scratchpad.moreInfoStr = gs.getMessage('more info');\\n\\t g_scratchpad.emailPropertiesStr = gs.getMessage('Email Properties');\\n\\t g_scratchpad.sendDisabledMessageStr = gs.getMessage('Email sending property is disabled. You must enable it to send email.');\\n\\t g_scratchpad.receiveDisabledMessageStr = gs.getMessage('Email receiving property is disabled. You must enable it to receive email.');\\n\\t g_scratchpad.serviceNowConfiguredStr = gs.getMessage('This account is configured and maintained by ServiceNow.');\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Load properties and strings\"\n}```"}
{"prompt":"{\"prompt\":\"Update group user skill level\",\"table\":\"sys_group_has_skill\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_group_has_skill\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar sm = new SkillManager(); \\n\\t//first we need to identify the changes are coming from the parent group or manually changed when the level inheritance is set to true\\n\\t\\n\\t//if the parent group skill level is different from child group skill level that means the level change is not coming from the parent.\\n\\tif(current.skill_level_inherited){\\n\\t\\tvar parentLevel = new GlideRecord('sys_group_has_skill');\\n\\t\\tparentLevel.addQuery('group', current.group.parent);\\n\\t\\tparentLevel.addQuery('skill', current.skill);\\n\\t\\tparentLevel.query();\\n\\t\\tif(parentLevel.next()){\\n\\t\\t\\tif(parentLevel.skill_level.value != current.skill_level.value){\\n\\t\\t\\t\\tcurrent.skill_level_inherited = false;\\n\\t\\t\\t\\tcurrent.update();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t\\n\\tsm.updateGroupUsersSkillLevel(current);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"skill_levelVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Update group user skill level\"\n}```"}
{"prompt":"{\"prompt\":\"Clear Cache\",\"table\":\"sys_user_role\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_user_role\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"//To make sure the cache is updated after role name changed.\\nGlideCacheManager.flush(\\\"USER_ROLE_CACHE\\\");\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"nameVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear Cache\"\n}```"}
{"prompt":"{\"prompt\":\"Start Workflow\",\"table\":\"service_task\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"service_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"startServiceTaskWorkflow();\\n\\nfunction startServiceTaskWorkflow() {\\n\\tvar wf = new GlideRecord(\\\"wf_workflow\\\");\\n\\tif (!wf.get(\\\"name\\\", \\\"Service Task Processing\\\"))\\n\\t\\treturn;\\n\\t\\n\\tvar w = new Workflow();\\n\\tw.startFlow(wf.sys_id, current, current.operation());\\n}\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"sys_class_name!=service_task^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Start Workflow\"\n}```"}
{"prompt":"{\"prompt\":\"Remove table,cond,order for default set\",\"table\":\"cmn_rota_escalation_set\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmn_rota_escalation_set\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tcurrent.setValue('order', '');\\n\\tcurrent.setValue('table', '');\\n\\tcurrent.setValue('condition', '');\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.getValue('default') == \\\"1\\\"\",\n\t\"name\": \"Remove table,cond,order for default set\"\n}```"}
{"prompt":"{\"prompt\":\"Get read only setting for template\",\"table\":\"std_change_proposal\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"std_change_proposal\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tg_scratchpad.is_template_readonly = false;\\n\\t\\n\\tif (current.isNewRecord())\\n\\t\\treturn;\\n\\t\\n\\tg_scratchpad.is_template_readonly = !(new StdChangeUtils().reviewedFieldsAcl(current));\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Get read only setting for template\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent Changing ExtendToAllChildTables\",\"table\":\"nlq_synonym\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"nlq_synonym\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar record_value = \\\"record\\\";\\n\\tif (current.synonym_type == record_value && current.extend_to_all_child_tables == true){\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"For Synonym Type = Record, Extend to all child tables is not supported\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\t\\n\\t\\n\\tif (current.synonym_type == \\\"table_or_column\\\" && current.extend_to_all_child_tables == true && current.getValue(\\\"element\\\") == null) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"For Synonym Type = Table, Extend to all child tables is not supported\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent Changing ExtendToAllChildTables\"\n}```"}
{"prompt":"{\"prompt\":\"PA Validate Default time series\",\"table\":\"pa_indicators\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_indicators\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (!SNC.PAIndicator.validAggregate(current.default_aggregate, current.sys_id)) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"pa.indicator.invalid_default_aggregate\\\"));\\n\\tcurrent.setAbortAction(true);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"default_aggregateISNOTEMPTY^default_aggregateVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"PA Validate Default time series\"\n}```"}
{"prompt":"{\"prompt\":\"Clear MID Environment Cache\",\"table\":\"ecc_agent_capability\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_agent_capability\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"clearMIDEnvCache();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear MID Environment Cache\"\n}```"}
{"prompt":"{\"prompt\":\"Validate header button is navigation\",\"table\":\"sys_sg_applet_launcher\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_applet_launcher\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.header_button.button.type != \\\"redirection\\\") {\\n\\t\\tgs.addInfoMessage(gs.getMessage('Header button must be a navigation'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"header_buttonVALCHANGES^header_buttonISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate header button is navigation\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Asset Reclamation Request\",\"table\":\"asset_reclamation_request\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asset_reclamation_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /* null when async */) {\\n\\tvar validRequest = new AssetReclamationUtil().validateAssetReclamationRequest(current);\\n\\tif (!validRequest) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n}(current, previous));\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate Asset Reclamation Request\"\n}```"}
{"prompt":"{\"prompt\":\"VTB Previous Additional Assignees\",\"table\":\"vtb_task\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"vtb_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"//Define previous and current additional assignee lists\\nvar prevList = previous.additional_assignee_list.split(\\\",\\\");\\nvar currList = current.additional_assignee_list.split(\\\",\\\");\\n\\n//Get new additional assigneed who is recipient of resulting email notification\\nvar arrayUtil = new ArrayUtil();\\nvar sendTo = arrayUtil.diff(currList, prevList);\\n\\nfunction onAfter(current, previous) {\\n\\t\\tgs.eventQueue(\\\"vtb_task.previous.additional_assignee\\\", current, sendTo, current.sys_id);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"additional_assignee_listVALCHANGES^additional_assignee_listISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"VTB Previous Additional Assignees\"\n}```"}
{"prompt":"{\"prompt\":\"Old Contact Menu Restriction\",\"table\":\"sys_cs_branding_setup\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cs_branding_setup\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\t// Add your code here\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Please update through Menu Options.\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"contact_live_agentVALCHANGES^NQphone_callVALCHANGES^NQsend_emailVALCHANGES^NQsupport_phone_labelVALCHANGES^NQsupport_hours_labelVALCHANGES^NQsupport_email_labelVALCHANGES^NQsupport_phoneVALCHANGES^NQsupport_emailVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Old Contact Menu Restriction\"\n}```"}
{"prompt":"{\"prompt\":\"Create or update GRA\",\"table\":\"ais_genius_result_configuration\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ais_genius_result_configuration\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar util = new AisGeniusResultUtil();\\n\\tif (current.trigger_condition == 'intent')\\n\\t\\tutil.createOrUpdateGRAByConfiguration(current.getUniqueValue());\\n\\tif (previous.trigger_condition == 'intent')\\n\\t\\tutil.createOrUpdateGRAByConfiguration(previous.getUniqueValue());\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.trigger_condition.changes()\",\n\t\"name\": \"Create or update GRA\"\n}```"}
{"prompt":"{\"prompt\":\"Do not Deactivate Topic used in CCE\",\"table\":\"sys_cs_topic\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cs_topic\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar gr = new GlideRecord('sys_cs_context_profile_topic');\\n\\t\\tgr.addQuery('topic', current.getUniqueValue());\\n\\t\\tgr.query();\\n\\t\\tif (gr.next()) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('Unable to deactivate topic: This topic is used in a custom chat experience. Please remove the topic from the chat experience to proceed.'));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\n\\t\\tvar grp = new GlideRecord('sys_cs_context_profile_promotion');\\n\\t\\tgrp.addQuery('topic', current.getUniqueValue());\\n\\t\\tgrp.query();\\n\\t\\tif (grp.next()) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('Unable to deactivate topic: This topic is used in a custom chat experience. Please remove the topic from the chat experience to proceed.'));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.active\",\n\t\"name\": \"Do not Deactivate Topic used in CCE\"\n}```"}
{"prompt":"{\"prompt\":\"Update Tomcat Connector Name\",\"table\":\"cmdb_ci_tomcat_connector\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci_tomcat_connector\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"current.name = current.port;\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.port.changes()\",\n\t\"name\": \"Update Tomcat Connector Name\"\n}```"}
{"prompt":"{\"prompt\":\"Enable/Disable scheduled tests\",\"table\":\"sys_properties\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (previous.value == current.value)\\n\\t\\treturn;\\n\\n\\tvar gr = new GlideRecord('sys_properties');\\n\\tgr.addQuery('name', 'sn_atf.schedule.enabled');\\n\\tgr.query();\\n\\tif (!gr.next())\\n\\t\\treturn;\\n\\n\\t\\tvar schedulePropertyValue = gr.getValue('value');\\n\\t\\tgr.setWorkflow(false); // forcibly turn on or off the schedule property\\n\\tif (previous.value == 'true' && current.value == 'false') {\\n\\t\\tif (schedulePropertyValue == 'true') {\\n\\t\\t\\tgr.setValue('value', 'false');\\n\\t\\t\\tgr.update();\\n\\t\\t\\tgs.addInfoMessage(gs.getMessage('Disabled scheduled suites because test execution was disabled'));\\n\\t\\t}\\n\\t} else if (previous.value == 'false' && current.value == 'true') {\\n\\t\\tif (schedulePropertyValue == 'false') {\\n\\t\\t\\tgr.setValue('value', 'true');\\n\\t\\t\\tgr.update();\\n\\t\\t\\tgs.addInfoMessage(gs.getMessage('Enabled scheduled suites because test execution was enabled'));\\n\\t\\t}\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.name == 'sn_atf.runner.enabled'\",\n\t\"name\": \"Enable/Disable scheduled tests\"\n}```"}
{"prompt":"{\"prompt\":\"Protection Policy Propagation\",\"table\":\"sys_hub_step_instance\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_hub_step_instance\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t// Propogate to Extended Inputs and Outputs\\n\\tpropagateSysPolicy(\\\"sys_hub_step_ext_input\\\", \\\"model\\\");\\n\\tpropagateSysPolicy(\\\"sys_hub_step_ext_output\\\", \\\"model\\\");\\n\\n\\tfunction propagateSysPolicy(childTable, foreignKey) {\\n\\t\\tvar child = new GlideRecord(childTable);\\n\\t\\tchild.addQuery(foreignKey, current.getUniqueValue());\\n\\t\\tchild.query();\\n\\t\\twhile (child.next()) {\\n\\t\\t\\tchild.sys_policy = current.sys_policy;\\n\\t\\t\\tchild.update();\\n\\t\\t}\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.sys_policy.changes()\",\n\t\"name\": \"Protection Policy Propagation\"\n}```"}
{"prompt":"{\"prompt\":\"Probe - All MIDs\",\"table\":\"ecc_queue\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_queue\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function() {\\n\\tcurrent.state = \\\"processed\\\";\\n\\tcurrent.processed = gs.nowDateTime();\\n\\t\\n\\tvar eccRec = new GlideRecord('ecc_queue');\\n\\t\\n\\tvar eccAgentRecords = new GlideRecord('ecc_agent');\\n\\teccAgentRecords.query();\\n\\twhile (eccAgentRecords.next()) {\\n\\t\\tvar agent = eccAgentRecords.name;\\n\\t\\teccRec.initialize();\\n\\t\\teccRec.setValue('queue', current.queue);\\n\\t\\teccRec.setValue('priority', current.priority);\\n\\t\\teccRec.setValue('topic', current.topic);\\n\\t\\teccRec.setValue('name', current.name);\\n\\t\\teccRec.setValue('source', current.source);\\n\\t\\teccRec.setValue('payload', current.payload);\\n\\t\\teccRec.setValue('state', 'ready');\\n\\t\\teccRec.setValue('agent', 'mid.server.' + agent);\\n\\t\\teccRec.setValue('agent_correlator', current.agent_correlator);\\n\\t\\teccRec.insert();\\n\\t}\\n})();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.agent == \\\"mid.server.*\\\" && current.queue == \\\"output\\\" && current.state == \\\"ready\\\"\",\n\t\"name\": \"Probe - All MIDs\"\n}```"}
{"prompt":"{\"prompt\":\"Ensure 1 default inbound/outbound filter\",\"table\":\"sys_email_system_filter\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_email_system_filter\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tif (previous.isValidRecord() && previous.getValue('active') == true && previous.getValue('default') == true && previous.type == current.type)\\n\\t\\t\\t\\treturn;\\n\\n\\t\\tvar filterGR = new GlideRecord(\\\"sys_email_system_filter\\\");\\n\\t\\tfilterGR.addQuery(\\\"type\\\", current.type);\\n\\t\\tfilterGR.addQuery(\\\"default\\\", \\\"true\\\");\\n\\t\\tfilterGR.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.getUniqueValue());\\n\\t\\tfilterGR.addActiveQuery();\\n\\t\\tfilterGR.query();\\n\\t\\tif (filterGR.next()) {\\n\\t\\t\\t\\tfilterGR.setValue(\\\"default\\\", \\\"false\\\");\\n\\t\\t\\t\\tfilterGR.update();\\n\\t\\t\\t\\tvar message = \\\"\\\";\\n\\n\\t\\t\\t\\tif (GlideStringUtil.notNil(filterGR.name) && GlideStringUtil.notNil(current.name))\\n\\t\\t\\t\\t\\t\\tmessage = gs.getMessage(\\\"Default {0} filter changed from {1} to {2}\\\", [filterGR.type, filterGR.name, current.name]);\\n\\t\\t\\t\\telse if (GlideStringUtil.notNil(filterGR.name) && GlideStringUtil.nil(current.name))\\n\\t\\t\\t\\t\\t\\tmessage = gs.getMessage(\\\"Default {0} filter changed from {1}\\\", [filterGR.type, filterGR.name]);\\n\\t\\t\\t\\telse if (GlideStringUtil.nil(filterGR.name) && GlideStringUtil.notNil(current.name))\\n\\t\\t\\t\\t\\t\\tmessage = gs.getMessage(\\\"Default {0} filter changed to {1}\\\", [filterGR.type, current.name]);\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\tmessage = gs.getMessage(\\\"Default {0} filter changed\\\", filterGR.type);\\n\\n\\t\\t\\t\\tgs.addInfoMessage(message);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.getValue('active') == true && current.getValue('default') == true\",\n\t\"name\": \"Ensure 1 default inbound/outbound filter\"\n}```"}
{"prompt":"{\"prompt\":\"Notice on hidden back out\",\"table\":\"sys_update_set\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_update_set\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (SNC.UpdateMutex.isAvailable())\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"The Update Set Back Out button is not available because the system is currently upgrading. <a href=\\\\\\\"$upgrade_client.do\\\\\\\">Click here</a> for the Upgrade Monitor\\\"));\\n\\telse {\\n\\t\\t//Notify on the current running mutex operation\\n\\t\\tvar currMsg = SNC.UpdateMutex.getCurrentMutexMessage();\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"The Update Set Back Out button is unavailable because another operation is running: {0}\\\", [currMsg]));\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"new UpdateSetBackOutVisible().shouldInformMissing(current)\",\n\t\"name\": \"Notice on hidden back out\"\n}```"}
{"prompt":"{\"prompt\":\"Clear unauth flag on change\",\"table\":\"cmdb_ci_outage\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci_outage\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar chgGr = current.task_number.getRefRecord();\\n\\tif (chgGr && chgGr.getValue('unauthorized')) {\\n\\t\\tchgGr.setValue('unauthorized', false);\\n\\t\\tchgGr.update();\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"task_numberISNOTEMPTY^type!=planned^EQ\",\n\t\"condition\": \"gs.hasRole('itil, sn_change_write') && (current.task_number.sys_class_name == 'change_request')\",\n\t\"name\": \"Clear unauth flag on change\"\n}```"}
{"prompt":"{\"prompt\":\"Validate only one resolver per path\",\"table\":\"sys_graphql_resolver_mapping\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_graphql_resolver_mapping\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar resolverAggregate = new GlideAggregate('sys_graphql_resolver_mapping');\\n\\t\\tresolverAggregate.addQuery('schema', current.schema);\\n\\t\\tresolverAggregate.addQuery('path', current.path);\\n\\t\\tresolverAggregate.addQuery('sys_id', '!=', current);\\n\\t\\tresolverAggregate.addAggregate('count');\\n\\t\\tresolverAggregate.query();\\n\\n\\t\\tif (resolverAggregate.next() && resolverAggregate.getAggregate('count') > 0) {\\n\\t\\t\\t\\tgs.addErrorMessage('Mapping already defined for ' + current.path + '. Only one resolver can be defined for a path.');\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.path.changes()\",\n\t\"name\": \"Validate only one resolver per path\"\n}```"}
{"prompt":"{\"prompt\":\"Incident Create Knowledge\",\"table\":\"incident\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"incident\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var sub = gs.getProperty('glide.knowman.submission.workflow');\\n\\nif (sub == 'true')\\n\\t\\tsubmitCandidate();\\nelse\\n\\t\\tsubmitDirect();\\n\\nfunction submitDirect() {\\n\\t\\tvar kb = new GlideRecord(\\\"kb_knowledge\\\");\\n\\t\\tkb.source = current.sys_id;\\n\\t\\tkb.short_description = current.short_description;\\n\\t\\tkb.sys_domain = current.sys_domain;\\n\\t\\tkb.text = current.comments.getHTMLValue();\\n\\t\\tkb.workflow_state = 'draft';\\n\\tkb.kb_knowledge_base = gs.getProperty(\\\"glide.knowman.task_kb\\\", \\\"dfc19531bf2021003f07e2c1ac0739ab\\\");\\n\\tkbSysId = kb.insert();\\n\\tif(kbSysId)\\n\\t\\tgs.addInfoMessage(gs.getMessage('Knowledge Article created: {0} based on closure of Incident: {1}', [kb.number, current.number]));\\n}\\n\\nfunction submitCandidate() {\\n\\t\\tvar gr = new GlideRecord('kb_submission');\\n\\t\\tgr.parent = current.sys_id;\\n\\t\\tgr.short_description = current.short_description;\\n\\t\\tgr.sys_domain = current.sys_domain;\\n\\t\\tgr.text = current.comments.getHTMLValue();\\n\\t\\tgr.insert();\\n\\t\\tgs.addInfoMessage(gs.getMessage('Knowledge Submission created: {0} based on closure of Incident: {1}', [gr.number, current.number]));\\n\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(current.incident_state.changesTo(IncidentState.CLOSED) && current.knowledge == true) && (!pm.isActive('com.snc.incident.knowledge'))\",\n\t\"name\": \"Incident Create Knowledge\"\n}```"}
{"prompt":"{\"prompt\":\"Notify on pending operations\",\"table\":\"sys_remote_update_set\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_remote_update_set\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar tracker = new GlideRecord(\\\"sys_execution_tracker\\\");\\n\\ttracker.addQuery(\\\"source_table\\\", \\\"sys_remote_update_set\\\");\\n\\ttracker.addQuery(\\\"source\\\", current.sys_id);\\n\\ttracker.orderByDesc(\\\"sys_created_on\\\");\\n\\ttracker.query();\\n\\tif (!tracker.next())\\n\\t\\treturn;\\n\\t\\n\\tif (tracker.state == \\\"0\\\") //pending\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"There is a pending operation on this update set: {0}\\\", tracker.name));\\n\\telse if (tracker.state == \\\"1\\\") //running\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"There is an active operation running on this update set: {0}\\\", tracker.name));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.state != \\\"committed\\\"\",\n\t\"name\": \"Notify on pending operations\"\n}```"}
{"prompt":"{\"prompt\":\"Labels check hasLabels\",\"table\":\"label_entry\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"label_entry\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var HAS_LABELS = 'hasLabels';\\r\\naddAttr();\\r\\n\\r\\nfunction addAttr() {\\r\\n\\t\\tif (!current.table)\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\tvar td = GlideTableDescriptor.get(current.table);\\r\\n\\t\\tif (!td)\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\tvar hasAttr = td.getED().getBooleanAttribute(HAS_LABELS);\\r\\n\\t\\tif (hasAttr)\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\tvar ed = td.getED();\\r\\n\\t\\tGlideBootstrap.mergeTableAttributes(ed, HAS_LABELS);\\r\\n\\t\\tGlideTableManager.invalidateTable(current.table);\\r\\n\\t\\tgs.log('Set \\\"hasLabels\\\" attribute on table ' + current.table);\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Labels check hasLabels\"\n}```"}
{"prompt":"{\"prompt\":\"set item checked out info on scratchpad\",\"table\":\"catalog_ui_policy_action\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"catalog_ui_policy_action\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"set item checked out info on scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"expiration_date\",\"table\":\"sys_report_import_table\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_report_import_table\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"999\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar daysToExpire = current.expiration_days;\\n\\t\\n\\tvar gd = new GlideDate(); \\n\\t\\tgd.addDays(daysToExpire);\\n\\t\\n\\t//set the expire on date \\n\\tcurrent.expire_on_date = gd;\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"expiration_date\"\n}```"}
{"prompt":"{\"prompt\":\"Notice on hidden activation\",\"table\":\"v_plugin\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"v_plugin\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (SNC.UpdateMutex.isAvailable())\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"The Plugin Activation button is not available because the system is currently upgrading. <a href=\\\\\\\"$upgrade_client.do\\\\\\\">Click here</a> for the Upgrade Monitor\\\"));\\n\\telse {\\n\\t\\t//Notify on the current running mutex operation\\n\\t\\tvar currMsg = SNC.UpdateMutex.getCurrentMutexMessage();\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Plugin Activation is unavailable because another operation is running: {0}\\\", [currMsg]));\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"new PluginActivationVisible().shouldInformMissing()\",\n\t\"name\": \"Notice on hidden activation\"\n}```"}
{"prompt":"{\"prompt\":\"Sync Update\",\"table\":\"sp_css\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sp_css\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar include = new GlideRecord(\\\"sp_css_include\\\");\\n\\tinclude.addQuery(\\\"sp_css\\\", current.sys_id);\\n\\tinclude.query();\\n\\twhile (include.next()) {\\n\\t\\tinclude.name = current.name;\\n\\t\\tinclude.update();\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.name.changes()\",\n\t\"name\": \"Sync Update\"\n}```"}
{"prompt":"{\"prompt\":\"Run remediations for CMDB Health task\",\"table\":\"task\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var remediations = SNC.RemediationUtil.getRemediationsForTask(current.sys_id, true);\\n\\nfor (var i=0; i<remediations.length; i++) {\\n\\tvar remed = remediations[i];\\n\\n\\tvar id = remed.sys_id;\\n\\tvar name = remed.name;\\n\\tvar workflow = remed.workflow;\\n\\tvar wfName = remed.workflow_name;\\n\\t\\n\\tvar cntx = new Workflow().startFlow(workflow, current, null, null);\\n\\t\\n\\tvar msg = buildMessage(id, name, workflow, wfName, cntx);\\n\\tcurrent.work_notes = msg;\\n\\tcurrent.update();\\n}\\n\\nfunction buildMessage(id, name, workflow, wfName, wfContext) {\\n\\treturn\\t'Workflow \\\\\\\"' + wfName + '\\\\\\\" ('+workflow + ') started '+\\n\\t'per remediation rule \\\\\\\"' + name + '\\\\\\\" (' + id + '). ';\\n\\t// 'Check Workflow Context ' + wfContext + 'for progress.';\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"SNC.RemediationUtil.getTaskTables().contains(current.sys_class_name);\",\n\t\"name\": \"Run remediations for CMDB Health task\"\n}```"}
{"prompt":"{\"prompt\":\"Abort SLA ConditionType if Simple\",\"table\":\"sys_properties\",\"when\":\"before\",\"actions\":\"ud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar slaDefinition = new GlideRecord('contract_sla');\\n\\tslaDefinition.addEncodedQuery('when_to_cancelINon_condition,never^ORwhen_to_resume=on_condition^condition_class=NULL'); \\n\\n\\tslaDefinition.query();\\n\\tif (slaDefinition.getRowCount() > 0) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('Unable to change the Condition Type to SLAConditionSimple as there are existing SLA definitions that use When to cancel / When to resume conditions.' ));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=com.snc.sla.default_conditionclass^EQ\",\n\t\"condition\": \"current.getValue('value') === 'SLAConditionSimple'\",\n\t\"name\": \"Abort SLA ConditionType if Simple\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Category\",\"table\":\"sc_cat_item\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_cat_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"90\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (JSUtil.nil(current.sc_catalogs) && JSUtil.notNil(current.category))\\n\\t\\tcurrent.sc_catalogs = GlideappCategory.get(current.category).getCatalog();\\nelse if (JSUtil.nil(current.catalogs) && JSUtil.nil(current.category) && SNC.Catalog.getTotalCatalogCount() == 1)\\n\\t\\tcurrent.sc_catalogs = SNC.Catalog.getDefaultCatalog();\\nelse if (JSUtil.notNil(current.sc_catalogs) && JSUtil.notNil(current.category)) {\\n\\t\\tif (current.sc_catalogs.indexOf(GlideappCategory.get(current.category).getCatalog()) == -1) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('You cannot select category [{0}] because it does not exist in selected catalog(s)', current.category.title));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"state!=draft^EQ\",\n\t\"condition\": \"new global.GlobalServiceCatalogUtil().getCatalogWizardOrigin() != 'aes'\",\n\t\"name\": \"Validate Category\"\n}```"}
{"prompt":"{\"prompt\":\"Add Legacy Information Message\",\"table\":\"kb_knowledge\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"kb_knowledge\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var pageName = GlideTransaction.get().getPageName();\\naddLegacyInformationMessage(pageName);\\naddExpiredMessageForPastValidToDate(pageName);\\n\\nfunction addLegacyInformationMessage(pageName) {\\n\\t\\tg_scratchpad.default_valid_to_set = new KBCommon().isDefaultValidToSet();\\n\\t\\tvar kbKnowledge = new KBKnowledgeBase();\\n\\t\\tvar kbKnowledgeBaseId = current.kb_knowledge_base;\\n\\t\\tvar showMessage = (pageName != \\\"angular\\\" && kbKnowledge.isKBVersion2(kbKnowledgeBaseId));\\n\\t\\tif (showMessage)\\n\\t\\t\\t\\tkbKnowledge.setUniqueLegacyInfoMessage(kbKnowledgeBaseId);\\n}\\n\\nfunction addExpiredMessageForPastValidToDate(pageName){\\n\\tif(!pageName.endsWith('_update') && !current.isNewRecord() && current.workflow_state!=\\\"outdated\\\" && new KBViewModel().isArticleExpired(current))\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Article expired. Update its <i>Valid to</i> date to make it available to users.\\\"));\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Add Legacy Information Message\"\n}```"}
{"prompt":"{\"prompt\":\"Kill User Session\",\"table\":\"v_user_session\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"v_user_session\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// kill specific user session\\r\\nvar session = GlideSessions.get().getSession(current.session_id).getHS();\\r\\nsession.setAttribute('locked_out', 'true');\\r\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.locked == true\",\n\t\"name\": \"Kill User Session\"\n}```"}
{"prompt":"{\"prompt\":\"Calculate software instance name\",\"table\":\"cmdb_software_instance\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_software_instance\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"current.name = current.software.getDisplayValue() + '-' + current.installed_on.getDisplayValue();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.name.nil()\",\n\t\"name\": \"Calculate software instance name\"\n}```"}
{"prompt":"{\"prompt\":\"Notify Impact\",\"table\":\"svc_ci_assoc\",\"when\":\"after\",\"actions\":\"cd\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"svc_ci_assoc\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(current, previous) {\\n\\n\\t// if the item is related to Operational Manual service, notify impact calculation\\n\\tif (current.service_id.operational_status == 1 &&\\n\\t\\t current.service_id.sys_class_name == 'cmdb_ci_service_manual') {\\n\\n\\t\\tgs.log(\\\"From Business rule on svc_ci_assoc: Triggering impact for \\\" + current.service_id.name);\\n\\t\\n\\t\\tvar im = new SNC.ImpactManager();\\n\\t\\tim.triggerImpact(current.service_id);\\n\\t}\\t\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Notify Impact\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Default Profile\",\"table\":\"clone_profile\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"clone_profile\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar cloneProfileGr = new GlideRecord('clone_profile');\\n\\tcloneProfileGr.addQuery('default_profile', true);\\n\\tcloneProfileGr.addQuery('sys_id', '!=', current.getValue('sys_id'));\\n\\tcloneProfileGr.query();\\n\\t\\n\\twhile(cloneProfileGr.next()) {\\n\\t\\tcloneProfileGr.setValue('default_profile', false);\\n\\t\\tcloneProfileGr.setWorkflow(false);\\n\\t\\tcloneProfileGr.update();\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"default_profile=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate Default Profile\"\n}```"}
{"prompt":"{\"prompt\":\"Add Jasmine versions to scratchpad\",\"table\":\"sys_atf_step\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_atf_step\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"g_scratchpad.jasmine_versions = GlidePropertiesDB.get('sn_atf.jasmine.versions', '3.1');\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"step_config=41de4a935332120028bc29cac2dc349a^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Add Jasmine versions to scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"Set selected color\",\"table\":\"jrobin_graph_line\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"jrobin_graph_line\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.color_picker.nil())\\r\\n\\t current.color = 'black';\\r\\nelse\\r\\n\\t current.color = current.color_picker.color;\\r\\n\\t \",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set selected color\"\n}```"}
{"prompt":"{\"prompt\":\"Set Use Parent App (menu)\",\"table\":\"sys_app_application\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_app_application\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"9999\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// if override app set for this table, then lets tell ApplicationFileListener to use parent application assignment when\\n// it creates new application files.\\tThis ensures that all descendants of this menu instance will have the same application\\nvar overrideApp = SNC.Apps.getOverrideApp(current.getTableName());\\nif(overrideApp != null && overrideApp.length > 0)\\n\\tSNC.Apps.setUseParentApp(true);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.isActionAborted()\",\n\t\"name\": \"Set Use Parent App (menu)\"\n}```"}
{"prompt":"{\"prompt\":\"SNC - Moot user approvals for group\",\"table\":\"sysapproval_group\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sysapproval_group\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// Set all of the pending user approvals for this group approval to not required\\nvar util = new WorkflowApprovalUtils();\\nutil.setPendingUserApprovalsByGroup(current.sys_id, 'not_required');\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.approval.changesTo('approved') || current.approval.changesTo('rejected') || current.approval.changesTo('not_required') || current.approval.changesTo('cancelled')\",\n\t\"name\": \"SNC - Moot user approvals for group\"\n}```"}
{"prompt":"{\"prompt\":\"Reference Qualifier Sync\",\"table\":\"item_option_new\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"item_option_new\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"checkDyn();\\n\\nfunction checkDyn() {\\n\\tif (current.reference_qual.trim().indexOf(\\\"javascript:\\\") != 0) {\\n\\t\\tcurrent.reference_qual_condition = current.reference_qual.trim();\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\tvar scr = current.reference_qual.trim();\\n\\tscr = scr.substring(\\\"javascript:\\\".length);\\n\\tif (scr == \\\"\\\")\\n\\t\\treturn;\\n\\t\\n\\tif (scr.endsWith(\\\";\\\"))\\n\\t\\tscr = scr.substring(0, scr.length - 1);\\n\\t\\n\\tvar dyn = new GlideRecord(\\\"sys_filter_option_dynamic\\\");\\n\\tdyn.addQuery(\\\"script\\\", scr).addOrCondition(\\\"script\\\", scr + \\\";\\\");\\n\\tdyn.query();\\n\\tif (dyn.next()) {\\n\\t\\tif (current.use_reference_qualifier != 'advanced')\\n\\t\\t\\tcurrent.use_reference_qualifier = 'dynamic';\\n\\t\\n\\t\\tcurrent.dynamic_ref_qual = dyn.sys_id;\\n\\t} else\\n\\t\\tcurrent.use_reference_qualifier = 'advanced';\\n\\t\\n\\tcurrent.setWorkflow(false);\\n\\tcurrent.autoSysFields(false);\\n\\tcurrent.update();\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.reference_qual.nil()\",\n\t\"name\": \"Reference Qualifier Sync\"\n}```"}
{"prompt":"{\"prompt\":\"AMB New or Updated Record\",\"table\":\"sys_ux_m2m_banner_announcement\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ux_m2m_banner_announcement\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var fields = new UXBannerAnnouncementGetFields();\\n(function executeRule(current, previous /*null when async*/) {\\n\\t//check if announcement falls within the time window\\n\\tvar currentTime = new GlideDateTime();\\n\\tvar startDate = new GlideDateTime(current.announcement.start);\\n\\tvar endDate = new GlideDateTime(current.announcement.end);\\n\\tvar sessionTimeout = gs.getProperty('glide.ui.session_timeout');\\n\\tvar nonDuplicate = nonDuplicateRecordValidation(current, previous);\\n\\t\\n\\tvar announcementWindow = new GlideDateTime();\\n\\t\\tannouncementWindow.addSeconds(sessionTimeout * 60);\\n\\tannouncementWindow = announcementWindow.getValue();\\n\\n\\tif ((startDate < announcementWindow) && (endDate > currentTime ||\\n\\t\\t!endDate) && nonDuplicate == true) {\\n\\n\\t\\tif (current.announcement_config.active == true) {\\n\\t\\t\\tvar records = {\\n\\t\\t\\t\\t'old_record': fields.getReferences(previous.announcement),\\n\\t\\t\\t\\t'new_record': fields.getReferences(current.announcement),\\n\\t\\t\\t\\t'current_announcement_sys_id': current.announcement,\\n\\t\\t\\t\\t'previous_announcement_sys_id': previous.announcement,\\n\\t\\t\\t\\t'current_announcement_config_id': current.announcement_config,\\n\\t\\t\\t\\t'previous_announcement_config_id': previous.announcement_config,\\n\\t\\t\\t\\t'operation': 'm2m_change'\\n\\t\\t\\t}; \\n\\t\\t\\tgs.publish('/uxbannerannouncements', records);\\n\\t\\t}\\n\\t}\\n\\treturn;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"gs.getProperty('glide.ux.banner_announcement.realtime') == 'true'\",\n\t\"name\": \"AMB New or Updated Record\"\n}```"}
{"prompt":"{\"prompt\":\"Clear Unix probe cache results\",\"table\":\"discovery_spkg_keys\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"discovery_spkg_keys\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(current, previous) {\\n\\tInstallSoftwareFilter.flushUnixProbeCache();\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"type.type=unix^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear Unix probe cache results\"\n}```"}
{"prompt":"{\"prompt\":\"SNC - Run parent workflows (Unapproved)\",\"table\":\"sysapproval_group\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sysapproval_group\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// The group approval was 'unapproved' or 'unrejected'\\n\\n// Run any workflows for our parent so they can check the approval states\\nrunWorkflow_groupUnapprove();\\n\\nfunction runWorkflow_groupUnapprove() {\\n var approvalUtils = new WorkflowApprovalUtils();\\n\\tapprovalUtils.unapprove();\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(current.approval.changesFrom('approved') || current.approval.changesFrom('rejected') || current.approval.changesFrom('not requested')) && current.approval.changesTo('requested')\",\n\t\"name\": \"SNC - Run parent workflows (Unapproved)\"\n}```"}
{"prompt":"{\"prompt\":\"Duration is a positive number\",\"table\":\"interaction_wrap_up_configuration\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"interaction_wrap_up_configuration\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tif ( current.duration <= 0 ) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Duration has to be a positive number.\\\"));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Duration is a positive number\"\n}```"}
{"prompt":"{\"prompt\":\"Question definition changed\",\"table\":\"sc_ic_question\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_ic_question\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"sc_ic_Factory.wrap(current).setDefinitionChangedOnItem();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"sc_ic_Factory.wrap(current).definitionChanged()\",\n\t\"name\": \"Question definition changed\"\n}```"}
{"prompt":"{\"prompt\":\"Unload element activity\",\"table\":\"wf_element_activity\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"wf_element_activity\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"1000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// The unload is handled by the ElementVersionSynchronizer class.\\n//\\ngs.updateSave(current);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"true\",\n\t\"name\": \"Unload element activity\"\n}```"}
{"prompt":"{\"prompt\":\"Fix package licensable/trackable\",\"table\":\"sys_package\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_package\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.sys_class_name == 'sys_app')\\n\\t\\tcurrent.licensable = true;\\n \\n\\tcurrent.trackable = true;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\\n\\t\\t\\tsys_class_name=sys_app^ORsys_class_name=sys_store_app^ORlicensable=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Fix package licensable/trackable\"\n}```"}
{"prompt":"{\"prompt\":\"Email Style Verification\",\"table\":\"sysevent_email_style\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sysevent_email_style\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/* The style field must contain ${body} to work correctly so we'll make sure this is the case to minimize confusion */\\r\\n/* as to why emails are being sent with styles but without content. */\\r\\nif (current.style.indexOf(\\\"${body}\\\") < 0) {\\r\\n\\t gs.addErrorMessage(gs.getMessage(\\\"The style must contain ${body} where the body of the email should appear\\\"));\\r\\n\\t current.setAbortAction(true);\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Email Style Verification\"\n}```"}
{"prompt":"{\"prompt\":\"Validations for Reference Currency unit\",\"table\":\"pa_indicators\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_indicators\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\tvar type = current.type;\\n\\t// we dont support use reference currency unit for formulae, manual, external indicators.\\n\\tif (type == '2' || type == '3' || type == '4') {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"'Use Reference Currency' unit is not supported for {0} Indicators\\\", current.type.getDisplayValue()));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn;\\n\\t}\\n\\n\\t\\tif (!(current && current.cube && current.cube.facts_table))\\n\\t\\t\\t\\treturn;\\n\\n\\t\\tvar tablename = current.cube.facts_table;\\n\\t\\tvar field = current.field;\\n\\t\\tif (current.aggregate == 1 || current.aggregate == 6) {\\n\\t\\t\\t\\tvar aggregate = current.aggregate == 1 ? 'Count' : 'Count Distinct';\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('\\\"Use Reference Currency\\\" unit is not supported for the aggregate {0}', [aggregate]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tvar glideRecord = new GlideRecord(tablename);\\n\\t\\tvar glideElement = glideRecord.getElement(field);\\n\\t\\ttype = '';\\n\\t\\tif (glideElement !== null) {\\n\\t\\t\\t\\tvar descriptor = glideElement.getED();\\n\\t\\t\\t\\tif (descriptor)\\n\\t\\t\\t\\t\\t\\ttype = descriptor.getInternalType();\\n\\t\\t}\\n\\t\\tif (!(type == 'currency2' || type == 'currency' || type == 'price' || type == 'decimal')) {\\n\\t\\tvar fieldLabel = glideElement !== null ? glideElement.getLabel() : field;\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('\\\"Use Reference Currency\\\" unit is not supported for the field {0}', [fieldLabel]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"unit=937658b0532300101ee0ddeeff7b1237^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validations for Reference Currency unit\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Definition\",\"table\":\"sys_app_license_defn\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_app_license_defn\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"120\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\ttry {\\n\\t\\tvar vd = new sn_app_api.ValidateDefinition(current).isValid();\\n\\t} catch (err) {\\n\\t\\tgs.error(err.getMessage());\\n\\t\\tgs.addErrorMessage(err.getMessage());\\n\\t\\n\\t\\t// Abort the modification\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate Definition\"\n}```"}
{"prompt":"{\"prompt\":\"Lock Out User\",\"table\":\"sys_user\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_user\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"GlideSessions.lockOutSessionsInAllNodes(current.user_name);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.locked_out == true\",\n\t\"name\": \"Lock Out User\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent Null descriptors\",\"table\":\"cmdb_rel_type\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_rel_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.addErrorMessage(gs.getMessage('Missing valid Parent or Child descriptor'));\\ncurrent.setAbortAction(true);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(current.parent_descriptor.nil() || current.child_descriptor.nil()) \",\n\t\"name\": \"Prevent Null descriptors\"\n}```"}
{"prompt":"{\"prompt\":\"Update Process Price For Items\",\"table\":\"sc_cat_item\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_cat_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"GlideappProcessPriceUpdater.updateProcessPrice(current);\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.price.changes() || current.recurring_price.changes()\",\n\t\"name\": \"Update Process Price For Items\"\n}```"}
{"prompt":"{\"prompt\":\"Auto stakeholder creation \",\"table\":\"asmt_metric_category\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_metric_category\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"addStakeholders(current);\\n\\nfunction addStakeholders(record) {\\n\\tvar catUser = new GlideRecord(\\\"asmt_m2m_category_user\\\");\\n\\tcatUser.addQuery(\\\"metric_category\\\", record.sys_id);\\n\\tcatUser.query();\\n\\twhile (catUser.next()){\\n\\t\\tvar catAssess = new GlideRecord(\\\"asmt_m2m_category_assessment\\\");\\n\\t\\tcatAssess.addQuery('category', record.sys_id);\\n\\t\\tcatAssess.query();\\n\\t\\twhile(catAssess.next()) {\\n\\t\\t\\tnew AssessmentUtils().createStakeholders(/*categoryUserSys*/catUser.sys_id, catAssess.assessment_record);\\n\\t\\t}\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.create_stakeholders == true\",\n\t\"name\": \"Auto stakeholder creation \"\n}```"}
{"prompt":"{\"prompt\":\"Prevent page route modification for MESP\",\"table\":\"sp_page_route_map\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sp_page_route_map\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Mobile Employee Service Portal configurations are required for the Mobile Native Application and cannot be modified.\\\"));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.portals.toString().indexOf(\\\"26f2fffb77322300454792718a1061e5\\\") > -1 || previous.portals.toString().indexOf(\\\"26f2fffb77322300454792718a1061e5\\\") > -1\",\n\t\"name\": \"Prevent page route modification for MESP\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Playbook Config Max Form Fields\",\"table\":\"sys_playbook_experience_configuration\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"false\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_playbook_experience_configuration\",\n\t\"advanced\": \"false\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"max_form_fields_on_card<0^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate Playbook Config Max Form Fields\"\n}```"}
{"prompt":"{\"prompt\":\"Validate return url\",\"table\":\"asmt_metric_type\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_metric_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.url != '' && !(current.url.charAt(0) == '.' && current.url.charAt(1) == '/') && current.url.charAt(0) != '/') {\\n\\tgs.addErrorMessage(gs.getMessage('This URL must be in the same domain as the instance and must be preceded by a ./ or a /.'));\\n\\t\\tcurrent.url.setError('This URL must be in the same domain as the instance and must be preceded by a ./ or a /.');\\n\\t\\tcurrent.setAbortAction(true);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"urlVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate return url\"\n}```"}
{"prompt":"{\"prompt\":\"Store param onLoad\",\"table\":\"cmn_schedule_span\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmn_schedule_span\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tg_scratchpad.scheduleTimezone = current.schedule.time_zone;\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Store param onLoad\"\n}```"}
{"prompt":"{\"prompt\":\"Generic OID Prevention\",\"table\":\"discovery_snmp_oid\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"discovery_snmp_oid\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar msgArray = new Array();\\n\\tvar blockedOIDArr = new Array();\\n\\tvar netSNMPOID = {oid: \\\"1.3.6.1.4.1.8072.3.2.\\\", kbLink: \\\"<a class=\\\\\\\"linked\\\\\\\" target=\\\\\\\"_blank\\\\\\\" href='https://hi.service-now.com/nav_to.do?uri=%2Fkb_view.do%3Fsysparm_article%3DKB0751287%26sysparm_stack%3D%26sysparm_view%3D'>KB0751287</a>\\\"};\\n\\tvar windowsOID = {oid: \\\"1.3.6.1.4.1.311.1.1.3.\\\", kbLink: \\\"<a class=\\\\\\\"linked\\\\\\\" target=\\\\\\\"_blank\\\\\\\" href='https://hi.service-now.com/nav_to.do?uri=%2Fkb_view.do%3Fsysparm_article%3DKB0827329%26sysparm_stack%3D%26sysparm_view%3D'>KB0827329</a>\\\"};\\n\\tblockedOIDArr.push(netSNMPOID);\\n\\tblockedOIDArr.push(windowsOID);\\n\\t\\n\\tvar oidData = (function() {\\n\\t\\tfor (var i = 0; i < blockedOIDArr.length; i++) \\n\\t\\t\\tif (current.oid.startsWith(blockedOIDArr[i].oid))\\n\\t\\t\\t\\treturn blockedOIDArr[i];\\n\\t})();\\n\\t\\n\\tmsgArray.push('\\\"' + oidData.oid + '\\\"');\\n\\tmsgArray.push(oidData.kbLink);\\n\\tvar message = gs.getMessage(\\\"SNMP OIDs starting with {0} are prevented from inserting.\\\\nFor more information please see {1}.\\\", msgArray);\\n\\tgs.addInfoMessage(message);\\n\\tcurrent.setAbortAction(true);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"oidSTARTSWITH1.3.6.1.4.1.8072.3.2.^ORoidSTARTSWITH1.3.6.1.4.1.311.1.1.3.^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Generic OID Prevention\"\n}```"}
{"prompt":"{\"prompt\":\"Get state model and new flag\",\"table\":\"change_request\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tg_scratchpad.stateModel = new ChangeRequestStateHandler().getStateModel(current);\\n\\tg_scratchpad.isNew = new ChangeRequest(current).isNew();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"chg_modelISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Get state model and new flag\"\n}```"}
{"prompt":"{\"prompt\":\"CleanupCoverRecords\",\"table\":\"cmn_rota_roster\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmn_rota_roster\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (JSUtil.nil(current.sys_id))\\n\\t\\treturn;\\n\\tvar gr = new GlideRecord(\\\"roster_schedule_span\\\");\\n\\tgr.addQuery(\\\"roster\\\", current.sys_id);\\n\\tgr.query();\\n\\tgr.deleteMultiple();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"CleanupCoverRecords\"\n}```"}
{"prompt":"{\"prompt\":\"Create Recurring Clones\",\"table\":\"clone_instance\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"clone_instance\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tcurrent.recurring = true;\\n\\tInstanceCloneUtil.generateRecurringClones(current);\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"clone_frequency!=^state=Requested^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Create Recurring Clones\"\n}```"}
{"prompt":"{\"prompt\":\"Reserve prefix for system properties\",\"table\":\"sys_cs_custom_adapter_property\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cs_custom_adapter_property\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar abortAction = false;\\n\\t\\tif (!gs.hasRole('maint')) {\\n\\t\\t\\t\\tif (current.operation() == 'update') {\\n\\t\\t\\t\\t\\t\\tif (previous.name.startsWith(\\\"sys_\\\")) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (current.name != previous.name)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tabortAction = true;\\n\\t\\t\\t\\t\\t\\t} else if (current.name.startsWith(\\\"sys_\\\")) {\\n\\t\\t\\t\\t\\t\\t\\t\\tabortAction = true;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t} else if (current.operation() == 'delete' && current.name.startsWith(\\\"sys_\\\")) {\\n\\t\\t\\t\\t\\t\\tabortAction = true;\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (abortAction) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Prefix sys_ is reserved for system properties.\\\"));\\n\\t\\t\\t\\tcurrent.setAbortAction(abortAction);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Reserve prefix for system properties\"\n}```"}
{"prompt":"{\"prompt\":\"Restrict same contributing indicator\",\"table\":\"sn_sd_contributing_indicator_registry\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_sd_contributing_indicator_registry\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar target = new GlideRecord(\\\"sn_sd_contributing_indicator_registry\\\");\\n\\t\\ttarget.addQuery(\\\"primary_kpi\\\", current.primary_kpi);\\n\\t\\ttarget.addQuery(\\\"contributing_indicator\\\", current.contributing_indicator);\\n\\t\\ttarget.query();\\n\\t\\tif (target.next()) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"The contributing indicator is already mapped to same primary indicator.\\\"));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Restrict same contributing indicator\"\n}```"}
{"prompt":"{\"prompt\":\"Deposit validation\",\"table\":\"sn_hr_core_direct_deposit\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_direct_deposit\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar gr = {};\\n\\t\\tgr.sys_id = current.getUniqueValue();\\n\\t\\tgr.employee = current.getValue('employee');\\n\\t\\tgr.employee_name = current.getDisplayValue('employee');\\n\\t\\tgr.deposit_type = current.getValue('deposit_type');\\n\\t\\tgr.deposit_percentage = current.getValue('deposit_percentage');\\n\\t\\tgr.deposit_amount = current.deposit_amount.getCurrencyValue();\\n\\t\\tgr.active = current.getValue('active');\\n\\t\\t\\n\\tvar message = new hr_CaseAjax().directDepositValidation(new global.JSON().encode(gr));\\n\\tmessage = JSON.parse(message);\\n\\tif (message == true) {\\n\\t\\tif (current.deposit_type != 'amount')\\n\\t\\t\\tcurrent.deposit_amount = '';\\n\\t\\tif (current.deposit_type != 'percentage')\\n\\t\\t\\tcurrent.deposit_percentage = '';\\n\\t\\treturn true;\\n\\t}\\n\\tif (message == 'conflict')\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"This deposit instruction conflicts with the exisitng direct deposit settings.\\\"));\\n\\telse\\n\\t\\tgs.addErrorMessage(message);\\n\\t\\t\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Invalid update\\\"));\\n\\tcurrent.setAbortAction(true);\\n\\t})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"deposit_typeVALCHANGES^ORdeposit_percentageVALCHANGES^ORdeposit_amountVALCHANGESjavascript:getCurrencyFilter('sn_hr_core_direct_deposit','deposit_amount', 'USD;USD')^ORactiveCHANGESTOtrue^EQ\",\n\t\"condition\": \"(current.operation() == 'insert' || current.operation() == 'update') && current.active\",\n\t\"name\": \"Deposit validation\"\n}```"}
{"prompt":"{\"prompt\":\"Update Domain\",\"table\":\"service_availability\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"service_availability\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tcurrent.sys_domain = current.service_offering ? current.service_offering.sys_domain : current.cmdb_ci.sys_domain;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"service_offeringISNOTEMPTY^ORcmdb_ciISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Update Domain\"\n}```"}
{"prompt":"{\"prompt\":\"Process SLAs\",\"table\":\"task\",\"when\":\"async\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"101\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// Look for new SLAs that must be started, then process active SLAs for this task\\n// NB. Two copies of this asynch business rule could be running concurrently\\n//\\t\\t Make sure that any BRs that call gs.flushWorkflow() are ordered to run before this\\n\\nlookForNewSLAs();\\nprocessExistingSLAs();\\n\\n// Finds potentially relevant SLAs\\nfunction lookForNewSLAs() {\\n\\t if (useContract()) {\\n\\t\\t\\trunContractSLAs();\\n\\t\\t\\treturn;\\n\\t }\\n\\n\\t // process SLA Definitions\\n\\t var sla = new GlideRecord('contract_sla');\\n\\t sla.addActiveQuery();\\n\\t sla.addQuery('collection', current.getRecordClassName());\\n\\t if (sla.isValidField(\\\"sys_class_name\\\"))\\n\\t\\t\\tsla.addQuery(\\\"sys_class_name\\\", \\\"contract_sla\\\");\\n\\t sla.query();\\n\\t while (sla.next())\\n\\t\\t\\tprocessNewSLA(sla);\\n\\n\\t // process Service Offering-specific SLA Definitions\\n\\t if (current.cmdb_ci.sys_class_name + '' !== \\\"service_offering\\\")\\n\\t\\t\\treturn;\\n\\n\\t var soc = new GlideRecord(\\\"service_offering_commitment\\\");\\n\\t if (!soc.isValid())\\n\\t\\t\\treturn;\\n\\n\\t soc.addQuery(\\\"service_offering\\\", current.cmdb_ci);\\n\\t soc.addQuery(\\\"service_commitment.type\\\", \\\"SLA\\\");\\n\\t soc.addNotNullQuery(\\\"service_commitment.sla\\\");\\n\\t soc.query();\\n\\t while (soc.next()) {\\n\\t\\t\\tif (sla.get(soc.service_commitment.sla) && sla.collection + '' === current.getRecordClassName() && Boolean(sla.active) === true)\\n\\t\\t\\t\\t processNewSLA(sla);\\n\\t }\\n}\\n\\nfunction useContract() {\\n\\t var contractTables = gs.getProperty('com.snc.sla.contract.tables', '');\\n\\t var arr = contractTables.replaceAll(\\\" \\\", \\\"\\\").split(\\\",\\\");\\n\\t return new ArrayUtil().contains(arr, current.getRecordClassName());\\n}\\n\\nfunction runContractSLAs() {\\n\\t var contractRelSLA = new GlideRecord('contract_rel_contract_sla');\\n\\t contractRelSLA.addQuery('contract', current.contract);\\n\\t contractRelSLA.addQuery('contract_sla.collection', current.sys_class_name);\\n\\t contractRelSLA.addQuery('contract_sla.active', 'true');\\n\\t contractRelSLA.query();\\n\\t while (contractRelSLA.next())\\n\\t\\t\\tprocessNewSLA(contractRelSLA.contract_sla);\\n}\\n\\nfunction processNewSLA(sla) {\\n\\t // If start condition matches this task and stop condition doesn't,\\n\\t // create task_sla if there isn't one\\n\\t if (!sla.start_condition)\\n\\t\\t\\treturn;\\n\\n\\t var startConditionMatches = GlideFilter.checkRecord(current, sla.start_condition);\\n\\t if (!startConditionMatches)\\n\\t\\t\\treturn;\\n\\n\\t var stopConditionMatches = GlideFilter.checkRecord(current, sla.stop_condition);\\n\\t if (sla.stop_condition && stopConditionMatches)\\n\\t\\t\\treturn;\\n\\n\\t var taskSLA = new GlideRecord('task_sla');\\n\\t taskSLA.addActiveQuery();\\n\\t taskSLA.addQuery('task', current.sys_id);\\n\\t taskSLA.addQuery('sla', sla.sys_id);\\n\\t taskSLA.setLimit(1);\\n\\t taskSLA.query();\\n\\t if (taskSLA.hasNext())\\n\\t\\t\\treturn;\\n\\n\\t insertTaskSLA(sla);\\n}\\n\\nfunction insertTaskSLA(sla) {\\n\\t // Get preferences for where to get time zone and schedule\\n\\t var schSource = sla.schedule_source + '';\\n\\t var tzSource = sla.timezone_source + '';\\n\\n\\t var newTaskSLA = new GlideRecord('task_sla');\\n\\t newTaskSLA.task = current.sys_id;\\n\\t newTaskSLA.sla = sla.sys_id;\\n\\t newTaskSLA.start_time = current.sys_updated_on;\\n\\t var scheduleId = SLASchedule.source(schSource, newTaskSLA);\\n\\t if (scheduleId)\\n\\t\\tnewTaskSLA.schedule = scheduleId;\\n\\t newTaskSLA.timezone = SLATimezone.source(tzSource, newTaskSLA);\\n\\t // explicitly use system timezone, if the above property points to an empty/null value\\n\\t if (!newTaskSLA.timezone)\\n\\t\\t\\tnewTaskSLA.timezone = gs.getSysTimeZone();\\n\\t newTaskSLA.start_time = Boolean(sla.retroactive) === true ? current[sla.set_start_to] : current.sys_updated_on;\\n\\t newTaskSLA.insert();\\n}\\n\\nfunction processExistingSLAs() {\\n\\t // Iterate through this task's active SLAs to determine necessary action\\n\\t var taskSLA = new GlideRecord('task_sla');\\n\\t taskSLA.addQuery('task', current.sys_id);\\n\\t taskSLA.addActiveQuery();\\n\\t taskSLA.query();\\n\\t while (taskSLA.next()) {\\n\\t\\t\\t// Do the pause and resume checks\\n\\t\\t\\tif (taskSLA.sla.pause_condition) {\\n\\t\\t\\t\\t var pauseConditionMatches = GlideFilter.checkRecord(current, taskSLA.sla.pause_condition);\\n\\t\\t\\t\\t if (taskSLA.stage + '' !== 'paused' && pauseConditionMatches) {\\n\\t\\t\\t\\t\\t\\t// If pause condition matches this task, pause the SLA\\n\\t\\t\\t\\t\\t\\ttaskSLA.stage = 'paused';\\n\\t\\t\\t\\t\\t\\ttaskSLA.update();\\n\\t\\t\\t\\t } else if (taskSLA.stage + '' === 'paused' && !pauseConditionMatches) {\\n\\t\\t\\t\\t\\t\\t// If pause condition no longer matches this task, resume the SLA\\n\\t\\t\\t\\t\\t\\ttaskSLA.stage = 'in_progress';\\n\\t\\t\\t\\t\\t\\ttaskSLA.update();\\n\\t\\t\\t\\t }\\n\\t\\t\\t}\\n\\n\\t\\t\\t//Do the stop check\\n\\t\\t\\tif (taskSLA.sla.stop_condition) {\\n\\t\\t\\t\\t var stopConditionMatches = GlideFilter.checkRecord(current, taskSLA.sla.stop_condition);\\n\\t\\t\\t\\t if (stopConditionMatches) {\\n\\t\\t\\t\\t\\t\\t// If stop condition matches this task, stop the SLA\\n\\t\\t\\t\\t\\t\\ttaskSLA.active = false;\\n\\t\\t\\t\\t\\t\\ttaskSLA.end_time = current.sys_updated_on;\\n\\t\\t\\t\\t\\t\\ttaskSLA.update();\\n\\t\\t\\t\\t } else {\\n\\t\\t\\t\\t\\t\\t// Not stopping, so do the cancel check\\n\\t\\t\\t\\t\\t\\tvar startConditionMatches = GlideFilter.checkRecord(current, taskSLA.sla.start_condition);\\n\\t\\t\\t\\t\\t\\tif (!startConditionMatches || cancelServiceOfferingSLA(taskSLA)) {\\n\\t\\t\\t\\t\\t\\t\\t // If the start condition no longer applies, cancel the SLA\\n\\t\\t\\t\\t\\t\\t\\t // If service offering-specific SLA longer relevant, cancel the SLA\\n\\t\\t\\t\\t\\t\\t\\t taskSLA.active = false;\\n\\t\\t\\t\\t\\t\\t\\t taskSLA.end_time = current.sys_updated_on;\\n\\t\\t\\t\\t\\t\\t\\t taskSLA.stage = 'cancelled';\\n\\t\\t\\t\\t\\t\\t\\t taskSLA.update();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t }\\n\\t\\t\\t}\\n\\t }\\n}\\n\\nfunction cancelServiceOfferingSLA(taskSLA) {\\n\\t var soc = new GlideRecord(\\\"service_offering_commitment\\\");\\n\\t if (!soc.isValid())\\n\\t\\t\\treturn false;\\n\\n\\t if (taskSLA.sla.sys_class_name + '' !== \\\"service_offering_sla\\\")\\n\\t\\t\\treturn false;\\n\\n\\t soc.addQuery(\\\"service_commitment.type\\\", \\\"SLA\\\");\\n\\t soc.addQuery(\\\"service_commitment.sla\\\", taskSLA.sla);\\n\\t soc.addQuery(\\\"service_offering\\\", current.cmdb_ci);\\n\\t soc.query();\\n\\t if (soc.hasNext())\\n\\t\\t\\treturn false;\\n\\n\\t gs.print(\\\"canceling Service Offering SLA: \\\" + taskSLA.sla.name + \\\" - task is now against different CI\\\");\\n\\t return true;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(gs.getProperty('com.snc.sla.engine.version','2010') === '2010')\",\n\t\"name\": \"Process SLAs\"\n}```"}
{"prompt":"{\"prompt\":\"Create CI on insert\",\"table\":\"alm_asset\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"alm_asset\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"1000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"try {\\n\\t(new AssetandCI()).createCI(current);\\n} catch (err) {\\n\\tgs.addErrorMessage(err);\\n\\tcurrent.setAbortAction(true);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"global.AssetandCI.canCreateCIForAsset(current)\",\n\t\"name\": \"Create CI on insert\"\n}```"}
{"prompt":"{\"prompt\":\"ECC Queue - mark outputs state\",\"table\":\"ecc_queue\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_queue\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function () {\\n\\tvar tag_pattern = \\\"/<sys_id(.*?)>(.*?)<\\\\/sys_id>/\\\";\\n\\tvar state_pattern = \\\"/\\\\s*state\\\\s*=\\\\s*\\\\\\\"(.*?)\\\\\\\"/\\\";\\n\\tvar reason_pattern = \\\"/\\\\s*reason\\\\s*=\\\\s*\\\\\\\"(.*?)\\\\\\\"/\\\";\\n\\tvar regex = new SNC.Regex(tag_pattern);\\n\\tvar state_regex = new SNC.Regex(state_pattern);\\n\\tvar reason_regex = new SNC.Regex(reason_pattern);\\n\\tvar match = regex.match(current.payload);\\n\\twhile (match) {\\n\\t\\tvar attributes = match[1];\\n\\t\\tvar id = match[2];\\n\\t\\tvar state = 'processing', reason = null;\\n\\t\\tvar state_match = state_regex.match(attributes);\\n\\t\\tif (state_match && state_match[1])\\n\\t\\t\\tstate = state_match[1];\\n\\t\\t\\n\\t\\tvar reason_match = reason_regex.match(attributes);\\n\\t\\tif (reason_match && reason_match[1])\\n\\t\\t\\treason = reason_match[1];\\n\\n\\t\\tmarkComplete(id, state, reason);\\n\\t\\tmatch = regex.match();\\n\\t}\\n})();\\ncurrent.state = 'processed';\\ncurrent.processed = gs.nowDateTime();\\n\\nfunction markComplete(id, state, reason) {\\n\\tvar tableName = 'ecc_queue';\\n\\tvar gr = new GlideRecord(tableName);\\n\\tif (!gr.get(id))\\n\\t\\treturn;\\n\\n\\tif (state == 'processing') {\\n\\t\\t// get the real rotated table name: mutli-update does not take care of table rotation\\n\\t\\tvar sys_table_name = gr.getValue('sys_table_name');\\n\\t\\t// if table is not rotated, use the original table name\\n\\t\\tif (JSUtil.nil(sys_table_name))\\n\\t\\t\\tsys_table_name = tableName;\\n\\n\\t\\t// use multi-update to perform atomic update with a where clause to avoid race condition\\n\\t\\tvar mu = GlideMultipleUpdate(sys_table_name);\\n\\t\\tmu.addQuery('sys_id', id);\\n\\t\\tmu.addQuery('state', 'ready');\\n\\t\\tmu.setValue('state', state);\\n\\t\\tif (reason)\\n\\t\\t\\tmu.setValue('error_string', reason);\\n\\n\\t\\t// When setting the 'processed' field using GlideMultipleUpdate.setValue(String)\\n\\t\\t// with gs.nowDateTime() will not work correctly.\\n\\t\\t// We need to provide now as a UTC value because when the String provided to\\n\\t\\t// GlideMultipleUpdate.setValue(String) gets parsed it will be interpreted it as UTC.\\n\\t\\tmu.setValue('processed', gs.nowNoTZ());\\n\\t\\tmu.execute();\\n\\t} else {\\n\\t\\tgr.state = state;\\n\\t\\tif (reason)\\n\\t\\t\\tgr.error_string = reason;\\n\\n\\t\\tgr.processed = gs.nowDateTime();\\n\\t\\tgr.update();\\n\\t}\\n}\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.topic == \\\"queue.processing\\\"\",\n\t\"name\": \"ECC Queue - mark outputs state\"\n}```"}
{"prompt":"{\"prompt\":\"Set Related Lists To Scratchpad\",\"table\":\"sys_app\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_app\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// If navigate to existing app editor form then set the appId and its its related tables to the scratchpad\\n// If create app form then set the appId on the scratchpad to nil\\nvar lists = [];\\n// get the related list entries on this page\\nvar relatedList = new GlideRecord('sys_ui_related_list_entry');\\nrelatedList.addQuery('list_id.name', current.getTableName());\\nrelatedList.query();\\nwhile(relatedList.next())\\n\\t\\tlists.push(relatedList.related_list.toString());\\n\\n// add related lists and current app id to scratchpad\\ng_scratchpad.app_related_lists = {\\n\\t\\tappId: !current.isNewRecord() ? current.sys_id.toString() : \\\"\\\",\\n\\t\\tlists: lists\\n};\\n\\n//Need to know if related lists are deferred or not\\ng_scratchpad.deferred_list = gs.getProperty('glide.ui.defer_related_lists');\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set Related Lists To Scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"Clean cache on config update\",\"table\":\"agent_schedule_task_config\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"agent_schedule_task_config\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tgs.cacheFlush();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Clean cache on config update\"\n}```"}
{"prompt":"{\"prompt\":\"ECC Queue - mark outputs processed\",\"table\":\"ecc_queue\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_queue\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"90\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/*\\n *\\tWhen an input record comes in, it checks for the corresponding output record and sets the processed to \\\"processed\\\". \\n *\\tIn Discovery, this basically means we set the probe to processed when MID Server sent back the result payload for sensor processing.\\n */\\n\\nsetProbeProcessed(current.getValue('response_to'));\\n\\nfunction setProbeProcessed(sys_id) {\\n\\t\\tif (!sys_id)\\n\\t\\t\\t\\treturn;\\n\\t\\tvar gr = new GlideRecord('ecc_queue');\\n\\t\\tif (!gr.get(sys_id))\\n\\t\\t\\t\\treturn;\\n\\t\\tgr.state = 'processed';\\n\\t\\tgr.update();\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.agent.startsWith(\\\"mid.server.\\\") && current.queue == \\\"input\\\" && current.state != \\\"processed\\\" && !current.topic.startsWith(\\\"queue.\\\") && current.topic !=\\\"config.file\\\"\",\n\t\"name\": \"ECC Queue - mark outputs processed\"\n}```"}
{"prompt":"{\"prompt\":\"Set Upgrade Plan name on form load\",\"table\":\"sys_upgrade_plan_item\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_upgrade_plan_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar releaseVersion = GlidePropertiesDB.get('glide.war');\\n\\tvar upgradePlan = new GlideRecord('sys_upgrade_plan');\\n\\tif (upgradePlan.get('target_version', releaseVersion))\\n\\t\\tcurrent.upgrade_plan = upgradePlan.getUniqueValue();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"upgrade_planISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Set Upgrade Plan name on form load\"\n}```"}
{"prompt":"{\"prompt\":\"Value of X Y should be between 0 and 1\",\"table\":\"sn_diagram_builder_spot\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"false\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_diagram_builder_spot\",\n\t\"advanced\": \"false\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"x<0^ORx>1^ORy<0^ORy>1^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Value of X Y should be between 0 and 1\"\n}```"}
{"prompt":"{\"prompt\":\"Interaction Wrap Up Timeout\",\"table\":\"interaction\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"interaction\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tvar duration = new WrapUpInteractionUtil().getWrapUpDuration(current);\\n\\t\\tif (duration != -1) {\\n\\t\\tvar interaction = sn_interaction.Interaction.getInteraction(current);\\n\\t\\tinteraction.scheduleWrapupTimeout(duration);\\n\\t\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"stateCHANGESTOwrap_up^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Interaction Wrap Up Timeout\"\n}```"}
{"prompt":"{\"prompt\":\"Ensure default is true for 1 rec always \",\"table\":\"help_content\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"help_content\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar msg;\\n\\tvar gr = new GlideRecord(\\\"help_content\\\");\\n\\t\\tgr.addQuery(\\\"guidance_step\\\", current.guidance_step);\\n\\t\\tgr.addQuery(\\\"default_content\\\", \\\"1\\\");\\n\\t\\tgr.query();\\n\\t\\t\\n\\t\\tif(gr.getRowCount() == 1) {\\n\\t\\t\\tmsg = gs.getMessage(\\\"Cannot change default content to false, please create or update a different content record and set it as default\\\");\\n\\t\\t\\tgs.addErrorMessage(msg);\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.default_content == false && current.default_content.changes()\",\n\t\"name\": \"Ensure default is true for 1 rec always \"\n}```"}
{"prompt":"{\"prompt\":\"Delete Referencing Rows\",\"table\":\"sys_app_template\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_app_template\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function deleteReferenceRecords(current, previous) {\\n\\t\\tvar recordTables = [{\\n\\t\\t\\t\\t\\t\\ttableName: 'sys_app_template_manifest',\\n\\t\\t\\t\\t\\t\\tcolumnName: 'template'\\n\\t\\t\\t\\t}\\n\\t\\t];\\n\\n\\t// If the delete action is aborted by some other script, then do not delete the records.\\n\\t\\tif (!gs.nil(current) && !current.isActionAborted()) {\\n\\t\\t\\t\\tvar templateSysId = current.getValue(\\\"sys_id\\\");\\n\\t\\t\\t\\trecordTables.forEach(function(recordTable) {\\n\\t\\t\\t\\t\\t\\tvar records = new GlideRecord(recordTable.tableName);\\n\\t\\t\\t\\t\\t\\trecords.addQuery(recordTable.columnName, templateSysId);\\n\\t\\t\\t\\t\\t\\trecords.query();\\n\\n\\t\\t\\t\\t\\t\\tif (records.hasNext()) {\\n\\t\\t\\t\\t\\t\\t\\t\\trecords.deleteMultiple();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t});\\n\\n\\t\\t\\t\\tvar templateMappingGR = new GlideRecord('sys_app_flow_template_mapping');\\n\\t\\t\\t\\ttemplateMappingGR.addQuery('template', templateSysId);\\n\\t\\t\\t\\ttemplateMappingGR.query();\\n\\t\\t\\t\\tif(templateMappingGR.next()) {\\n\\t\\t\\t\\t\\t\\tvar flowTemplateSysId = templateMappingGR.getValue('flow');\\n\\t\\t\\t\\t\\t\\tvar query =\\t'sys_id=' + flowTemplateSysId;\\n\\t\\t\\tvar flowRecord = new GlideRecord('sys_hub_flow');\\n\\t\\t\\tflowRecord.addEncodedQuery(query);\\n\\t\\t\\tflowRecord.query();\\n\\t\\t\\tif (flowRecord.hasNext()) {\\n\\t\\t\\t\\tflowRecord.deleteMultiple();\\n\\t\\t\\t}\\t\\t\\t\\n\\t\\t\\t\\t}\\n\\t\\t\\n\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.isActionAborted()\",\n\t\"name\": \"Delete Referencing Rows\"\n}```"}
{"prompt":"{\"prompt\":\"Restrict update priority to None\",\"table\":\"upgrade_history_task\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"upgrade_history_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar message = gs.getMessage(\\\"None is not a valid selection for Priority.\\\");\\n\\tgs.addErrorMessage(message);\\n\\tcurrent.setAbortAction(true);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"priorityVALCHANGES^EQ\",\n\t\"condition\": \"!current.priority\",\n\t\"name\": \"Restrict update priority to None\"\n}```"}
{"prompt":"{\"prompt\":\"Populate Assignment Group based on CI/SO\",\"table\":\"task\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\t/*\\n\\t\\tThis business rule will get executed for incident/problem/change on insert and update, if Assignment Group is empty and CI/ServiceOffering changing from empty value.\\n\\t\\t*/\\n\\n\\t\\tvar assignmentGroupFieldName = '';\\n\\t\\tif (current.sys_class_name + '' == 'change_request') {\\n\\t\\t\\t\\tassignmentGroupFieldName = 'assignment_group';\\n\\t\\t} else if (current.sys_class_name + '' == 'incident' || current.sys_class_name + '' == 'problem') {\\n\\t\\t\\t\\tassignmentGroupFieldName = 'support_group';\\n\\t\\t}\\n\\n\\t\\tif (!gs.nil(current.cmdb_ci) && current.cmdb_ci.changesFrom('')) {\\n\\t\\t\\t\\tassignmentGroupFieldName = populateAssignmentGroupFieldName(current.sys_class_name + '', 'ci') || assignmentGroupFieldName;\\n\\t\\t\\t\\tcurrent.assignment_group = current.cmdb_ci[assignmentGroupFieldName];\\n\\t\\t}\\n\\n\\t\\tif (gs.nil(current.assignment_group) && !gs.nil(current.service_offering) && current.service_offering.changesFrom('')) {\\n\\t\\t\\t\\tassignmentGroupFieldName = populateAssignmentGroupFieldName(current.sys_class_name + '', 'service_offering') || assignmentGroupFieldName;\\n\\t\\t\\t\\tcurrent.assignment_group = current.service_offering[assignmentGroupFieldName];\\n\\t\\t}\\n})(current, previous);\\n\\nfunction populateAssignmentGroupFieldName(className, fieldName) {\\n\\t\\t// Populate CI and Service Offering field names from properties that will be used to populate current task assignment group\\n\\t\\treturn GlideApplicationProperty.getValue('com.snc.' + className + '.' + fieldName + '_assignment_group.field_name');\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"sys_class_name=incident^ORsys_class_name=problem^ORsys_class_name=change_request^assignment_groupISEMPTY^cmdb_ciCHANGESFROM^ORservice_offeringCHANGESFROM^assigned_toISEMPTY^EQ\",\n\t\"condition\": \"!(current.sys_class_name + '' === 'change_request' && current.unauthorized == true)\",\n\t\"name\": \"Populate Assignment Group based on CI/SO\"\n}```"}
{"prompt":"{\"prompt\":\"Only one filter per group type\",\"table\":\"sa_agg_alert_filter\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sa_agg_alert_filter\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\n\\tif(current.getValue(\\\"cmdb\\\")== true)\\n\\t\\tisTypeExists(\\\"cmdb\\\", gs.getMessage(\\\"CMDB\\\"));\\n\\tif(current.getValue(\\\"aggregated\\\") == true)\\n\\t\\tisTypeExists(\\\"aggregated\\\", gs.getMessage(\\\"Aggregated\\\"));\\n\\tif(current.getValue(\\\"automated\\\") == true)\\n\\t\\tisTypeExists(\\\"automated\\\",gs.getMessage(\\\"Automated\\\"));\\n\\tif(current.getValue(\\\"text\\\") == true)\\n\\t\\tisTypeExists(\\\"text\\\",gs.getMessage(\\\"Text\\\"));\\n\\t\\n\\t\\n\\tfunction isTypeExists(type, typeName){\\n\\t\\tvar gr = new GlideRecord(\\\"sa_agg_alert_filter\\\");\\n\\t\\tgr.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.getUniqueValue());\\n\\t\\tgr.addActiveQuery();\\n\\t\\tgr.addQuery(type, true);\\n\\t\\tgr.setLimit(1);\\n\\t\\tgr.query();\\n\\n\\t\\tif (gr.hasNext()) {\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"A filter was already defined for group type: {0}, only one filter can be applied to a group type. The filter is being changed to non-active\\\",typeName));\\n\\t\\t\\tcurrent.setValue('active', false);\\n\\t\\t}\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"active=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Only one filter per group type\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent deletion of in use Records\",\"table\":\"trigger_rule_table_cfg\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"trigger_rule_table_cfg\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\tvar triggerRuleGr = new GlideRecord(\\\"trigger_rule\\\");\\n\\ttriggerRuleGr.addQuery(\\\"trigger_rule_table_cfg\\\", current.getUniqueValue());\\n\\ttriggerRuleGr.setLimit(1);\\n\\ttriggerRuleGr.query();\\n\\n\\tif (triggerRuleGr.next()) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Trigger rule table config is referenced by a trigger rule and cannot be deleted\\\"));\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent deletion of in use Records\"\n}```"}
{"prompt":"{\"prompt\":\"Check form screen configuration\",\"table\":\"sys_sg_form_segment\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_form_segment\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /* null when async */) {\\n\\tvar dynamicMode = 'dynamic';\\n\\tvar formSegmentTable = 'sys_sg_form_segment';\\n\\tvar dynamicFormSegmentTable = 'sys_sg_dynamic_form_segment';\\n\\tvar formScreenColumnName = 'form';\\n\\tvar dynamicSegmentProtection = new DynamicSegmentProtection();\\n\\n\\tif (current.sys_class_name == dynamicFormSegmentTable)\\n\\t\\treturn;\\n\\n\\tvar mode = dynamicSegmentProtection.defineConfigurationMode(current.sys_class_name, current.form);\\n\\tif (mode == dynamicMode)\\n\\t\\tcheckConfiguration(current);\\n\\n\\tfunction checkConfiguration(segmentRecord) {\\n\\t\\tvar orderColumn = 'order';\\n\\t\\tvar formSegmentGR = new GlideRecord(formSegmentTable);\\n\\t\\tformSegmentGR.addQuery(formScreenColumnName, segmentRecord.form);\\n\\t\\tformSegmentGR.orderBy(orderColumn);\\n\\t\\tformSegmentGR.query();\\n\\t\\tvar index = 0;\\n\\t\\tvar checkSegmentOrder = segmentRecord.order;\\n\\t\\twhile (formSegmentGR.next()) {\\n\\t\\t\\tif ((segmentRecord.sys_id == formSegmentGR.sys_id) || (checkSegmentOrder < formSegmentGR.order))\\n\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\tindex++;\\n\\t\\t}\\n\\n\\t\\tvar isSuccessful = dynamicSegmentProtection.checkStaticSegment(segmentRecord, index, '');\\n\\t\\tif (!isSuccessful)\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Check form screen configuration\"\n}```"}
{"prompt":"{\"prompt\":\"ISC : Delete User Report Configuration\",\"table\":\"sys_report\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_report\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar report_user = new GlideRecordSecure('appsec_isc_event_configuration');\\n\\treport_user.addQuery('report', current.sys_id);\\n\\treport_user.query();\\n\\treport_user.deleteMultiple();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"type=single_score^roles=security_dashboard_user^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"ISC : Delete User Report Configuration\"\n}```"}
{"prompt":"{\"prompt\":\"Copy Incident State to State\",\"table\":\"incident\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"false\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"incident\",\n\t\"advanced\": \"false\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"1000000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"incident_stateVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Copy Incident State to State\"\n}```"}
{"prompt":"{\"prompt\":\"Archive Related - Create archive table\",\"table\":\"sys_archive_related\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_archive_related\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"300\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// ArchiveTable creates new tables and maps if needed\\nvar relatedRule = new GlideRecord('sys_archive');\\nrelatedRule.addQuery('table', current.table);\\nrelatedRule.query();\\nif (relatedRule.next()) {\\n\\t\\t//This related record table has a rule associated, use it's retention policy\\n\\t\\tnew GlideArchiveTable().create(current.table, relatedRule.retain_references);\\n} else {\\n\\t\\t//Use the current rule's retention policy\\n\\t\\tvar gr = new GlideRecord('sys_archive');\\n\\t\\tif (gr.get(current.archive_map)) {\\n\\t\\t\\t new GlideArchiveTable().create(current.table, gr.retain_references);\\n\\t\\t} else {\\n\\t\\t\\t\\tnew GlideArchiveTable().create(current.table);\\n\\t\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"actionCHANGESTOarchive^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Archive Related - Create archive table\"\n}```"}
{"prompt":"{\"prompt\":\"Suggest name for new suite schedule\",\"table\":\"sys_atf_schedule\",\"when\":\"before_display\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_atf_schedule\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tcurrent.name = 'My New Schedule';\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.isNewRecord() && current.canRead()\",\n\t\"name\": \"Suggest name for new suite schedule\"\n}```"}
{"prompt":"{\"prompt\":\"Validate ui policy on draft item\",\"table\":\"catalog_ui_policy\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"catalog_ui_policy\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tif (JSUtil.notNil(current.sys_overrides)) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('You cannot override a record associated with this item'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn;\\n\\t}\\n\\tif (JSUtil.nil(current.sys_domain) || JSUtil.nil(current.catalog_item) || JSUtil.nil(current.catalog_item.sys_domain))\\n\\t\\treturn;\\n\\t\\n\\tvar itemDomain = current.catalog_item.sys_domain;\\n\\tvar recordDomain = current.sys_domain;\\n\\tif (!itemDomain.equals(recordDomain)) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('This record cannot be associated with this item as it\\\\'s domain is not the same as the item\\\\'s domain.'));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\treturn;\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"catalog_item.state=draft^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate ui policy on draft item\"\n}```"}
{"prompt":"{\"prompt\":\"Put Rollback Context in Scratch Pad\",\"table\":\"sys_dm_update\",\"when\":\"before_display\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_dm_update\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.state == 'complete' || current.state == 'cancelled') {\\n\\t\\tg_scratchpad.rollback_context = current.getValue(\\\"rollback_context\\\");\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Put Rollback Context in Scratch Pad\"\n}```"}
{"prompt":"{\"prompt\":\"Update Progress if Target is updated\",\"table\":\"sn_gf_goal_target\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_gf_goal_target\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\tnew TargetProgressUtil(current).updateTargetProgressWithNewTargetValue();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"target_valueVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Update Progress if Target is updated\"\n}```"}
{"prompt":"{\"prompt\":\"Set Company Name in scratchpad\",\"table\":\"ml_solution_definition\",\"when\":\"before_display\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ml_solution_definition\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"0\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tg_scratchpad.companyName = gs.getNewAppScopeCompanyPrefix();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set Company Name in scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"Check Attestation Duplicate Task CIs\",\"table\":\"sn_cmdb_ws_attestation_task_to_ci\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_cmdb_ws_attestation_task_to_ci\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar ciSysId = current.ci;\\n\\tif (!ciSysId) {\\n\\t\\tgs.error('Empty CI sys_id in attestation task to CI table');\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\tvar policyId = current.cmdb_data_management_task.policy_id;\\n\\tif (!policyId) {\\n\\t\\tgs.error('Empty policy Id in attestation task to CI table');\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\tvar gr = new GlideRecord('sn_cmdb_ws_attestation_task_to_ci');\\n\\tgr.addQuery('ci', ciSysId);\\n\\tgr.addQuery('cmdb_data_management_task.policy_id', policyId);\\n\\tgr.query();\\n\\tif (gr.next()) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.info('CI with id ' + ciSysId + ' cannot be inserted to attestation task to CI table under same attestation policy with id ' + policyId);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Check Attestation Duplicate Task CIs\"\n}```"}
{"prompt":"{\"prompt\":\"Avoid duplicate group preferences\",\"table\":\"on_call_group_preference\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"on_call_group_preference\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (!(new OnCallGrpPreferenceUtil().validateUniqueGroupInPreferences(current)))\\n\\t\\tcurrent.setAbortAction(true);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Avoid duplicate group preferences\"\n}```"}
{"prompt":"{\"prompt\":\"One stage set per table\",\"table\":\"stage_set_table\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"stage_set_table\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"\\nif (hasTableEntryAlready()) \\n\\tabortInsert();\\n\\nfunction hasTableEntryAlready() {\\n\\t\\tvar grx = new GlideRecord('stage_set_table');\\n\\treturn grx.get('table', current.table);\\t\\n}\\n\\nfunction abortInsert() {\\n\\tvar emsg = gs.getMessage('Table {0} already has a default stage set.', current.table.label);\\n\\t\\tgs.addInfoMessage(emsg);\\n\\tcurrent.table.setError(emsg);\\n\\tcurrent.setAbortAction(true);\\n}\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"One stage set per table\"\n}```"}
{"prompt":"{\"prompt\":\"Link KB to topic if translatedKB linked \",\"table\":\"kb_knowledge\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"kb_knowledge\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (GlidePluginManager.isActive('com.glideapp.knowledge.i18n2')) {\\n\\t\\t//link new translated version to topic\\n\\t\\tnew sn_ex_sp.KBContentTranslationUtil().addNewKBToTopic(current);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"parentVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Link KB to topic if translatedKB linked \"\n}```"}
{"prompt":"{\"prompt\":\"Update schedule description\",\"table\":\"sys_atf_schedule_run\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_atf_schedule_run\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t//When any schedule runs are changed, update the description of its associated schedule\\n\\tvar scheduleGR = new GlideRecord('sys_atf_schedule');\\n\\tif (!scheduleGR.get(current.schedule))\\n\\t\\treturn;\\n\\n\\tvar scheduleDescription = '';\\n\\tvar scheduleRunGR = new GlideRecord('sys_atf_schedule_run');\\n\\tscheduleRunGR.addQuery('schedule', current.schedule);\\n\\tscheduleRunGR.orderBy('order');\\n\\tscheduleRunGR.query();\\n\\tif (scheduleRunGR.hasNext())\\n\\t\\tscheduleDescription = gs.getMessage('This schedule will perform the following actions:');\\n\\n\\twhile (scheduleRunGR.next())\\n\\t\\tscheduleDescription += \\\"\\\\n\\\\n\\\" + scheduleRunGR.description;\\n\\n\\tscheduleGR.description = scheduleDescription;\\n\\tscheduleGR.update();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update schedule description\"\n}```"}
{"prompt":"{\"prompt\":\"Update contract cost per asset\",\"table\":\"clm_m2m_contract_asset\",\"when\":\"after\",\"actions\":\"cd\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"clm_m2m_contract_asset\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"this.calcCostPerAsset(current.contract);\\n\\nfunction calcCostPerAsset(contract) {\\n\\tif (contract.sys_id) {\\n\\t\\tvar gr = new GlideRecord('ast_contract');\\n\\t\\tgr.get(contract.sys_id);\\n\\t\\tif (gr.isValidRecord()) {\\n\\t\\t\\tvar assets = new GlideRecord('clm_m2m_contract_asset');\\n\\t\\t\\tassets.addQuery('contract', contract.sys_id);\\n\\t\\t\\tassets.query();\\n\\t\\t\\tvar count = 0;\\n\\t\\t\\twhile (assets.next())\\n\\t\\t\\t\\tcount++;\\n\\t\\t\\tvar average = 0;\\n\\t\\t\\tif (count > 0)\\n\\t\\t\\t\\taverage = gr.total_cost/count;\\n\\t\\t\\tgr.cost_per_unit = average;\\n\\t\\t\\tgr.update();\\n\\t\\t}\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"true\",\n\t\"name\": \"Update contract cost per asset\"\n}```"}
{"prompt":"{\"prompt\":\"Active Group contains email account\",\"table\":\"sys_email_account_group\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_email_account_group\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t\\tgs.addErrorMessage(gs.getMessage('Active Email Account Groups must contain at least one email account'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.getValue('default') == 0 && current.getValue('active') == 1 &&\\tgs.nil(current.email_accounts)\",\n\t\"name\": \"Active Group contains email account\"\n}```"}
{"prompt":"{\"prompt\":\"Add message key if missing\",\"table\":\"em_alert\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"em_alert\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"addMessageKey();\\nfunction addMessageKey(){\\n\\tcurrent.message_key = current.source + \\\"_\\\" + current.node + \\\"_\\\" + current.type.name + \\\"_\\\" + current.resource;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"message_keyISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Add message key if missing\"\n}```"}
{"prompt":"{\"prompt\":\"ITOM Licensing Exlusion Table Info Messa\",\"table\":\"itom_licensing_exclusion_metadata\",\"when\":\"before\",\"actions\":\"r\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"true\",\n\t\"collection\": \"itom_licensing_exclusion_metadata\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t\\tgs.addInfoMessage(gs.getMessage('If there are additional license counting exclusion conditions to consider, please contact ServiceNow Support.'));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"ITOM Licensing Exlusion Table Info Messa\"\n}```"}
{"prompt":"{\"prompt\":\"Save parent Opened For\",\"table\":\"sn_hr_core_task\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tg_scratchpad.parentOpenedFor = current.parent.opened_for;\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"parentISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Save parent Opened For\"\n}```"}
{"prompt":"{\"prompt\":\"Sync offline template w/ action item\",\"table\":\"sys_sg_button\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_button\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"1000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.write_back_action_item == 'NULL') {\\n\\t\\tcurrent.offline_template_field_table = 'NULL';\\n\\t\\tcurrent.offline_template_field = 'NULL';\\n\\t\\treturn;\\n\\t}\\n\\n\\tvar action_item_type = current.write_back_action_item.type;\\n\\tif (action_item_type == 'update' || action_item_type == 'new') {\\n\\t\\tcurrent.offline_template_field_table = current.write_back_action_item.table;\\n\\t\\tcurrent.offline_template_field = current.write_back_action_item.template;\\t\\t\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"offline=true^ORofflineCHANGESTOtrue^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Sync offline template w/ action item\"\n}```"}
{"prompt":"{\"prompt\":\"Caller Close\",\"table\":\"incident\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"incident\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.isValidField(\\\"close_code\\\") && current.close_code.nil())\\n\\t current.close_code = \\\"Resolved by caller\\\";\\nif (current.isValidField(\\\"close_notes\\\") && current.close_notes.nil())\\n\\t current.close_notes = gs.getMessage(\\\"Closed by Caller\\\");\\nif (current.universal_request.nil()) {\\n\\tvar link = '<a href=\\\"' + current.getLink() + '\\\">' + current.getDisplayValue() + '</a>';\\n\\tif (current.incident_state.changesTo(IncidentState.CLOSED))\\n\\t\\tgs.addInfoMessage(gs.getMessage('Incident {0} has been permanently closed', link));\\n\\telse if (current.incident_state.changesTo(IncidentState.RESOLVED))\\n\\t\\tgs.addInfoMessage(gs.getMessage('Incident {0} has been resolved', link));\\n\\telse if (current.incident_state.changesTo(IncidentState.CANCELED))\\n\\t\\tgs.addInfoMessage(gs.getMessage('Incident {0} has been canceled', link));\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.caller_id == gs.getUserID() && (current.incident_state.changesTo(IncidentState.RESOLVED) || current.incident_state.changesTo(IncidentState.CLOSED) || current.incident_state.changesTo(IncidentState.CANCELED))\",\n\t\"name\": \"Caller Close\"\n}```"}
{"prompt":"{\"prompt\":\"Ensure default is true for only 1 field\",\"table\":\"help_content\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"help_content\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar gr;\\n\\t\\n\\tif(current.operation() == \\\"delete\\\" && current.default_content) {\\n\\t\\tgr = new GlideRecord(\\\"help_content\\\");\\n\\t\\tgr.addQuery(\\\"guidance_step\\\", current.guidance_step);\\n\\t\\tgr.orderByDesc(\\\"sys_updated_on\\\");\\n\\t\\tgr.query();\\n\\t\\t\\n\\t\\tif(gr.hasNext()) {\\n\\t\\t\\tgr.next();\\n\\t\\t\\tgr.default_content = \\\"1\\\";\\n\\t\\t\\tgr.update();\\n\\t\\t}\\n\\t} else if (current.default_content == true && current.default_content.changes()) {\\n\\t\\tgr = new GlideRecord(\\\"help_content\\\");\\n\\t\\tgr.addQuery(\\\"guidance_step\\\", current.guidance_step);\\n\\t\\tgr.addQuery(\\\"default_content\\\", \\\"1\\\");\\n\\t\\tgr.query();\\n\\n\\t\\twhile(gr.next()) {\\n\\t\\t\\tif(gr.getUniqueValue() !== current.sys_id.toString()) {\\n\\t\\t\\t\\tgr.setValue(\\\"default_content\\\", \\\"0\\\");\\n\\t\\t\\t\\tgr.update();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Ensure default is true for only 1 field\"\n}```"}
{"prompt":"{\"prompt\":\"Check if live_feed plugin is activated\",\"table\":\"asmt_assessable_record\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_assessable_record\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onDisplay(current, g_scratchpad) {\\n\\tg_scratchpad.isLiveFeedActive = gs.tableExists('live_group_profile');\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Check if live_feed plugin is activated\"\n}```"}
{"prompt":"{\"prompt\":\"Password Reset Validate Auto-generate\",\"table\":\"pwd_process\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pwd_process\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"check();\\n\\nfunction check() {\\n\\tif (current.auto_gen_password == 1) {\\n\\t\\tif ((current.send_email == 0) && (current.display_password == 0)) {\\n\\t\\t\\tvar errMsg = gs.getMessage(\\\"If you select 'Auto-generate password', then you must select 'Display password', 'Email password', or both options\\\");\\n\\t\\t\\tgs.addErrorMessage(errMsg);\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t} else {\\n\\t\\t// Turn off any properties depending on Auto-generate password\\n\\t\\tcurrent.password_needs_reset = 0;\\n\\t\\tcurrent.send_email = 0;\\n\\t\\tcurrent.display_password = 0;\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Password Reset Validate Auto-generate\"\n}```"}
{"prompt":"{\"prompt\":\"Update operation type for trim\",\"table\":\"sys_rte_eb_trim_operation\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_rte_eb_trim_operation\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tcurrent.type = \\\"e5a9491e730000102b6265a751ab9e59\\\";\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update operation type for trim\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent Catalog Item in List Filter\",\"table\":\"sys_aw_list\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_aw_list\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar table = current.table;\\n\\tif (new global.GlobalServiceCatalogUtil().isCatItemTable(table)) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Catalog Item can't be added as List Filter\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent Catalog Item in List Filter\"\n}```"}
{"prompt":"{\"prompt\":\"Set per-script IIFE preference\",\"table\":\"sys_ui_script\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ui_script\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current,previous) {\\n\\t\\n\\tvar script = current.getValue(\\\"script\\\");\\n\\tvar scopeName = current.sys_scope.scope;\\n\\tvar scriptName = current.getValue(\\\"script_name\\\");\\n\\n\\tcurrent.use_scoped_format = matchesUIScriptIIFEPattern(script,scopeName,scriptName)\\n\\t\\n\\tfunction matchesUIScriptIIFEPattern(script, scopeName, scriptName) {\\n\\t\\tif (\\\"global\\\" == scopeName)\\n\\t\\t\\treturn rc;\\n\\n\\t\\tvar rc = true;\\n\\t\\tvar requiredStart =\\t\\\"var\\\"+scopeName+\\\"=\\\"+scopeName+\\\"||{};\\\"+scopeName+\\\".\\\"+scriptName+\\\"=(function(){\\\\\\\"usestrict\\\\\\\";\\\";\\n\\t\\tvar requiredEnd = \\\"})();\\\";\\n\\n\\t\\tscript = removeWhitespace(script);\\n\\t\\n\\t\\tif (!script.startsWith(requiredStart))\\n\\t\\t\\trc = false;\\n\\n\\t\\tif (!script.endsWith(requiredEnd))\\n\\t\\t\\trc = false;\\n\\n\\t\\treturn rc;\\n\\t}\\n\\n\\t/* remove any whitespace including comments whether \\\"C\\\" style or double slash to end of line */\\n\\tfunction removeWhitespace(code) {\\n\\t\\t\\tvar multiline = /\\\\/\\\\*(.|[\\\\r\\\\n])*?\\\\*\\\\//g;\\n\\t\\t\\tvar singleline = /\\\\/\\\\/.*/g;\\n\\t\\tvar spaces = /\\\\s*/g;\\n\\t\\tvar newlines = /[\\\\r\\\\n]*/g;\\n\\n\\t\\tcode = code.replace(multiline,\\\"\\\"); \\n\\t\\t\\tcode = code.replace(singleline,\\\"\\\");\\n\\t\\tcode = code.replace(spaces,\\\"\\\");\\n\\t\\tcode = code.replace(newlines,\\\"\\\");\\n\\t\\t\\n\\t\\t\\treturn code;\\n\\t}\\n}\\nonBefore(current,previous);\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"sys_scopeISNOTEMPTY^sys_scope!=global^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Set per-script IIFE preference\"\n}```"}
{"prompt":"{\"prompt\":\"SNC Transaction History\",\"table\":\"sys_trend\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_trend\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"//\\r\\n// Send transaction history records back to the mother ship\\r\\n//\\r\\nwsdl = \\\"http://hi.service-now.com/ecc_queue.do?WSDL\\\";\\r\\n//wsdl = \\\"http://localhost:8080/glide/ecc_queue.do?WSDL\\\";\\r\\n\\r\\nvar myname = gs.getProperty(\\\"glide.db.name\\\");\\r\\n\\r\\nwsClient = new WSClientAdaptor(wsdl);\\r\\nwsClient.setMethodName(\\\"insert\\\");\\r\\nwsClient.setParameter(\\\"agent\\\", \\\"Service-now transaction history\\\");\\r\\nwsClient.setParameter(\\\"name\\\", \\\"transaction.history\\\");\\r\\nwsClient.setParameter(\\\"queue\\\", \\\"input\\\");\\r\\nwsClient.setParameter(\\\"source\\\", myname);\\r\\nwsClient.setParameter(\\\"payload\\\", \\\"<history><collected>\\\" + current.collected + \\\"</collected><count>\\\" + current.value + \\\"</count></history>\\\");\\r\\n\\r\\nsys_id = wsClient.invokeFiltered(\\\"//sys_id\\\");\\r\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.name == 'Transaction'\",\n\t\"name\": \"SNC Transaction History\"\n}```"}
{"prompt":"{\"prompt\":\"Schedule Item validate\",\"table\":\"cmn_schedule_span\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmn_schedule_span\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (!ScheduleEntryValidation.isValid(current))\\r\\n\\t\\tcurrent.setAbortAction(true);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Schedule Item validate\"\n}```"}
{"prompt":"{\"prompt\":\"Create new Mobile Analytics Settings\",\"table\":\"sys_sg_native_client\",\"when\":\"async\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_native_client\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tsn_mobile_analytics.MobileAnalytics.createSettingsForNativeClient(current.sys_id, current.type);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"sn_mobile_analytics.MobileAnalytics.isEnabled()\",\n\t\"name\": \"Create new Mobile Analytics Settings\"\n}```"}
{"prompt":"{\"prompt\":\"MID Server Cluster Management\",\"table\":\"ecc_queue\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_queue\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"80\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/**\\n * Service-now.com\\n * \\n * Description: If the MID server is in a cluster, potentially replace the agent with the proper one.\\n */\\n\\nrunMIDManagement();\\n\\nfunction runMIDManagement() {\\n\\t\\tvar agentGr = getMIDServerGr();\\n\\t\\tif (JSUtil.nil(agentGr))\\n\\t\\t\\t\\treturn;\\n\\n\\t// only use cluster for Shazzam if the MID is down\\n\\tif (current.topic == \\\"Shazzam\\\" && agentGr.status == \\\"Up\\\") \\n\\t\\treturn;\\n\\n\\t// If probe param ECC_AGENT_SELECTOR_DETAILS exists in payload, then exit and don't use\\n\\t// legacy cluster management. For performance, uses a cached regex instead of a real XML parser.\\n\\tvar midSelectorRegex = new SNC.Regex(GlideappIECC.ECC_AGENT_SELECTOR_DETAILS_REGEX+'');\\n\\tif (midSelectorRegex.match(current.payload))\\n\\t\\treturn;\\n\\n\\t// only if a mid is down should a failover cluster be considered\\n\\tvar msc;\\n\\tif (agentGr.status == \\\"Down\\\" || agentGr.status == \\\"Upgrade Failed\\\")\\n\\t\\tmsc = new MIDServerCluster(agentGr, \\\"Failover\\\");\\n\\telse\\n\\t\\t\\tmsc = new MIDServerCluster(agentGr, \\\"Load Balance\\\");\\n\\t\\n\\t\\tif (!msc.clusterExists())\\t// no available clusters of any kind\\n\\t\\t\\t\\treturn;\\n\\t\\n\\t\\tvar newAgent = msc.getClusterAgent();\\n\\t\\tcurrent.agent = \\\"mid.server.\\\" + newAgent;\\n}\\n\\nfunction getMIDServerGr() {\\n\\t\\tvar agentName = current.agent;\\n\\t\\tagentName = agentName.substring(\\\"mid.server.\\\".length, agentName.length);\\n \\n\\t\\tvar agentCache = new SNC.ECCAgentCache();\\n\\tvar gr = agentCache.getByName(agentName);\\n \\t\\n\\t\\tif (!gr)\\n\\t\\t\\t\\treturn;\\t \\n \\n\\t\\treturn gr;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"MIDClusterManagementUtil.checkPrecondition(current)\",\n\t\"name\": \"MID Server Cluster Management\"\n}```"}
{"prompt":"{\"prompt\":\"load ajax globals\",\"table\":\"sys_script_ajax\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_script_ajax\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.print(\\\"reloading global scripts...\\\");\\r\\ngs.loadGlobalScripts();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"load ajax globals\"\n}```"}
{"prompt":"{\"prompt\":\"Step Protection Policy\",\"table\":\"sys_hub_step_instance\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_hub_step_instance\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t// If Action cannot be updated, we cannot add or remove a Step, so abort\\n\\tif (!isActionSnapshot() && (isAddingToReadOnlyAction() || isRemovingFromReadOnlyAction())) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(\\\"Cannot modify Steps for an Action \\\" +\\n\\t\\t\\t\\t\\t\\t\\t \\\"with restrictive security or protection policy\\\");\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\t// If no Action is set, leave Step policy as specified\\n\\tif (gs.nil(current.action))\\n\\t\\treturn;\\n\\t\\n\\t// Otherwise, inherit sys_policy from Action\\n\\tcurrent.sys_policy = current.action.sys_policy;\\n\\t\\n\\tfunction isActionSnapshot() {\\n\\t\\tif (gs.nil(current.action))\\n\\t\\t\\treturn false;\\n\\t\\t\\n\\t\\treturn current.action.sys_class_name == \\\"sys_hub_action_type_snapshot\\\";\\n\\t}\\n\\t\\n\\tfunction isAddingToReadOnlyAction() {\\n\\t\\treturn !gs.nil(current.action) && !current.action.getRefRecord().canWrite();\\n\\t}\\n\\t\\n\\tfunction isRemovingFromReadOnlyAction() {\\n\\t\\treturn !gs.nil(previous.action) && !previous.action.getRefRecord().canWrite();\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.action.changes()\",\n\t\"name\": \"Step Protection Policy\"\n}```"}
{"prompt":"{\"prompt\":\"Delete pending application 2\",\"table\":\"cmdb_running_process\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_running_process\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/**\\n Service-now.com\\n \\n Description: Remove the associated pending application record if the process is marked as deleted\\n**/\\n\\nrunIT();\\n\\nfunction runIT() {\\n\\tvar gr = new GlideRecord(\\\"cmdb_ci_appl_pending\\\");\\n\\tif (!gr.isValid())\\n\\t\\treturn;\\n\\t\\n\\tgr.addQuery(\\\"running_process\\\", current.sys_id);\\n\\tgr.query();\\n\\tgr.deleteMultiple();\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete pending application 2\"\n}```"}
{"prompt":"{\"prompt\":\"Transfer attachments after prediction\",\"table\":\"sn_hr_core_case\",\"when\":\"async\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_case\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar sysClass = current.getValue('sys_class_name');\\n\\tvar sysId = current.getUniqueValue();\\n\\t\\n\\tvar gr = new GlideRecord('sys_email');\\n\\tgr.addQuery('instance', sysId);\\n\\tgr.addQuery('target_table', '!=', sysClass);\\n\\tgr.query();\\n\\tif (gr.next()) {\\n\\t\\tnew GlideSysAttachment().copy(gr.getTableName(), gr.getUniqueValue(), sysClass, sysId);\\n\\t\\tgr.setValue('target_table', sysClass);\\n\\t\\tgr.update();\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"contact_type=email^EQ\",\n\t\"condition\": \"javascript:gs.getProperty(\\\"sn_hr_core.auto_categorization\\\", true)\",\n\t\"name\": \"Transfer attachments after prediction\"\n}```"}
{"prompt":"{\"prompt\":\"Default Template Name Check\",\"table\":\"sys_template\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_template\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\n\\tvar name = current.getValue(\\\"name\\\").toLowerCase().trim();\\n\\tif (!gs.tableExists(name))\\n\\t\\treturn;\\n\\t\\n\\t// Non-admin and template name matches existing table, so the change is not allowed\\n\\tcurrent.setAbortAction(true);\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Template name cannot match an existing table name\\\"));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!gs.hasRole('admin') && !current.name.nil()\",\n\t\"name\": \"Default Template Name Check\"\n}```"}
{"prompt":"{\"prompt\":\"Live Message State Changes\",\"table\":\"live_message\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"live_message\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"//tags and their counts\\nnew LiveFeedTag().onMessageStateChange(current);\\n\\nif(current.state !== 'deleted') {\\n\\t//@mentions\\n\\tvar mentionRegx = /@\\\\[([a-z0-9]{32}):([^:\\\\[\\\\]]+)\\\\]/g;\\n\\tvar gr = new GlideRecord('live_mention');\\n\\tcurrent.message.replace(mentionRegx, function(fullmatch, grp1){\\n\\t\\tgr.initialize();\\n\\t\\tgr.message = current.sys_id;\\n\\t\\tgr.mention = grp1;\\n\\t\\tgr.sys_domain_id = current.sys_domain_id;\\n\\t\\tgr.insert();\\n\\t});\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"stateVALCHANGES^EQ\",\n\t\"condition\": \"current.state != previous.state\",\n\t\"name\": \"Live Message State Changes\"\n}```"}
{"prompt":"{\"prompt\":\"DeleteBrowserFingerPrint\",\"table\":\"multi_factor_browser_fingerprint\",\"when\":\"async\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"multi_factor_browser_fingerprint\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar maxRememberedBrowserCount = GlideProperties\\n\\t\\t\\t\\t.getInt(\\\"glide.authenticate.multifactor.remembered.browser.max.count\\\", 5);\\n\\tvar gr = new GlideAggregate(\\\"multi_factor_browser_fingerprint\\\");\\n\\tgr.addAggregate(\\\"COUNT\\\");\\n\\tgr.addQuery(\\\"user\\\", current.user);\\n\\tgr.query();\\n\\tif(gr.next()){\\n\\t\\tvar rememberedBrowserCount = gr.getAggregate(\\\"COUNT\\\");\\n\\t\\tif(maxRememberedBrowserCount < rememberedBrowserCount){\\n\\t\\t\\tvar bfpGr = new GlideRecord(\\\"multi_factor_browser_fingerprint\\\");\\n\\t\\t\\tbfpGr.addQuery(\\\"user\\\", current.user);\\n\\t\\t\\tbfpGr.orderBy(\\\"sys_created_on\\\");\\n\\t\\t\\tbfpGr.query();\\n\\t\\t\\twhile (bfpGr.next() && (maxRememberedBrowserCount < rememberedBrowserCount)) {\\n\\t\\t\\t\\tbfpGr.deleteRecord();\\n\\t\\t\\t\\trememberedBrowserCount--;\\n\\t\\t\\t\\tgs.info(\\\"User can only remember upto \\\" + maxRememberedBrowserCount\\n\\t\\t\\t\\t\\t\\t+ \\\" browsers. Removed oldest remembered browser for user : \\\" + current.user);\\n\\t\\t\\t}\\t\\n\\t\\t}\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"DeleteBrowserFingerPrint\"\n}```"}
{"prompt":"{\"prompt\":\"put step type on scratchpad \",\"table\":\"help_content\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"help_content\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar step = current.guidance_step.getRefRecord();\\n\\t\\n\\tif(step)\\n\\t\\tg_scratchpad.step_type = step.layout;\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"put step type on scratchpad \"\n}```"}
{"prompt":"{\"prompt\":\"Only leaf node can be deleted\",\"table\":\"cmdb_ci_business_capability\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci_business_capability\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif(current.leaf_node) {\\n\\t\\tif(current.parent) {\\n\\t\\t\\t//if parent of leaf node has no other children, make it leaf\\n\\t\\t\\tvar children = new GlideRecord(\\\"cmdb_ci_business_capability\\\");\\n\\t\\t\\tchildren.addQuery(\\\"parent\\\", current.parent);\\n\\t\\t\\tchildren.query();\\n\\t\\t\\tif(children.getRowCount() == 1) {\\n\\t\\t\\t\\tvar gr = new GlideRecord(\\\"cmdb_ci_business_capability\\\");\\n\\t\\t\\t\\tgr.get(current.parent);\\n\\t\\t\\t\\tgr.setValue(\\\"leaf_node\\\", true);\\n\\t\\t\\t\\tgr.update();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\telse {\\n\\t\\t// if leaf node delete\\n\\t\\tvar msgArray = [];\\n\\t\\tmsgArray.push(current.name);\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Cannot delete the {0} Capability as it has child Capabilities/is not a leaf level Capability\\\", msgArray ));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Only leaf node can be deleted\"\n}```"}
{"prompt":"{\"prompt\":\"Retry After not allowed for JDBC/SFTP\",\"table\":\"sys_retry_policy\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_retry_policy\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"connection_type!=http_retry_conditions^EQ\",\n\t\"condition\": \"current.retry_strategy.toString()==\\\"retry_after\\\"\",\n\t\"name\": \"Retry After not allowed for JDBC/SFTP\"\n}```"}
{"prompt":"{\"prompt\":\"Auto stakeholder creation\",\"table\":\"asmt_m2m_category_assessment\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_m2m_category_assessment\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"createStakeholdersForAssessment(current);\\n\\nfunction createStakeholdersForAssessment(record) {\\n\\tvar catUser = new GlideRecord(\\\"asmt_m2m_category_user\\\");\\n\\tcatUser.addQuery(\\\"metric_category\\\", record.category.sys_id);\\n\\tcatUser.query();\\n\\twhile (catUser.next()){\\n\\t\\t\\tnew AssessmentUtils().createStakeholders(/*categoryUserSys*/catUser.sys_id, /*assessableSys*/record.assessment_record.sys_id);\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.category.create_stakeholders == true\",\n\t\"name\": \"Auto stakeholder creation\"\n}```"}
{"prompt":"{\"prompt\":\"Restrict query\",\"table\":\"sn_hr_core_tuition_reimbursement\",\"when\":\"before\",\"actions\":\"r\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"true\",\n\t\"collection\": \"sn_hr_core_tuition_reimbursement\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (!(new hr_Utils().checkUserHasRole(hr.ROLE_HR_CASE_READER)))\\n\\t\\tcurrent.addEncodedQuery('employeeDYNAMIC90d1921e5f510100a9ad2572f2b477fe^EQ');\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Restrict query\"\n}```"}
{"prompt":"{\"prompt\":\"Create Bot Messages\",\"table\":\"sys_cs_bot_messages\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cs_bot_messages\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"sys_cs_provider_application.provider.channel.store_app_page_linkISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Create Bot Messages\"\n}```"}
{"prompt":"{\"prompt\":\"Label - Group Member Add\",\"table\":\"sys_user_grmember\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_user_grmember\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// when a user is added to a group\\n// user inherit all labels from that group\\naddGroupLabelsToMember();\\n\\nfunction addGroupLabelsToMember() {\\n\\tvar update = new LabelUpdate();\\n\\tupdate.addGroupLabelsToUser(current.group, current.user);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Label - Group Member Add\"\n}```"}
{"prompt":"{\"prompt\":\"Delete Scheduled Job if it Exists\",\"table\":\"sys_dm_delete\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_dm_delete\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\t\\tvar triggerId = current.schedule;\\n\\t\\t\\tif (!triggerId.nil()) {\\n\\t\\t\\t\\t\\tvar scheduledJobRecord = new GlideRecord('sys_trigger');\\n\\t\\t\\t\\t\\tif (scheduledJobRecord.get(triggerId)) {\\n\\t\\t\\t\\t\\t\\tscheduledJobRecord.deleteRecord();\\n\\t\\t\\t\\t\\t\\tgs.addInfoMessage(\\\"Deleted associated Scheduled Job \\\" + triggerId);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\tgs.setRedirect(\\\"/sys_dm_delete_list.do\\\");\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete Scheduled Job if it Exists\"\n}```"}
{"prompt":"{\"prompt\":\"Enforce barcode type for grouped input\",\"table\":\"sys_sg_ui_parameter\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_ui_parameter\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (previous.input_type.toString() === \\\"qr_barcode\\\" && previous.parameter_type.toString() === \\\"\\\" && (current.input_type.toString() !== \\\"qr_barcode\\\" || current.parameter_type.toString() !== \\\"\\\")) {\\n\\t\\t\\tvar gr = new GlideRecord(\\\"sys_sg_grouped_input\\\");\\n\\t\\t\\tgr.addQuery(\\\"ui_parameters\\\", current.sys_id);\\n\\t\\t\\tgr.query();\\n\\n\\t\\t\\tif (gr.next()) {\\n\\t\\t\\t\\tgs.addErrorMessage(\\\"Invalid UI parameter for grouped input. Only input type of QR/Barcode with no parameter type allowed.\\\");\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t}\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Enforce barcode type for grouped input\"\n}```"}
{"prompt":"{\"prompt\":\"Validate nagative values\",\"table\":\"cmdb_model\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_model\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /* null when async */) {\\n\\tvar isValid = true;\\n\\tvar msg = '';\\n\\tvar fields = [];\\n\\tif (current.getValue('length') < 0) {\\n\\t\\tfields.push(current.length.getLabel());\\n\\t\\tisValid = false;\\n\\t}\\n\\tif (current.getValue('width') < 0) {\\n\\t\\tfields.push(current.width.getLabel());\\n\\t\\tisValid = false;\\n\\t}\\n\\tif (current.getValue('height') < 0) {\\n\\t\\tfields.push(current.height.getLabel());\\n\\t\\tisValid = false;\\n\\t}\\n\\tif (current.getValue('depth') < 0) {\\n\\t\\tfields.push(current.depth.getLabel());\\n\\t\\tisValid = false;\\n\\t}\\n\\tif (current.getValue('current') < 0) {\\n\\t\\tfields.push(current.current.getLabel());\\n\\t\\tisValid = false;\\n\\t}\\n\\tif (current.getValue('rated_power') < 0) {\\n\\t\\tfields.push(current.rated_power.getLabel());\\n\\t\\tisValid = false;\\n\\t}\\n\\tif (current.getValue('voltage') < 0) {\\n\\t\\tfields.push(current.voltage.getLabel());\\n\\t\\tisValid = false;\\n\\t}\\n\\tif (current.getValue('volume') < 0) {\\n\\t\\tfields.push(current.volume.getLabel());\\n\\t\\tisValid = false;\\n\\t}\\n\\tif (current.getValue('weight_decimal') < 0) {\\n\\t\\tfields.push(current.weight_decimal.getLabel());\\n\\t\\tisValid = false;\\n\\t}\\n\\tif (!isValid) {\\n\\t\\tmsg = gs.getMessage('Negative values are not allowed in the following fields: {0}', fields.toString());\\n\\t\\tgs.addErrorMessage(msg);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n}(current, previous));\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"lengthVALCHANGES^ORwidthVALCHANGES^ORheightVALCHANGES^ORdepthVALCHANGES^NQcurrentVALCHANGES^NQrated_powerVALCHANGES^NQvoltageVALCHANGES^NQvolumeVALCHANGES^NQweight_decimalVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate nagative values\"\n}```"}
{"prompt":"{\"prompt\":\"Set State variables on Scratchpad\",\"table\":\"problem\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"problem\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tg_scratchpad.STATE =\\tnew ProblemState().getProblemState();\\n\\tg_scratchpad.RESOLUTION_CODES = new ProblemState().getResolutionCodes();\\n\\n\\tvar moveToClosed = gs.getProperty(\\\"problem.acceptrisk.move_to_closed\\\", \\\"true\\\");\\n\\tg_scratchpad.PROP_MOVE_TO_CLOSED = moveToClosed;\\n\\n\\tg_scratchpad[\\\"originalState\\\"] = current.state;\\n\\tg_scratchpad[\\\"originalResolutionCode\\\"] = current.resolution_code;\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set State variables on Scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"Generate variable and prompt\",\"table\":\"sys_cb_variable_accelerator\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cb_variable_accelerator\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar send_to_modal = GlideTransaction.get().getRequestParameter(\\\"sysparm_close_on_success\\\");\\n\\tsend_to_modal = send_to_modal == \\\"true\\\";\\n\\t\\n\\tvar topic_var;\\n\\tif (shouldMakeVariable(current))\\n\\t\\ttopic_var = makeVariable(current);\\n\\n\\tif (shouldMakeVariable(current) && !topic_var) {\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Unable to insert variable.\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn;\\n\\t}\\n\\n\\tif (topic_var.getValue(\\\"internal_type\\\") == \\\"choice\\\") {\\n\\t\\tif (!current.choices.nil())\\n\\t\\t\\tmakeAndInsertChoices(JSON.parse(current.getValue(\\\"choices\\\")), topic_var);\\n\\t}\\n\\t\\n\\tif (current.getValue(\\\"var_only\\\") == 1) {\\n\\t\\tif (send_to_modal) {\\n\\t\\t\\tgs.setRedirect(\\\"/cb_close_modal.do?sysparm_direct=true\\\");\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t\\n\\t\\t//we aren't making a new prompt, didn't ask for the modal, so redirect to the list\\n\\t\\tgs.setRedirect(\\\"/topic_variable_list.do?sysparm_query=model=\\\" + current.getValue(\\\"topic\\\"));\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\tvar prompt;\\n\\tif (shouldMakePrompt(current))\\n\\t\\tprompt = makeRegularPrompt(current, topic_var);\\n\\t\\n\\tif (!prompt) {\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Unable to insert prompt\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn;\\n\\t}\\n\\n\\tif (send_to_modal) {\\n\\t\\tgs.setRedirect(\\\"/cb_close_modal.do?sysparm_direct=true\\\");\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\t//reload the prompt to fetch an accurate scope\\n\\tvar prompt_id = prompt.getUniqueValue();\\n\\tprompt.initialize();\\n\\tprompt.get(prompt_id);\\n\\t\\n\\tvar prompt_url = gs.generateURL(\\\"sys_cb_prompt\\\", prompt_id);\\n\\tprompt_url += \\\"&sysparm_transaction_scope=\\\" + prompt.getValue(\\\"sys_scope\\\");\\n\\t\\n\\t//we're done, we didn't send to modal, so send them to the prompt\\n\\tgs.setRedirect(prompt_url);\\n\\t\\n\\t\\n\\t\\n\\tfunction shouldMakeVariable(current) {\\n\\t\\treturn current.getValue(\\\"type\\\") != \\\"output\\\";\\n\\t}\\n\\t\\n\\tfunction shouldMakePrompt(current) {\\n\\t\\treturn current.getValue(\\\"var_only\\\") != 1;\\n\\t}\\n\\t\\n\\tfunction makeVariable(current) {\\n\\t\\tif (current.getValue(\\\"type\\\") == \\\"output\\\")\\n\\t\\t\\treturn null;\\n\\t\\t\\n\\t\\tif (variableNameExists(current)) {\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\tgs.addInfoMessage(gs.getMessage(\\\"That variable name is not available. Please choose a different name.\\\"));\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\t\\n\\t\\t//generate the variable\\n\\t\\tgs.debug(\\\"Creating new variable of type {0}\\\", getInternalType(current.getValue(\\\"type\\\")));\\n\\t\\t\\n\\t\\tvar topic_var = new GlideRecord(\\\"topic_variable\\\");\\n\\t\\ttopic_var.newRecord();\\n\\t\\ttopic_var.setValue(\\\"internal_type\\\", getInternalType(current.getValue(\\\"type\\\")));\\n\\t\\ttopic_var.setValue(\\\"model\\\", current.getValue(\\\"topic\\\"));\\n\\t\\ttopic_var.setValue(\\\"model_id\\\", current.getValue(\\\"topic\\\"));\\n\\t\\ttopic_var.setValue(\\\"name\\\", \\\"var__m_topic_variable_\\\" + current.getValue(\\\"topic\\\"));\\n\\t\\ttopic_var.setValue(\\\"element\\\", current.getValue(\\\"column\\\"));\\n\\t\\ttopic_var.setValue(\\\"label\\\", current.getValue(\\\"name\\\"));\\n\\t\\t\\n\\t\\tif (needsMaxLength(current.getValue(\\\"type\\\")))\\n\\t\\t\\ttopic_var.setValue(\\\"max_length\\\", getMaxLengthForType(current.getValue(\\\"type\\\")));\\n\\t\\t\\n\\t\\tif (needsReference(current.getValue(\\\"type\\\"))) {\\n\\t\\t\\tgs.debug(\\\"Setting reference to {0}, qual to {1}\\\",\\n\\t\\t\\t\\t\\t current.getValue(\\\"table\\\"),\\n\\t\\t\\t\\t\\t current.getValue(\\\"reference_condition\\\")\\n\\t\\t\\t);\\n\\t\\t\\t\\n\\t\\t\\ttopic_var.setValue(\\\"reference\\\", current.getValue(\\\"table\\\"));\\n\\t\\t\\ttopic_var.setValue(\\\"use_reference_qualifier\\\", \\\"simple\\\");\\n\\t\\t\\ttopic_var.setValue(\\\"limit\\\", current.getValue(\\\"limit\\\"));\\n\\t\\t\\t\\n\\t\\t\\tif (current.reference_condition.hasMapping()) {\\n\\t\\t\\t\\ttopic_var.reference_qual_condition.setValueMapping(\\n\\t\\t\\t\\t\\tcurrent.reference_condition.getValueMapping()\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tgs.debug(\\\"ValueMapping set to {0}\\\", current.reference_condition.getValueMapping());\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttopic_var.setValue(\\\"reference_qual_condition\\\",\\n\\t\\t\\t\\t\\tcurrent.getValue(\\\"reference_condition\\\")\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tgs.debug(\\\"Regular value. Setting to {0}\\\", current.getValue(\\\"reference_condition\\\"));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (!current.default_value.nil()) {\\n\\t\\t\\tgs.debug(\\\"Setting default_value to {0}\\\", current.getValue(\\\"default\\\"));\\n\\t\\t\\ttopic_var.setValue(\\\"default_value\\\", current.getValue(\\\"default_value\\\"));\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (current.getValue(\\\"type\\\") == \\\"choice\\\") {\\n\\t\\t\\tgs.debug(\\\"Setting choice to {0}\\\", current.getValue(\\\"choice_type\\\"));\\n\\t\\t\\ttopic_var.setValue(\\\"choice\\\", current.getValue(\\\"choice_type\\\"));\\t\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (current.getValue(\\\"type\\\") == \\\"url\\\") {\\n\\t\\t\\tgs.debug(\\\"Adding query parameters to the URL\\\");\\n\\t\\t\\tif (current.query_parameters.hasMapping()) {\\n\\t\\t\\t\\ttopic_var.query_parameters.setValueMapping(\\n\\t\\t\\t\\t\\tcurrent.query_parameters.getValueMapping()\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tgs.debug(\\\"ValueMapping set to {0}\\\", current.query_parameters.getValueMapping());\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttopic_var.setValue(\\\"query_parameters\\\", current.getValue(\\\"query_parameters\\\"));\\n\\t\\t\\t\\tgs.debug(\\\"Regular value set to {0}\\\", current.getValue(\\\"query_parameters\\\"));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\n\\t\\tgs.debug(\\\"Inserting new variable with type {0} and name {1} and label {2}\\\",\\n\\t\\t\\t\\t topic_var.getValue(\\\"internal_type\\\"),\\n\\t\\t\\t\\t topic_var.getValue(\\\"element\\\"),\\n\\t\\t\\t\\t topic_var.getValue(\\\"label\\\")\\n\\t\\t);\\n\\t\\n\\t\\tif (topic_var.insert())\\n\\t\\t\\treturn topic_var;\\n\\t\\t\\n\\t\\treturn null;\\n\\t}\\n\\t\\n\\tfunction variableNameExists(current) {\\n\\t\\tvar name = current.getValue(\\\"column\\\");\\n\\t\\tvar topic = current.getValue(\\\"topic\\\");\\n\\t\\tvar type = current.getValue(\\\"type\\\");\\n\\t\\t\\n\\t\\tif (type == \\\"output\\\")\\n\\t\\t\\treturn false;\\n\\t\\t\\n\\t\\tvar topic_var = new GlideRecord(\\\"topic_variable\\\");\\n\\t\\ttopic_var.addQuery(\\\"model\\\", topic);\\n\\t\\ttopic_var.addQuery(\\\"element\\\", name);\\n\\t\\ttopic_var.query();\\n\\t\\t\\n\\t\\treturn topic_var.hasNext();\\n\\t}\\n\\t\\n\\tfunction getInternalType(type) {\\n\\t\\tif(type == \\\"boolean\\\")\\n\\t\\t\\ttype = \\\"bool\\\";\\n\\t\\t\\n\\t\\tvar map = {\\n\\t\\t\\tstring : \\\"string\\\",\\n\\t\\t\\treference : \\\"reference\\\",\\n\\t\\t\\tinteger : \\\"integer\\\",\\n\\t\\t\\tph_number : \\\"ph_number\\\",\\n\\t\\t\\tbool : \\\"boolean\\\",\\n\\t\\t\\tglide_date_time : \\\"glide_date_time\\\",\\n\\t\\t\\temail : \\\"email\\\",\\n\\t\\t\\turl : \\\"url\\\",\\n\\t\\t\\tuser_image : \\\"user_image\\\",\\n\\t\\t\\tglide_list : \\\"glide_list\\\",\\n\\t\\t\\tguid : \\\"guid\\\",\\n\\t\\t\\tchoice : \\\"choice\\\"\\n\\t\\t};\\n\\t\\n\\t\\tif (map.hasOwnProperty(type))\\n\\t\\t\\treturn map[type];\\n\\t\\t\\n\\t\\treturn \\\"string\\\";\\t\\n\\t}\\n\\n\\tfunction needsMaxLength(type) {\\n\\t\\tvar map = {\\n\\t\\t\\t\\\"reference\\\" : true,\\n\\t\\t\\t\\\"glide_list\\\" : true,\\n\\t\\t\\t\\\"string\\\" : true\\n\\t\\t};\\n\\t\\t\\n\\t\\tif (map.hasOwnProperty(type))\\n\\t\\t\\treturn true;\\n\\t\\t\\n\\t\\treturn false;\\n\\t}\\n\\n\\tfunction needsReference(type) {\\n\\t\\tif (type == \\\"reference\\\" || type == \\\"glide_list\\\")\\n\\t\\t\\treturn true;\\n\\t\\t\\n\\t\\treturn false;\\n\\t}\\n\\t\\n\\tfunction getMaxLengthForType(type) {\\n\\t\\tgs.debug(\\\"Getting max_length for type {0}\\\", type);\\n\\t\\tvar default_value = 250;\\n\\t\\tvar map = {\\n\\t\\t\\tstring : 250,\\n\\t\\t\\treference : 32,\\n\\t\\t\\tglide_list : 32,\\n\\t\\t\\tdefaultValue : 250\\n\\t\\t};\\n\\t\\t\\n\\t\\tif (map.hasOwnProperty(type))\\n\\t\\t\\treturn map[type];\\n\\t\\t\\n\\t\\treturn defaultValue;\\n\\t}\\n\\n\\tfunction makeAndInsertChoices(choices, new_variable) {\\n\\t\\tgs.debug(\\\"Creating choices for {0}\\\", choices);\\n\\t\\tvar i = 0;\\n\\t\\tfor (var key in choices) {\\n\\t\\t\\tif (choices.hasOwnProperty(key)) {\\n\\t\\t\\t\\tgs.debug(\\\"Making choice {0}\\\", key);\\n\\t\\t\\t\\tif (makeChoice(key, choices[key], new_variable, i))\\n\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Unable to create choice {0} {1}\\\", [key, choices[key]]));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction makeChoice(label, value, new_variable, idx) {\\n\\t\\tgs.debug(\\\"Making choice {0} with value {1} for variable {2}\\\",\\n\\t\\t\\t\\t label, value, new_variable.getValue(\\\"label\\\")\\n\\t\\t);\\n\\t\\tvar newChoice = new GlideRecord(\\\"sys_choice\\\");\\n\\t\\tnewChoice.setValue(\\\"element\\\", new_variable.getValue(\\\"element\\\"));\\n\\t\\tnewChoice.setValue(\\\"name\\\", new_variable.getValue(\\\"name\\\"));\\n\\t\\tnewChoice.setValue(\\\"label\\\", label);\\n\\t\\tnewChoice.setValue(\\\"value\\\", value);\\n\\t\\tnewChoice.setValue(\\\"sequence\\\", idx);\\n\\t\\t\\n\\t\\treturn newChoice.insert();\\n\\t}\\n\\n\\tfunction needsDefaultValue(type, choice_type) {\\n\\t\\tgs.debug(\\\"Checking if {0} (choice type {1}) needs a default value\\\", type, choice_type);\\n\\t\\tif (type == \\\"choice\\\" && choice_type == \\\"3\\\")\\n\\t\\t\\treturn true;\\n\\t\\t\\n\\t\\tif (type == \\\"url\\\")\\n\\t\\t\\treturn true;\\n\\t\\t\\n\\t\\treturn false;\\n\\t}\\n\\t\\n\\tfunction makeRegularPrompt(current, topic_var) {\\n\\t\\tgs.debug(\\\"Making a regular prompt\\\");\\n\\t\\t\\n\\t\\tvar prompt = new GlideRecord(\\\"sys_cb_prompt\\\");\\n\\t\\tprompt.newRecord();\\n\\t\\tprompt.setValue(\\\"topic_goal\\\", current.getValue(\\\"topic_goal\\\"));\\n\\t\\tprompt.setValue(\\\"parent\\\", current.getValue(\\\"parent\\\"));\\n\\t\\tprompt.setValue(\\\"optional\\\", current.getValue(\\\"optional\\\"));\\n\\t\\t\\n\\t\\tif (topic_var)\\n\\t\\t\\tprompt.setValue(\\\"variable\\\", topic_var.getValue(\\\"element\\\"));\\n\\t\\n\\t\\tif (current.getValue(\\\"prompt_label\\\"))\\n\\t\\t\\tprompt.setValue(\\\"name\\\", current.getValue(\\\"prompt_label\\\"));\\n\\t\\telse if (current.getValue(\\\"prompt_msg\\\"))\\n\\t\\t\\tprompt.setValue(\\\"name\\\", current.getValue(\\\"prompt_msg\\\"));\\n\\t\\telse if (current.getValue(\\\"acknowledge_msg\\\"))\\n\\t\\t\\tprompt.setValue(\\\"name\\\", current.getValue(\\\"acknowledge_msg\\\"));\\n\\t\\telse\\n\\t\\t\\tprompt.setValue(\\\"name\\\", \\\"(blank)\\\");\\n\\t\\t\\n\\t\\tif (current.prompt_msg.hasMapping()) {\\n\\t\\t\\tgs.debug(\\\"Prompt has a mapping value, so setting that to {0}\\\", current.prompt_msg.getValueMapping());\\n\\t\\t\\tprompt.prompt_msg.setValueMapping(current.prompt_msg.getValueMapping());\\n\\t\\t} else {\\n\\t\\t\\tgs.debug(\\\"Prompt does not have a mapping value, so setting that to {0}\\\", current.getValue(\\\"prompt_msg\\\"));\\n\\t\\t\\tprompt.setValue(\\\"prompt_msg\\\", current.getValue(\\\"prompt_msg\\\"));\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (current.acknowledge_msg.hasMapping()) {\\n\\t\\t\\tgs.debug(\\\"Acknowledge has a mapping value, so setting that to {0}\\\",\\n\\t\\t\\t\\t\\t current.acknowledge_msg.getValueMapping()\\n\\t\\t\\t);\\n\\t\\t\\tprompt.acknowledge_msg.setValueMapping(current.acknowledge_msg.getValueMapping());\\n\\t\\t} else {\\n\\t\\t\\tgs.debug(\\\"Acknowledge does not have a mapping value, so setting that to {0}\\\",\\n\\t\\t\\t\\t\\t current.getValue(\\\"acknowledge_msg\\\")\\n\\t\\t\\t);\\n\\t\\t\\tprompt.setValue(\\\"acknowledge_msg\\\", current.getValue(\\\"acknowledge_msg\\\"));\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (current.reference_nil.hasMapping()) {\\n\\t\\t\\tgs.debug(\\\"Ref nil has a mapping value, so setting that to {0}\\\",\\n\\t\\t\\t\\t\\t current.reference_nil.getValueMapping()\\n\\t\\t\\t);\\n\\t\\t\\tprompt.reference_nil.setValueMapping(current.reference_nil.getValueMapping());\\n\\t\\t} else {\\n\\t\\t\\tgs.debug(\\\"Ref nil does not have a mapping value, so setting that to {0}\\\",\\n\\t\\t\\t\\t\\t current.getValue(\\\"reference_nil\\\")\\n\\t\\t\\t);\\n\\t\\t\\tprompt.setValue(\\\"reference_nil\\\", current.getValue(\\\"reference_nil\\\"));\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (current.getValue(\\\"type\\\") == \\\"choice\\\" && current.getValue(\\\"choice_type\\\") == \\\"1\\\")\\n\\t\\t\\tprompt.setValue(\\\"optional\\\", true);\\n\\t\\t\\n\\t\\tif (prompt.insert())\\n\\t\\t\\treturn prompt;\\n\\t\\t\\t\\n\\t\\treturn null;\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.isActionAborted() && !VariableAcceleratorUtil.hasExistingPrompt(current) && !VariableAcceleratorUtil.isDeleteAction(action)\",\n\t\"name\": \"Generate variable and prompt\"\n}```"}
{"prompt":"{\"prompt\":\"Delete advanced dashboard page\",\"table\":\"par_dashboard\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"par_dashboard\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tgr = new GlideRecord('sys_ux_app_route');\\n\\tgr.addQuery('screen_type',current.sys_ux_screen_type);\\n\\tgr.query();\\n\\twhile(gr.next())\\n\\t\\tgr.deleteRecord();\\n\\t\\n\\tvar gr = new GlideRecord('sys_ux_macroponent');\\n\\tif (gr.get(current.sys_ux_macroponent))\\n\\t\\tgr.deleteRecord();\\n\\t\\n\\tgr = new GlideRecord('sys_ux_screen');\\n\\tif (gr.get(current.sys_ux_screen))\\n\\t\\tgr.deleteRecord();\\n\\t\\n\\tgr = new GlideRecord('sys_ux_screen_type');\\n\\tif (gr.get(current.sys_ux_screen_type))\\n\\t\\tgr.deleteRecord();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"sys_ux_macroponentISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete advanced dashboard page\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent duplicate resource\",\"table\":\"sys_rate_limit_rules\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_rate_limit_rules\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar resource = current.rest_api_resource;\\n\\tvar gr = new GlideRecord(\\\"sys_rate_limit_rules\\\");\\n\\tgr.addQuery('rest_api_resource',resource);\\n\\tgr.addQuery('type','All');\\n\\tgr.query();\\n\\tif(gr.next()){\\n\\t\\tif(gr.getUniqueValue() != current.sys_id){\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"REST API resource conflicts with existing resource of type - All users\\\"));\\n\\t\\t}\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"type=All^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent duplicate resource\"\n}```"}
{"prompt":"{\"prompt\":\"OnCallEscalation\",\"table\":\"\",\"when\":\"action\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"action\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/**\\n * This is the default escalation handler for on-call rotation escalations\\n *\\n * When it is called, the following variables are available:\\n *\\n *\\t\\tcurrent - the document that is associated with the escalation (such as an incident)\\n *\\t\\tescalation - the escalation record\\n */\\n\\ngs.include(\\\"OnCallRotation\\\");\\n\\nvar eventName = escalation.event_name;\\nvar rota = new OnCallRotation();\\n\\nrota.whoIsNext(escalation);\\nwhile (rota.next()) {\\n\\t // Generate an event for each pending escalation\\n\\t if (rota.getType() == \\\"device\\\") {\\n\\t\\t\\t// Device notification\\n\\t\\t\\tgs.eventQueue(eventName + \\\".device\\\", current, rota.getDevice(), rota.getPrimaryUser());\\n\\t\\t\\tgs.print(\\\"Generated Group Device Event for: \\\" + rota.getDevice());\\n\\t } else {\\n\\t\\t\\t// User notification\\n\\t\\t\\tgs.eventQueue(eventName + \\\".user\\\", current, rota.getUser(), rota.getUserName());\\n\\t\\t\\tgs.print(\\\"Generated User Event for: \\\" + rota.getUserName());\\n\\t }\\n\\t rota.addCurrentToNotified();\\n}\\nrota.continueEscalations(escalation);\\n\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"OnCallEscalation\"\n}```"}
{"prompt":"{\"prompt\":\"Apply Case Options\",\"table\":\"sn_hr_core_case\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_case\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar hrServiceId = current.getValue('hr_service');\\n\\tif (hrServiceId) {\\n\\t\\tvar grService = new GlideRecord('sn_hr_core_service');\\n\\t\\tif (grService.get(hrServiceId)) {\\n\\t\\t\\tvar caseOptions = grService.getValue('case_options');\\n\\t\\t\\tif (caseOptions) {\\n\\t\\t\\t\\tvar options = {};\\n\\t\\t\\t\\tvar arr = caseOptions.split(',');\\n\\t\\t\\t\\tfor (var i = 0; i < arr.length; i++) {\\n\\t\\t\\t\\t\\tvar grOption = new GlideRecord(hr.TABLE_SERVICE_OPTION);\\n\\t\\t\\t\\t\\tgrOption.get(arr[i]);\\n\\t\\t\\t\\t\\toptions[grOption.value + \\\"\\\"] = grOption.value + \\\"\\\";\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t\\t// If not already passed in, and the case option isn't set, set the subject_person field to same value \\n\\t\\t\\t\\t// as opened_for\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tif (!current.subject_person && !options.hasOwnProperty('DoNotDefaultSubjectPerson'))\\n\\t\\t\\t\\t\\tcurrent.subject_person = current.opened_for;\\n\\n\\t\\t\\t\\t// Certain services add submitter's manager to watchlist\\n\\t\\t\\t\\tif (options.hasOwnProperty('AddManagerToWatchlist')) {\\n\\t\\t\\t\\t\\tvar grUser = new GlideRecord('sys_user');\\n\\t\\t\\t\\t\\tif (grUser.get(current.opened_for))\\n\\t\\t\\t\\t\\t\\tcurrent.watch_list += \\\",\\\" + grUser.manager;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Certain services do not allow users to cancel their request\\n\\t\\t\\t\\tif (options.hasOwnProperty('UserCannotCancel'))\\n\\t\\t\\t\\t\\tcurrent.submitter_can_cancel = false;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// Certain services don't want the auto assign logic to be invoked via the BR \\n\\t\\t\\t\\tif (options.hasOwnProperty('SkipAutoAssign'))\\n\\t\\t\\t\\t\\tcurrent.skip_auto_assign = true;\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\tif (options.hasOwnProperty('SkipAutomaticUserAcceptanceState'))\\n\\t\\t\\t\\t\\tcurrent.skip_automatic_user_acceptance_state = true;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tif (options.hasOwnProperty('AutomaticallyCreateDraftDocument'))\\n\\t\\t\\t\\t\\tcurrent.auto_create_draft_document = true;\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tif (options.hasOwnProperty('AutomaticallyInitiateDocumentTasks'))\\n\\t\\t\\t\\t\\tcurrent.auto_initiate_doc_tasks = true;\\n\\t\\t\\t\\t\\n\\t\\t\\t} else if (!current.subject_person) // no options exist, so going to default subject person\\n\\t\\t\\t\\tcurrent.subject_person = current.opened_for;\\n\\t\\t}\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Apply Case Options\"\n}```"}
{"prompt":"{\"prompt\":\"Set user field to empty for sys_user\",\"table\":\"sys_on_call_contact_source\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_on_call_contact_source\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tcurrent.user_field = \\\"\\\";\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.table == \\\"sys_user\\\"\",\n\t\"name\": \"Set user field to empty for sys_user\"\n}```"}
{"prompt":"{\"prompt\":\"Set Specificity for records - DA\",\"table\":\"sys_declarative_action_assignment\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_declarative_action_assignment\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar tablesCalc = current.table == 'global' ? 0 : GlideDBObjectManager.getTables(current.table).size(); \\n\\tvar specificity = Boolean(current.sys_domain) + tablesCalc * 10 + Boolean(current.view) + Boolean(current.workspace);\\n\\t\\n\\tcurrent.setValue(\\\"specificity\\\", specificity);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set Specificity for records - DA\"\n}```"}
{"prompt":"{\"prompt\":\"Source ID check\",\"table\":\"fm_expense_line\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"fm_expense_line\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"51\",\n\t\"add_message\": \"false\",\n\t\"script\": \"current.setAbortAction(true);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.source_id.nil()\",\n\t\"name\": \"Source ID check\"\n}```"}
{"prompt":"{\"prompt\":\"Abort on change of platform host\",\"table\":\"cmdb_ci_business_app\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci_business_app\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t// Condition checking if the business application is hosted on any BA of type Platform Host.\\n\\tvar gr = new GlideRecord('cmdb_ci_business_app');\\n\\tgr.addQuery('platform_host', current.getUniqueValue());\\n\\tgr.setLimit(1);\\n\\tgr.query();\\n\\t\\n\\tif(gr.next()){\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"There are Business Applications hosted on {0}, hence aborting the action.\\\", current.name));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"architecture_typeCHANGESFROMplatform_host^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Abort on change of platform host\"\n}```"}
{"prompt":"{\"prompt\":\"Clear Can Read User Criteria Cache\",\"table\":\"sttrm_model_user_criteria_read_mtom\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sttrm_model_user_criteria_read_mtom\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tSTTRMModel.clearCache();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear Can Read User Criteria Cache\"\n}```"}
{"prompt":"{\"prompt\":\"PA Validate Breakdown Source change\",\"table\":\"pa_breakdowns\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_breakdowns\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (SNC.PAScore.breakdownHasScores(current.sys_id)) {\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Breakdown Source cannot be changed because there are scores related to this breakdown\\\"));\\n\\tcurrent.setAbortAction(true);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"dimensionVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"PA Validate Breakdown Source change\"\n}```"}
{"prompt":"{\"prompt\":\"Connection: Unique check for Conn alias\",\"table\":\"sys_connection\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_connection\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\t\\n\\t// check the connection handle is set\\t\\t\\n\\tvar connAlias = current.getValue(\\\"connection_alias\\\");\\n\\tif(gs.nil(connAlias)) {\\n\\t\\tvar msgAliasMandatory = gs.getMessage(\\\"Connection alias cannot be empty\\\");\\t\\n\\t\\tgs.addErrorMessage(msgAliasMandatory);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn false;\\n\\t}\\n\\t\\n\\t// check for the uniqeness of Connection alias within a domain, Active, and Connection Type\\n\\tvar msgUniqeness = gs.getMessage(\\\"Connection alias and Domain combination for an active record already exists\\\");\\n\\tvar domain = current.getValue(\\\"sys_domain\\\");\\n\\t\\n\\tvar connGR = new GlideRecord(\\\"sys_connection\\\");\\n\\tconnGR.addQuery(\\\"connection_alias\\\", connAlias);\\n\\tconnGR.addQuery(\\\"sys_domain\\\", domain);\\n\\tconnGR.addQuery(\\\"active\\\" , true);\\t\\n\\tconnGR.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.getUniqueValue());\\n\\tconnGR.query();\\n\\t\\n\\tif (connGR.getRowCount() > 0){\\n\\t\\t\\tgs.addErrorMessage(msgUniqeness);\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\treturn false;\\n\\t}\\n\\t\\n\\treturn true;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"active=true^connection_alias.multiple_connections!=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Connection: Unique check for Conn alias\"\n}```"}
{"prompt":"{\"prompt\":\"Update history version for rejected push\",\"table\":\"sys_sync_history\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sync_history\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"//Set all to pending_push state\\nvar push = new SNC.PushAPI();\\npush.updateHistoryVersionStateForCancelledHistory(current.sys_id, current.type);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.type != \\\"pull\\\" && current.stage == \\\"rejected_invalid_scope\\\" && current.stage.changes() \",\n\t\"name\": \"Update history version for rejected push\"\n}```"}
{"prompt":"{\"prompt\":\"sys_cb_decision_variableGetChoices\",\"table\":\"global\",\"when\":\"after\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/**\\n * Return the list of variables which are Choice fields in a conversation\\n * \\n * We have to find the fields which are Choices so we can set up Decision\\n * Outcomes based on the values the user selected for these choices.\\n */\\nfunction sys_cb_decision_variableGetChoices() {\\n\\n\\t// if we don't have current, we can't figure out the variable table\\n\\tif (typeof current == \\\"undefined\\\" || JSUtil.nil(current) || !current || JSUtil.nil(current.sys_id)) {\\n\\t\\tgs.log(\\\"Error generating Topic choice-variable choices: current record is undefined or empty\\\");\\n\\t\\treturn;\\n\\t}\\n\\n\\t//answer should be automatically defined in our context when this function is called\\n\\tif (!answer) {\\n\\t\\tgs.log(\\\"Error generating Topic choice-variable choices: answer is undefined\\\");\\n\\t\\treturn;\\n\\t}\\n\\tvar variable_table = current.getValue(\\\"variable_table\\\");\\n\\tvar variable_lookup = new TopicVariableAsChoice();\\n\\n\\tvar choices = variable_lookup.getChoices(variable_table);\\n\\t\\n\\tfor (var i=0; i< choices.length; i++) {\\n\\t\\tvar choice = choices[i];\\n\\t\\tanswer.add(choice.value, choice.label);\\n\\t}\\t\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"sys_cb_decision_variableGetChoices\"\n}```"}
{"prompt":"{\"prompt\":\"Page ID\",\"table\":\"sp_page\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sp_page\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"99\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\tvar id = current.id.toLowerCase().replace(/[^a-zA-Z0-9_]/g, '_');\\n\\n\\t// Compact any multiple sequential underscores\\n\\twhile (id.indexOf(\\\"__\\\") != -1) \\n\\t\\tid = id.replace(/__/g, \\\"_\\\");\\n\\n\\t// Replace any trailing underscores\\n\\twhile (id != '' && id.charAt(id.length - 1) == '_') \\n\\t\\tid = id.substring(0, id.length - 1);\\n\\n\\tif (current.id != id)\\n\\t\\tcurrent.id = id;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.id.nil()\",\n\t\"name\": \"Page ID\"\n}```"}
{"prompt":"{\"prompt\":\"String class extensions\",\"table\":\"global\",\"when\":\"after\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"String.prototype.replaceAll = function(from, to) {\\n\\t\\treturn this.replace(from.toString(), to, 'g');\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"String class extensions\"\n}```"}
{"prompt":"{\"prompt\":\"PA Retrieve migration status\",\"table\":\"sysauto_pa\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sysauto_pa\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tg_scratchpad.is_migration_running = SNC.PAMigrator.isMigrationJobRunning();\\n\\tg_scratchpad.migration_warning_msg = SNC.PAMigrator.getDataCollectorMigrationRunningMessage();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"PA Retrieve migration status\"\n}```"}
{"prompt":"{\"prompt\":\"Handle req_enroll validation/default val\",\"table\":\"pwd_map_proc_to_verification\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pwd_map_proc_to_verification\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"50\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// Performs 2 functions:\\n//\\t 1. When inserting records, change the default value of requires_enrollment, if the verification is auto-enroll\\n//\\t 2. Enforce that at least one of the process verifications must have auto_enroll=true OR requires_enrollment=true\\n//\\t\\t\\tWe handle this by showing a message and deactivating the process (if active)\\n(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\t// Override default value if the verification type has auto enroll\\n\\t// This is done in biz rule because current is null when using a dynamic default value with M2M\\n\\tif (current.operation() == 'insert' && hasAutoEnroll(current)) {\\n\\t\\tcurrent.requires_enrollment = false;\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\t// Don't need to check other records when updating if the updated value is valid \\n\\tif (current.operation() == 'update' && (current.getValue('requires_enrollment') == true || hasAutoEnroll(current)))\\n\\t\\treturn;\\n\\t\\n\\tvar mapGr = new GlideRecord(current.sys_class_name);\\n\\tmapGr.addQuery('process', current.process);\\n\\tmapGr.addQuery('requires_enrollment', true).addOrCondition('verification.type.auto_enroll', true);\\n\\tmapGr.addQuery('sys_id', '<>', current.sys_id);\\n\\tmapGr.query();\\n\\t\\n\\tif (!mapGr.next()) {\\n\\t\\tgs.addInfoMessage(gs.getMessage('Process must be mapped to at least one verification which requires enrollment or has auto-enrollment'));\\n\\t\\tvar procGr = new GlideRecord(\\\"pwd_process\\\");\\n\\t\\tif (procGr.get(current.process) && procGr.getValue(\\\"active\\\") == true) {\\n\\t\\t\\tprocGr.setValue(\\\"active\\\", false);\\n\\t\\t\\tprocGr.update();\\n\\t\\t\\tgs.addInfoMessage(gs.getMessage('Process deactivated: {0}', procGr.getValue('name')));\\n\\t\\t}\\n\\t}\\t\\n})(current, previous);\\n\\nfunction hasAutoEnroll(current) {\\n\\treturn current.verification.type.auto_enroll + '' == 'true';\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"process.reset=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Handle req_enroll validation/default val\"\n}```"}
{"prompt":"{\"prompt\":\"Cleanup Boost Action Fields\",\"table\":\"ais_rule_action\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ais_rule_action\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (current.boost_type == \\\"indexed_source\\\") {\\n\\t\\tcurrent.boost_value = null;\\n\\t\\tcurrent.boost_context_field = null;\\n\\t\\tcurrent.boost_field_name = null;\\n\\t} else if (current.boost_type == \\\"user_context\\\") {\\n\\t\\tcurrent.boost_value = null;\\n\\t} else if (current.boost_type == \\\"field_boost\\\") {\\n\\t\\tcurrent.boost_context_field = null;\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.type == \\\"BOOST\\\"\",\n\t\"name\": \"Cleanup Boost Action Fields\"\n}```"}
{"prompt":"{\"prompt\":\"incident query\",\"table\":\"incident\",\"when\":\"before\",\"actions\":\"r\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"true\",\n\t\"collection\": \"incident\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"restrictIncidents();\\nfunction restrictIncidents() {\\n\\tif (!gs.hasRole(\\\"itil\\\") && !gs.hasRole(\\\"sn_incident_read\\\") && gs.isInteractive()) {\\n\\t\\t//Do NOT restrict Incidents if SPM premium plugin is active AND user has the service_viewer role.\\n\\t\\tif (GlidePluginManager.isActive('com.snc.spm') && gs.hasRole('service_viewer'))\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\tif (GlidePluginManager.isActive('sn_fsm_itsm_mng') && gs.hasRole('wm_ext_agent'))\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t// STRY52118544: ham_user is added to support incident read for reporting on HAM store app\\n\\t\\tif (GlidePluginManager.isActive('com.sn_hamp') && gs.hasRole('sn_hamp.ham_user')) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tvar u = gs.getUserID();\\n\\t\\tcurrent.addQuery(\\\"caller_id\\\", u).addOrCondition(\\\"opened_by\\\", u).addOrCondition(\\\"watch_list\\\", \\\"CONTAINS\\\", u);\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"incident query\"\n}```"}
{"prompt":"{\"prompt\":\"Limit number of email address filters\",\"table\":\"sys_email_system_filter\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_email_system_filter\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar maxEmailAddressFilters = GlideProperties.get('glide.email_system_address_filter.max_address_filters', 100);\\n\\t\\tvar addressFilters = current.getValue('email_address_filters');\\n\\t\\tif (GlideStringUtil.nil(addressFilters))\\n\\t\\t\\t\\treturn;\\n\\n\\t\\tvar filterArray = addressFilters.split(',');\\n\\t\\tif (filterArray.length > maxEmailAddressFilters) {\\n\\t\\t\\t\\tgs.warn('Number of email address filters associated with email system filter of sys_id [' + current.getUniqueValue() + '] has exceeded maximum value');\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Limit number of email address filters\"\n}```"}
{"prompt":"{\"prompt\":\"validateRecord\",\"table\":\"sc_catalog_view_mtom\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_catalog_view_mtom\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"10\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.addErrorMessage(gs.getMessage('Catalog: [{0}] already has view: [{1}]', [SNC.Catalog.get(current.sc_catalog).getTitle(), current.sys_portal_page.title]));\\ncurrent.setAbortAction(true);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"SNC.CatalogItemCatalog.viewRecordExists(current.getUniqueValue(), current.sc_catalog, current.sys_portal_page, current.operation())\",\n\t\"name\": \"validateRecord\"\n}```"}
{"prompt":"{\"prompt\":\"Restrictions on metric deletion\",\"table\":\"asmt_metric\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_metric\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"validateDelete();\\n\\nfunction validateDelete() {\\n\\t//Get all the instances that are based on this metric type\\n\\tvar canDelete = (new AssessmentUtils()).canDeleteMetric(current);\\n\\tif (canDelete == false) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"This question can't be deleted as user(s) have already answered it. You may mark it as inactive or edit it.\\\"));\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Restrictions on metric deletion\"\n}```"}
{"prompt":"{\"prompt\":\"Clear MID Environment Cache\",\"table\":\"cmdb_ip_address_dns_name\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ip_address_dns_name\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"clearMIDEnvCache();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear MID Environment Cache\"\n}```"}
{"prompt":"{\"prompt\":\"VCenterErrorStateHandler\",\"table\":\"cmdb_ci_vcenter\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci_vcenter\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar gr = new GlideRecord('ecc_agent_ext_context_vcenter');\\n\\tif (gr.get('vcenter',current.sys_id)){\\n\\t\\tgr.setValue('status', 'Error');\\n\\t\\tif (gr.update())\\n\\t\\t\\tgs.info(gs.getMessage(\\\"vCenter Event Collector Context: '{0}' updated to error state successfully on vCenter: '{1}' deletion\\\", [gr.name, current.name]));\\n\\t\\telse\\n\\t\\t\\tgs.info(gs.getMessage(\\\"Failed to update vCenter Event Collector Context: '{0}' error state on vCenter: '{1}' deletion\\\", [gr.name, current.name]));\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"VCenterErrorStateHandler\"\n}```"}
{"prompt":"{\"prompt\":\"Adding Business Service to Group\",\"table\":\"sa_service_group_member\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sa_service_group_member\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"checkIfRecordExists();\\n\\nfunction checkIfRecordExists() {\\n\\t// Check if the service already belongs to the group\\n\\tvar gr = new GlideRecord(\\\"sa_service_group_member\\\");\\n\\tgr.addQuery(\\\"service\\\", current.service);\\n\\tgr.addQuery(\\\"service_group\\\", current.service_group);\\n\\tgr.query();\\n\\tif(gr.next())\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Adding Business Service to Group\"\n}```"}
{"prompt":"{\"prompt\":\"Update From Dictionary Attributes\",\"table\":\"sys_dictionary\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_dictionary\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var table = current.name;\\nvar column = current.element;\\nSNC.DictionaryAttribute.updateFromDictionaryAttributesField(table, column);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.attributes.changes()\",\n\t\"name\": \"Update From Dictionary Attributes\"\n}```"}
{"prompt":"{\"prompt\":\"Reduce request price - item change\",\"table\":\"sc_req_item\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_req_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"10000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(current, previous) {\\n\\tvar requestGr = new GlideRecord(\\\"sc_request\\\");\\n\\tif (!requestGr.get(current.request.sys_id + \\\"\\\"))\\n\\t\\treturn;\\n\\t var request = new SNC.Request(requestGr, previous, current);\\n\\t if (request)\\n\\t\\t\\trequest.recalculateAllPrices();\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"requestISNOTEMPTY^EQ\",\n\t\"condition\": \"current.recurring_price.changes() || current.recurring_frequency.changes() || current.state.changes() || current.approval.changes() || current.price.changes() || current.quantity.changes() || current.operation() == 'delete'\",\n\t\"name\": \"Reduce request price - item change\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Profile IP Ranges\",\"table\":\"mid_profile_ip_range_m2m\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"mid_profile_ip_range_m2m\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar gr = new GlideRecord(\\\"mid_profile_ip_range_m2m\\\");\\n\\tgr.addQuery(\\\"ip_range\\\", current.ip_range);\\n\\tgr.addQuery(\\\"profile\\\", current.profile);\\n\\tgr.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.sys_id);\\n\\tgr.query();\\n\\tif (gr.hasNext()) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Profile IP range already exists with name: {0}\\\", current.ip_range.name));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate Profile IP Ranges\"\n}```"}
{"prompt":"{\"prompt\":\"Notify impact\",\"table\":\"cmdb_ci_service_auto\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci_service_auto\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(current, previous) {\\nif (previous.operational_status!=current.operational_status) {\\n\\tvar im = new SNC.ImpactManager();\\n\\tim.triggerImpact(current.sys_id);\\n}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Notify impact\"\n}```"}
{"prompt":"{\"prompt\":\"Ensure no same display value override\",\"table\":\"sys_dictionary_override\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_dictionary_override\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var gr = GlideRecord(\\\"sys_dictionary_override\\\");\\r\\ngr.addQuery(\\\"display_override\\\", true);\\r\\ngr.addQuery(\\\"name\\\", current.name);\\r\\ngr.query();\\r\\nif (gr.next() && gr.sys_id != current.sys_id){\\r\\n\\tcurrent.setAbortAction(true);\\r\\n\\tvar error = 'There is already a display value override for this table';\\r\\n\\tcurrent.display_override.setError(error);\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.display_override == true\",\n\t\"name\": \"Ensure no same display value override\"\n}```"}
{"prompt":"{\"prompt\":\"Scheduled Report deleted\",\"table\":\"sysauto_report\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sysauto_report\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(current, previous) {\\n\\t //This function will be automatically called when this rule is processed.\\n\\tvar scheduledMoreThanOnce = false;\\n\\tvar repId = current.report;\\n\\t\\n\\t//search if there are other schedule entries for this report\\n\\tvar grIsScheduled = new GlideRecord('sysauto_report');\\n\\tgrIsScheduled.addQuery('report',repId);\\n\\tgrIsScheduled.query();\\n\\t\\n\\tif(grIsScheduled.next()){\\n\\t\\tscheduledMoreThanOnce = true;\\n\\t\\tgs.logDebug(\\\"Report with sys_id=\\\" + repId + \\\" is_scheduled=true\\\");\\n\\t}\\n\\n\\tif (!scheduledMoreThanOnce) {\\n\\t\\tvar grReportScheduled = new GlideRecord('sys_report');\\n\\t\\tgrReportScheduled.addQuery('sys_id', repId);\\n\\t\\tgrReportScheduled.query();\\n\\t\\tif (grReportScheduled.next()){\\n\\t\\t\\tgrReportScheduled.is_scheduled = false;\\n\\t\\t\\tgrReportScheduled.update();\\n\\t\\t\\tgs.logDebug(\\\"Report with sys_id=\\\" + repId + \\\" now is_scheduled=false\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t \\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Scheduled Report deleted\"\n}```"}
{"prompt":"{\"prompt\":\"Update Setup Status\",\"table\":\"help_user_interaction_step\",\"when\":\"async_always\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"help_user_interaction_step\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async_always\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar setupService = new SNHelpSetupService();\\n\\tsetupService.updateSetupInteraction(current);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"step.type=group^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Update Setup Status\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent duplicates\",\"table\":\"sn_actsub_facet\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_actsub_facet\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar config = new GlideRecord(ActivityConstants.TABLE_ACTIVITY_FACET);\\n\\tconfig.addQuery('subobject', current.subobject);\\n\\t\\n\\tif(current.module)\\n\\t\\tconfig.addQuery('module', current.module );\\n\\telse \\n\\t\\tconfig.addNullQuery('module');\\n\\t\\n\\tif(current.sys_id)\\n\\t\\tconfig.addQuery('sys_id', '!=',current.sys_id );\\n\\tconfig.query();\\n\\tif(config.hasNext()) {\\n\\t\\tgs.addInfoMessage(gs.getMessage('An entry already exists for this Activity Context and Activity Group'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent duplicates\"\n}```"}
{"prompt":"{\"prompt\":\"Propagate run all nodes changes\",\"table\":\"sys_trigger\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_trigger\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var vncc = gs.getProperty('com.snc.cluster.vncc.enabled', false);\\nvncc = JSUtil.toBoolean(vncc);\\nvar s;\\nif (vncc)\\n\\ts = new SchedulerVNCC();\\nelse\\n\\ts = new Scheduler();\\n\\ns.propagateRANodesForTrigger(current);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.system_id == \\\"ACTIVE NODES\\\"\\t|| current.system_id == \\\"ALL NODES\\\" || (previous != null && (previous.system_id == \\\"ALL NODES\\\" || previous.system_id == \\\"ACTIVE NODES\\\"))\",\n\t\"name\": \"Propagate run all nodes changes\"\n}```"}
{"prompt":"{\"prompt\":\"Create or set DB view on insert\",\"table\":\"spotlight_groups\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"spotlight_groups\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t// create a database view\\n\\tvar factsTable = SNC.SpotlightUtil.getFactsTable(current.indicator);\\n\\tvar viewId = SNC.SpotlightUtil.createDbView(factsTable);\\n\\tif (JSUtil.nil(viewId))\\n\\t\\treturn\\tcurrent.setAbortAction(true);\\n\\tcurrent.setValue('database_view', viewId);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Create or set DB view on insert\"\n}```"}
{"prompt":"{\"prompt\":\"Question meta changed\",\"table\":\"sc_ic_question\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_ic_question\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"sc_ic_Factory.wrap(current).setMetaChangedOnItem();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"sc_ic_Factory.wrap(current).metaChanged()\",\n\t\"name\": \"Question meta changed\"\n}```"}
{"prompt":"{\"prompt\":\"Set Applies To Appropriately\",\"table\":\"catalog_script_client\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"catalog_script_client\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onDisplay(current, g_scratchpad) {\\n\\tif (current.catalog_item.hasValue())\\n\\t\\tcurrent.applies_to = \\\"item\\\";\\n\\telse if (current.variable_set.hasValue())\\n\\t\\tcurrent.applies_to = \\\"set\\\";\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.isNewRecord()\",\n\t\"name\": \"Set Applies To Appropriately\"\n}```"}
{"prompt":"{\"prompt\":\"Verify outbound profiles\",\"table\":\"sys_soap_security_policy\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_soap_security_policy\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"type=outbound^ws_security_username_profileISEMPTY^ws_security_x_509_profileISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Verify outbound profiles\"\n}```"}
{"prompt":"{\"prompt\":\"Check base url path depth\",\"table\":\"sys_ux_page_registry\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ux_page_registry\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar baseUrl = current.path;\\n\\t\\tvar baseUrlParts = baseUrl.split('/');\\n\\t\\tvar maxDepth = UxFrameworkScriptables.getMaxDepthForBaseURLPath();\\n\\t\\tif (baseUrlParts.length > maxDepth){\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('The URL path exceeds allowed max depth of {0}', maxDepth));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Check base url path depth\"\n}```"}
{"prompt":"{\"prompt\":\"Clear model\",\"table\":\"pc_product_cat_item\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pc_product_cat_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar gr = new GlideRecord('cmdb_model');\\n\\tgr.get(current.model);\\n\\tgr.product_catalog_item = \\\"\\\";\\n\\tgr.update();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.vendor_catalog_item.nil()\",\n\t\"name\": \"Clear model\"\n}```"}
{"prompt":"{\"prompt\":\"Cascade Request Approval to Request Item\",\"table\":\"sc_request\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"1300\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/**\\n * The Request has been approved, rejected or cancelled.\\tPropogate this state\\n * change down to the request items.\\n */\\nnew global.CatalogRequestUtil(current).cascadeRequestApproval();\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.approval.changes()\",\n\t\"name\": \"Cascade Request Approval to Request Item\"\n}```"}
{"prompt":"{\"prompt\":\"Warn if the feature is disabled\",\"table\":\"sa_agg_alert_filter\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sa_agg_alert_filter\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t\\tif(gs.getProperty(\\\"sa_analytics.filtered_alerts_enabled\\\") == \\\"false\\\")\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"The property: sa_analytics.filtered_alerts_enabled is set to false. please change it back to true for the changes to be considered.\\\"));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Warn if the feature is disabled\"\n}```"}
{"prompt":"{\"prompt\":\"Create index for identification\",\"table\":\"cmdb_identifier_entry\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_identifier_entry\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(current, previous) {\\n\\t\\t//This function will be automatically called when this rule is processed.\\n\\t\\tif (!current.identifier || !current.attributes)\\n\\t\\t\\t\\treturn;\\n\\t\\n\\tvar appliesTo = current.table ? current.table : current.identifier.applies_to;\\n\\t// index ci attributes for current.table\\n\\taddIndex(appliesTo, current.attributes);\\n\\t\\n\\t// do the indexing for hybrid rules if we have a hybrid rule\\n\\tif (current.table != current.identifier.applies_to) {\\n\\t\\taddIndex(current.identifier.applies_to, current.hybrid_entry_ci_criterion_attributes);\\n\\t}\\n}\\n\\nfunction addIndex(tableName, attributes) {\\n\\t\\n\\t\\tif (!attributes) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\n\\t\\tif (!tableName)\\n\\t\\t\\t\\treturn;\\n\\t\\n\\t\\tvar columns = attributes.split(',');\\n\\n\\t\\tvar grAppliesTo = new GlideRecord(tableName);\\n\\t\\tfor (var i in columns) {\\n\\t\\t\\t\\tvar column = columns[i];\\n\\t\\t\\t\\tvar table = grAppliesTo.getElement(column).getTableName();\\n\\t\\t\\t\\tvar index = new IndexCreator(table, column, false, null, \\\"identification\\\");\\n\\t\\t\\t\\tindex.schedule();\\n\\t\\t}\\n}\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Create index for identification\"\n}```"}
{"prompt":"{\"prompt\":\"svcFindCisWithActiveErrors\",\"table\":\"global\",\"when\":\"before\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function svcFindCisWithActiveErrors(errorCode) {\\n\\tvar gr = new GlideRecord('error_to_service');\\n\\tgr.addQuery('err_error_code', errorCode);\\n\\tgr.addQuery('svc_ignore_errors', false);\\n\\tgr.query();\\n\\tvar prefix = '';\\n\\tvar ids = '';\\n\\twhile (gr.next()) {\\n\\t\\tids = ids + prefix + gr.getValue('svc_ci_id');\\n\\t\\tprefix = ',';\\n\\t}\\n\\treturn ids;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"svcFindCisWithActiveErrors\"\n}```"}
{"prompt":"{\"prompt\":\"Clear ACLs when disabled\",\"table\":\"sys_hub_action_type_base\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_hub_action_type_base\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tcurrent.acls = '';\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"callable_by_client_apiCHANGESTOfalse^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear ACLs when disabled\"\n}```"}
{"prompt":"{\"prompt\":\"Check for primary experience\",\"table\":\"sys_ux_page_registry\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ux_page_registry\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar pageRegId = current.sys_id;\\n\\tif (current.parent_app != previous.parent_app) {\\n\\t\\tvar primaryExpParentRecord = GlideRecord(\\\"sys_ux_app\\\");\\n\\t\\tprimaryExpParentRecord.addQuery(\\\"primary_experience\\\", pageRegId);\\n\\t\\tprimaryExpParentRecord.query();\\n\\n\\t\\tif (primaryExpParentRecord.next()){\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Please remove this experience as the primary experience in the Parent App table before updating this parent app association\\\"));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Check for primary experience\"\n}```"}
{"prompt":"{\"prompt\":\"Set field values into scratchpad\",\"table\":\"sla_breakdown_definition_field\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sla_breakdown_definition_field\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tg_scratchpad.breakdownFieldName = current.getValue(\\\"breakdown_field_name\\\");\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set field values into scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"Clear SLA Breakdown definitions cache\",\"table\":\"sla_definition_sla_breakdown\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sla_definition_sla_breakdown\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tglobal.SLACacheManager.flushSLADefSLABreakdowns();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear SLA Breakdown definitions cache\"\n}```"}
{"prompt":"{\"prompt\":\"CopyFieldsFromParent2ChildBeforeInsert\",\"table\":\"sys_alias\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_alias\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (current.parent) {\\n\\t\\tvar provider = new sn_cc.AliasProvider();\\n\\t\\tprovider.copyParentAliasFields(current);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"CopyFieldsFromParent2ChildBeforeInsert\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Field Agent Type\",\"table\":\"alm_stockroom\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"alm_stockroom\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (!SNC.AssetMgmtUtil.isPluginRegistered('com.snc.field_service_management')) {\\r\\n\\tgs.addErrorMessage(gs.getMessage('Field Agent type is not allowed without Field Service Management activated'));\\r\\n\\tcurrent.setAbortAction('true');\\r\\n} else {\\r\\n\\tgs.include('FSMUtils');\\r\\n\\tvar stockroom = new FSMUtils().getFSAStockroom(current.manager);\\r\\n\\tif (stockroom != null && stockroom != current.sys_id) {\\r\\n\\t\\tgs.addErrorMessage(gs.getMessage('Personal stockroom already exists for {0}', current.manager.name));\\r\\n\\t\\tcurrent.setAbortAction('true');\\r\\n\\t}\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.type.value == 'field_agent'\",\n\t\"name\": \"Validate Field Agent Type\"\n}```"}
{"prompt":"{\"prompt\":\"Enable/Disable the advanced column\",\"table\":\"sn_ex_sp_activity_configuration\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_ex_sp_activity_configuration\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar itemConfig = new sn_ex_sp.ActivityConfigurationUtil();\\n\\tg_scratchpad.isConfigExists = itemConfig.isActivityConfigDetailPresent(current.sys_id);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Enable/Disable the advanced column\"\n}```"}
{"prompt":"{\"prompt\":\"Add worknote for checklist CRUD\",\"table\":\"checklist\",\"when\":\"before\",\"actions\":\"cd\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"checklist\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current) {\\n\\tvar grTask = new GlideRecord(current.table);\\n\\tif (grTask.get(current.document) && grTask.isValidField(\\\"work_notes\\\")) {\\n\\t\\tvar worknote;\\n\\t\\tif (current.operation() == 'insert') {\\n\\t\\t\\t// CREATE\\n\\t\\t\\tworknote = gs.getMessage('Checklist created');\\n\\t\\t} else if (current.operation() == 'delete') {\\n\\t\\t\\t// DELETE\\n\\t\\t\\tworknote = gs.getMessage('Checklist deleted');\\n\\t\\t}\\n\\t\\tgrTask.work_notes = worknote;\\n\\t\\tgrTask.update();\\t\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Add worknote for checklist CRUD\"\n}```"}
{"prompt":"{\"prompt\":\"Synchronize Policy\",\"table\":\"sys_hub_flow_component\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_hub_flow_component\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar flow = new GlideRecord(\\\"sys_hub_flow_base\\\");\\n\\tif (flow.get(current.flow)) {\\n\\t\\tcurrent.sys_policy = flow.sys_policy;\\n\\t\\tcurrent.update();\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Synchronize Policy\"\n}```"}
{"prompt":"{\"prompt\":\"Add recipients to conversation\",\"table\":\"sn_hr_core_task\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar conversation = sn_connect.Conversation.get(current.getUniqueValue(),current.getValue('sys_class_name'));\\n\\tif(conversation)\\n\\t\\tconversation.addSubscriber(current.getValue('assigned_to'));\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"assigned_toVALCHANGES^EQ\",\n\t\"condition\": \"hr_TaskTicket.hasConversation(current.sys_id);\",\n\t\"name\": \"Add recipients to conversation\"\n}```"}
{"prompt":"{\"prompt\":\"Empty Name Check\",\"table\":\"cmdb_ci_cloud_service_account\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci_cloud_service_account\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (gs.nil(current.name.trim())) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Name should not be empty.\\\"));\\n\\t }\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Empty Name Check\"\n}```"}
{"prompt":"{\"prompt\":\"Set Batch\",\"table\":\"sys_update_set\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_update_set\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar previousParent = \\\"\\\";\\n\\tif(!previous.parent.nil())\\n\\t\\tpreviousParent = previous.parent.sys_id;\\n\\t\\n\\tnew SNC.HierarchyUpdateSetScriptable().setHierarchy(current, previousParent);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"parentVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Set Batch\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent submission if encrypted\",\"table\":\"ml_solution_definition\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ml_solution_definition\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\tvar gr = new GlideRecord(current.table);\\n\\t\\tvar fields = [];\\n\\t\\tif (current.getValue('input_fields')) \\n\\t\\t\\tfields = current.getValue('input_fields').split(',');\\n\\t\\tif (current.getValue('output_field')) \\n\\t\\t\\tfields.push(current.output_field);\\n\\t\\tfor (var i = 0; i < fields.length; i++) {\\n\\t\\t\\tvar field = fields[i];\\n\\t\\t\\tvar ed = gr.getElement(field).getED();\\n\\t\\t\\tvar isEdgeEncryption = ed.isEdgeEncrypted();\\n\\t\\t\\tvar isPlatformEncryption = ed.isEncrypted();\\n\\n\\t\\t\\tif (isEdgeEncryption) {\\n\\t\\t\\t\\tvar errorMessage = gs.getMessage('Input and output fields cannot be encrypted');\\n\\t\\t\\t\\tgs.addErrorMessage(errorMessage);\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t} else if (isPlatformEncryption) {\\n\\t\\t\\t\\tvar message = gs.getMessage('The field {0} is platform encrypted. Please ensure you assign the correct role to sharedservice.worker in order to build an accurate model.', gr.getElement(field).getLabel());\\n\\t\\t\\t\\tgs.addInfoMessage(message);\\n\\t\\t\\t}\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent submission if encrypted\"\n}```"}
{"prompt":"{\"prompt\":\"Validate template_value compliance\",\"table\":\"std_change_proposal_task\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"std_change_proposal_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"80\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*undefined when async or display*/ ) {\\n\\n\\tvar result = new StdChangeTaskUtils().validateTemplateValueCompliance(current);\\n\\tif (!result)\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\n})(current, typeof previous != 'undefined' ? previous : null);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate template_value compliance\"\n}```"}
{"prompt":"{\"prompt\":\"Abort If UX App Path Invalid\",\"table\":\"sys_ux_page_registry\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ux_page_registry\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar regex = /^\\\\/?[\\\\w$\\\\-+!*'(),]+(\\\\/?[\\\\w$\\\\-+!*'(),]+)*\\\\/?$/gi;\\n\\tvar newPathValue = current.path;\\n\\t\\n\\tif (!regex.test(newPathValue)) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tvar errorMessage = gs.getMessage('Attempt to set UX Application path to an invalid value (\\\"{0}\\\"-invalid characters and/or formatting detected). Aborting.', newPathValue);\\n\\t\\tgs.addErrorMessage(errorMessage);\\n\\t}\\n\\t\\n\\tvar routes = newPathValue.split('/');\\n\\tvar reservedRoutes = UxFrameworkScriptables.getReservedRoutes();\\n\\t\\n\\tfor (var route in routes) {\\n\\t\\tvar part = routes[route];\\n\\t\\tif (reservedRoutes.indexOf(part) >= 0) {\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\terrorMessage = gs.getMessage('Attempt to set UX Application path to an invalid value (\\\"{0}\\\" is a reserved route). Aborting.', part);\\n\\t\\t\\tgs.addErrorMessage(errorMessage);\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Abort If UX App Path Invalid\"\n}```"}
{"prompt":"{\"prompt\":\"Check for same name variables\",\"table\":\"item_option_new\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"item_option_new\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.cat_item != \\\"\\\") {\\n\\tvar gr = new GlideRecord(\\\"io_set_item\\\");\\n\\tgr.addQuery(\\\"sc_cat_item\\\", current.cat_item);\\n\\tgr.query();\\n\\twhile (gr.next())\\n\\t\\tif (gr.variable_set.internal_name == current.name || gr.variable_set.title == current.name) {\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"The variable set {0} has the same name or title as a variable associated with the same catalog item '{1}'. Keep the names of variables and variable set internal name and title associated with a catalog item unique.\\\", [gr.variable_set.internal_name + \\\"\\\", current.cat_item.name]));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\t\\n\\tcheckItem(current.cat_item.sys_id, current.cat_item.name, current.sys_id, current.name, null, null);\\n}\\n\\nif (current.variable_set != \\\"\\\") {\\n\\tif (current.variable_set.internal_name == current.name || current.variable_set.title == current.name) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"This variable has the same name as the variable set '{0}' internal name or title. Keep the variable set internal name and title and the names of the variables associated with it unique.\\\", [current.variable_set.internal_name]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\t\\n\\tvar matchingVariableCount = 0;\\n\\tvar gr = new GlideRecord(\\\"item_option_new\\\");\\n\\tgr.addQuery(\\\"name\\\", current.name);\\n\\tgr.addQuery(\\\"variable_set\\\", current.variable_set);\\n\\tgr.query();\\n\\twhile (gr.next())\\n\\t\\tif (gr.sys_id != current.sys_id)\\n\\t\\t\\tmatchingVariableCount++;\\n\\tif (matchingVariableCount > 0) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"The variable set {1} has {0} other variable(s) with the same name associated with it. Keep the names of variables associated with a variable set unique.\\\", [parseInt(matchingVariableCount)+\\\"\\\", current.variable_set.internal_name]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\t\\n\\tgr = new GlideRecord(\\\"io_set_item\\\");\\n\\tgr.addQuery(\\\"variable_set\\\", current.variable_set);\\n\\tgr.query();\\n\\twhile (gr.next()) {\\n\\t\\tcheckItem(gr.sc_cat_item.sys_id, gr.sc_cat_item.name, current.sys_id, current.name, current.variable_set.sys_id, current.variable_set.internal_name);\\n\\t}\\n}\\n\\nfunction checkItem(item_id, item_name, var_id, var_name, exclude_set_id, exclude_set_name) {\\n\\tvar matchingVariableCount = 0;\\n\\tvar gr = new GlideRecord(\\\"item_option_new\\\");\\n\\tgr.addQuery(\\\"name\\\", var_name);\\n\\tgr.addQuery(\\\"cat_item\\\", item_id);\\n\\tgr.query();\\n\\twhile (gr.next())\\n\\t\\tif (gr.sys_id != var_id)\\n\\t\\t\\tmatchingVariableCount++;\\n\\tif (matchingVariableCount > 0) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"The catalog item {1} has {0} other variable(s) with the same name associated with it. Keep the names of variables associated with a catalog item unique.\\\", [parseInt(matchingVariableCount)+\\\"\\\", item_name]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n\\tvar gr = new GlideRecord(\\\"io_set_item\\\");\\n\\tgr.addQuery(\\\"sc_cat_item\\\", item_id);\\n\\tgr.query();\\n\\twhile (gr.next()) {\\n\\t\\tif (exclude_set_id == gr.variable_set)\\n\\t\\t\\tcontinue;\\n\\t\\tvar setVariableCount = 0;\\n\\t\\tvar vr = new GlideRecord(\\\"item_option_new\\\");\\n\\t\\tvr.addQuery(\\\"name\\\", var_name);\\n\\t\\tvr.addQuery(\\\"variable_set\\\", gr.variable_set);\\n\\t\\tvr.query();\\n\\t\\twhile (vr.next())\\n\\t\\t\\tif (vr.sys_id != var_id)\\n\\t\\t\\t\\tsetVariableCount++;\\n\\t\\tif (setVariableCount > 0) {\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"There are {0} other variable(s) with the same name associated with the variable set '{1}', which is linked to the catalog item '{2}'. Keep the names of variables and variable set internal name and title associated with a catalog item unique.\\\", [parseInt(setVariableCount)+\\\"\\\", gr.variable_set.internal_name+\\\"\\\", item_name]));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"typeNOT IN12,19,20,24^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Check for same name variables\"\n}```"}
{"prompt":"{\"prompt\":\"Only one null parent allowed\",\"table\":\"sys_cb_node\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cb_node\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar NO_EMPTY_PARENT = gs.getMessage(\\\"There is already a top-level Prompt, Action, Decision or Collector. Please select an appropriate Parent for this record and resubmit.\\\");\\n\\t\\n\\tvar node = new GlideRecord(\\\"sys_cb_node\\\");\\n\\tnode.addNullQuery(\\\"parent\\\");\\n\\tnode.addQuery(\\\"topic_goal\\\", current.getValue(\\\"topic_goal\\\"));\\n\\tnode.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.getValue(\\\"sys_id\\\"));\\n\\tnode.addQuery(\\\"sys_class_name\\\", \\\"!=\\\", \\\"sys_cb_collector\\\");\\n\\tnode.query();\\n\\t\\n\\tif (node.hasNext()) {\\n\\t\\tgs.addInfoMessage(NO_EMPTY_PARENT);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\t\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"parentISEMPTY^sys_class_name!=sys_cb_collector^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Only one null parent allowed\"\n}```"}
{"prompt":"{\"prompt\":\"Implicit dependency - Dependents change\",\"table\":\"gsw_content_group\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"gsw_content_group\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tnew GuidedSetupUtilSNC().updateImplicitDependencyOfChild(current);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"dependent_on_contentsVALCHANGES^ORimplicit_dependent_onVALCHANGES^ORdependent_on_pluginsVALCHANGES^ORimplicit_plugin_dependenciesVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Implicit dependency - Dependents change\"\n}```"}
{"prompt":"{\"prompt\":\"Check Requested For on variable\",\"table\":\"item_option_new\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"item_option_new\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar catItem = current.cat_item;\\n\\tvar variableSet = current.variable_set;\\n\\tvar requestedForUtil = new RequestedForUtil();\\n\\n\\tif (catItem && requestedForUtil.hasRequestedForOnItem(catItem)) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Catalog Item cannot include multiple Requested For variables. {0}\\\", requestedForUtil.getDocumentationLink()));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\tif (variableSet) {\\n\\t\\tvar globalServiceCatalogUtil = new GlobalServiceCatalogUtil();\\n\\t\\tif (globalServiceCatalogUtil.isMultiRowVariableSet(variableSet)) {\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Multi-row variable set cannot include a Requested For variable. {0}\\\", requestedForUtil.getDocumentationLink()));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tif (requestedForUtil.hasRequestedForOnVariableSet(variableSet)) {\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Variable Set cannot include multiple Requested For variables. {0}\\\", requestedForUtil.getDocumentationLink()));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t//Check on items attached to variable set\\n\\t\\tvar gr = new GlideRecord(\\\"io_set_item\\\");\\n\\t\\tgr.addQuery(\\\"variable_set\\\", variableSet);\\n\\t\\tgr.query();\\n\\t\\twhile(gr.next()) {\\n\\t\\t\\tif (requestedForUtil.hasRequestedForOnItem(gr.sc_cat_item)) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Requested For variable is already defined on catalog item(s) associated with this variable set. {0}\\\", requestedForUtil.getDocumentationLink()));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.type == '31' && (current.cat_item.changes() || current.variable_set.changes() || current.type.changes())\",\n\t\"name\": \"Check Requested For on variable\"\n}```"}
{"prompt":"{\"prompt\":\"RaiseCMDBGroupModifiedEvent\",\"table\":\"cmdb_group_contains_qb_query\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_group_contains_qb_query\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tsn_cmdbgroup.CMDBGroupAPI.enqueueEvent(current.group, 'update');\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"RaiseCMDBGroupModifiedEvent\"\n}```"}
{"prompt":"{\"prompt\":\"Clear 'Value' if condition is 'All time'\",\"table\":\"pa_thresholds\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"false\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_thresholds\",\n\t\"advanced\": \"false\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"conditionINall_time_high,all_time_low^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear 'Value' if condition is 'All time'\"\n}```"}
{"prompt":"{\"prompt\":\"Hide 'Dependent on field' prefix\",\"table\":\"var_dictionary\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"var_dictionary\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (!current.dependent_on_field)\\n\\t\\treturn;\\n\\n\\tvar value = current.dependent_on_field.getValue();\\n\\tvar firstDot = value.indexOf(\\\".\\\");\\n\\tcurrent.dependent_on_field = value.substring(firstDot+1);\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"dependent_on_fieldLIKE.^use_dependent_field=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Hide 'Dependent on field' prefix\"\n}```"}
{"prompt":"{\"prompt\":\"Set float to display of start/end\",\"table\":\"business_calendar_span\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"business_calendar_span\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tcurrent.float_start = current.getDisplayValue('start');\\n\\tcurrent.float_end = current.getDisplayValue('end');\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.schedule.is_legacy_schedule\",\n\t\"name\": \"Set float to display of start/end\"\n}```"}
{"prompt":"{\"prompt\":\"Sync Originating Environment\",\"table\":\"sn_collab_request_dev_collab_task\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_collab_request_dev_collab_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\ttry {\\n\\t\\tvar pipelineEnvironmentGR = new GlideRecord(CollabTaskConstants.tables.PIPELINE_ENVIRONMENT);\\n\\t\\tvar hasOriginatingInstanceIDInEnvironment = pipelineEnvironmentGR.get('instance_id', current.originating_instance_id);\\n\\n\\t\\tif (!hasOriginatingInstanceIDInEnvironment) return;\\n\\n\\t\\tcurrent.setValue('originating_environment', pipelineEnvironmentGR.getUniqueValue());\\n\\t\\tcurrent.update();\\n\\t} catch(e) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('Unable to update originating environment'));\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"originating_instance_idVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Sync Originating Environment\"\n}```"}
{"prompt":"{\"prompt\":\"Update task timer\",\"table\":\"task_time_worked\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"task_time_worked\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/**\\n Service-now.com\\n \\n Description: \\n Allows for the modifications of task_time_worked values to update the task timer field. \\n Typically the timer is self controlled based on a cumulative value so changing a task time worked value will make the task timer appear inaccurate.\\n Requires setting property 'com.snc.time_worked.update_task_timer' to true\\n**/\\n\\nvar msg = new TaskTimer().updateTaskTimer(current.task.getRefRecord());\\nif (msg)\\n\\tgs.addInfoMessage(msg);\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"gs.getProperty(\\\"com.snc.time_worked.update_task_timer\\\") === \\\"true\\\"\",\n\t\"name\": \"Update task timer\"\n}```"}
{"prompt":"{\"prompt\":\"Live Profile Avatar Photo Update\",\"table\":\"live_profile\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"live_profile\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Reload the user from DB which will reset the Avatar Image stored in the cache\\n\\tgs.getSession().loadUserByID(gs.getUser().getID());\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"photoVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Live Profile Avatar Photo Update\"\n}```"}
{"prompt":"{\"prompt\":\"Unload Form\",\"table\":\"sys_ui_section\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ui_section\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"//Need to unload the sys_ui_form_sections file for the sys_ui_form because\\n//the sys_ui_form_sections have cascade delete on sys_ui_element.\\tSince\\n//sys_ui_form_section is not update_synch (and shouldn't be) we need to\\n//make sure sys_ui_form_sections file is correct\\n\\n//get the form\\nvar formGR = new GlideRecord(\\\"sys_ui_form\\\");\\nformGR.addQuery(\\\"name\\\", current.name);\\nformGR.addQuery(\\\"view\\\", current.view);\\nformGR.query();\\nif (formGR.next()) {\\n\\t var formSysID = formGR.getValue(\\\"sys_id\\\");\\n\\t var sf = new GlideSysForms(current.name);\\n\\t sf.setFormID(formSysID);\\n\\t if (current.view && current.view != null && current.view.name && current.view.name != null)\\n\\t \\t sf.setView(current.view.name);\\n\\t sf.save();\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Unload Form\"\n}```"}
{"prompt":"{\"prompt\":\"Remove relatedTasks when virtual changes\",\"table\":\"em_alert\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"em_alert\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar alertManager = new SNC.AlertManager();\\n\\talertManager.addStep(\\\"Alert BR: Remove relatedTasks when virtual changes (after)\\\");\\n\\tvar emAiInsight = new EmAiInsightCommon();\\n\\temAiInsight.removeStateRecord(current.sys_id);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"group_sourceIN1,4^message_keyVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Remove relatedTasks when virtual changes\"\n}```"}
{"prompt":"{\"prompt\":\"Life Cycle Mapping Uniqueness\",\"table\":\"life_cycle_mapping\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"life_cycle_mapping\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\tvar table = current.getValue('table');\\n\\tvar legacyFieldName = current.getValue('legacy_field_name');\\n\\tvar legacyFieldValue = current.getValue('legacy_field_value');\\n\\tvar legacySubfieldName = current.getValue('legacy_subfield_name');\\n\\tvar legacySubfieldValue = current.getValue('legacy_subfield_value');\\n\\t\\n\\tvar gr = new GlideRecord('life_cycle_mapping');\\n\\tgr.addQuery('table', table);\\n\\tgr.addQuery('legacy_field_name', legacyFieldName);\\n\\tgr.addQuery('legacy_field_value', legacyFieldValue);\\n\\tgr.addQuery('legacy_subfield_name', legacySubfieldName);\\n\\tgr.addQuery('legacy_subfield_value', legacySubfieldValue);\\n\\tgr.query();\\n\\t\\n\\tif (gr.next()) {\\n\\t\\tif (current.sys_id != gr.getUniqueValue()) {\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Cannot enter duplicate mapping record for same Table/Legacy Field:Value/Legacy Subfield:Value combination.\\\"));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Life Cycle Mapping Uniqueness\"\n}```"}
{"prompt":"{\"prompt\":\"Check FX Currency Dependent Field\",\"table\":\"sys_dictionary\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_dictionary\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"internal_type=currency2^use_dependent_field=true^dependent_on_fieldLIKE.^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Check FX Currency Dependent Field\"\n}```"}
{"prompt":"{\"prompt\":\"Change to operational status\",\"table\":\"cmdb_ci_service_discovered\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci_service_discovered\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t//always clear the error flag, will set only if error occurs\\n\\tgs.getSession().clearClientData('opStatusServiceEmpty');\\n\\t\\n\\t// In case the previous sys_class_name is cmdb_ci_service, do not change anything\\n\\tif ('cmdb_ci_service' == gs.getSession().getProperty('convert_from')) \\n\\t\\treturn;\\n\\t\\n\\t//in case business service process status is changed to approved, BS should become operational.\\n\\tif(previous.process_status != current.process_status && current.process_status == 5 && current.operational_status != 1)\\n\\t\\t current.operational_status = 1;\\n\\n\\t// Add your code here\\n\\tif (current.operational_status != 1)\\n\\t\\treturn;\\n\\t\\n\\t\\n\\tvar gr = new GlideRecord('sa_m2m_service_entry_point');\\n\\tgr.addQuery('cmdb_ci_service', current.sys_id);\\n\\t\\tgr.query();\\n\\t\\n\\t//if no entrypoints for service, abort the action to avoid operational status.\\n\\tif (!gr.next()) {\\n\\t\\t// If previously operational, should become non-operational\\n\\t\\tif (previous.operational_status == 1) {\\n\\t\\t\\tgs.addInfoMessage(gs.getMessage(\\\"There are no entry points for service, changing status to Non-Operational.\\\"));\\n\\t\\t\\tcurrent.operational_status = 2;\\n\\t\\t} else {\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Empty service cannot be operational. Add some entry-points.\\\"));\\n\\t\\t\\t\\n\\t\\t\\t//set error flag for UI angular form.\\n\\t\\t\\tgs.getSession().putClientData('opStatusServiceEmpty', 'true');\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Change to operational status\"\n}```"}
{"prompt":"{\"prompt\":\"Set default values\",\"table\":\"sys_nowmq_provider_param\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_nowmq_provider_param\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tcurrent.name = current.parameter.name;\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set default values\"\n}```"}
{"prompt":"{\"prompt\":\"sc req item events\",\"table\":\"sc_req_item\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_req_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.operation() == 'insert') {\\r\\n gs.eventQueue(\\\"sc_req_item.inserted\\\", current, gs.getUserID(), gs.getUserName());\\r\\n}\\r\\n\\r\\nif (current.operation() == 'update') {\\r\\n gs.eventQueue(\\\"sc_req_item.updated\\\", current, gs.getUserID(), gs.getUserName());\\r\\n}\\r\\n\\r\\nif (current.operation() == 'update' && current.stage == \\\"delivery\\\") {\\r\\n gs.eventQueue(\\\"sc_req_item.delivery\\\", current, gs.getUserID(), gs.getUserName());\\r\\n}\\r\\n\\r\\nif (!current.assigned_to.nil() && current.assigned_to.changes()) {\\r\\n\\tgs.eventQueue(\\\"sc_req_item.assigned\\\", current, current.assigned_to.getDisplayValue() , previous.assigned_to.getDisplayValue());\\r\\n}\\r\\n\\r\\nif (current.stage.changes()) {\\r\\n\\tgs.eventQueue(\\\"sc_req_item.change.stage\\\", current, current.stage, previous.stage);\\r\\n}\\r\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"sc req item events\"\n}```"}
{"prompt":"{\"prompt\":\"Update content_url of Resource Content\",\"table\":\"sn_app_eng_studio_resources_content\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_app_eng_studio_resources_content\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar contextDocUrlPath = '/api/now/v1/context_doc_url/';\\n\\n\\t\\tcurrent.content_url = contextDocUrlPath + current.content_url;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.content_url && !(current.content_url.startsWith('http') || current.content_url.startsWith('/api/now/v1/context_doc_url/'))\",\n\t\"name\": \"Update content_url of Resource Content\"\n}```"}
{"prompt":"{\"prompt\":\"Link interction m2m\",\"table\":\"sc_request\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (!previous.parent_interaction.nil()) {\\n\\t\\tvar gr = new GlideRecord('interaction_related_record');\\n\\t\\tgr.addQuery('document_id', current.sys_id);\\n\\t\\tgr.addQuery('document_table', current.getTableName());\\n\\t\\tgr.query();\\n\\t\\tif (gr.next()) {\\n\\t\\t\\tgr.interaction = current.parent_interaction;\\n\\t\\t\\tgr.update();\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t}\\n\\telse {\\n\\t\\tvar gr = new GlideRecord('interaction_related_record');\\n\\t\\tgr.initialize();\\n\\t\\tgr.document_id = current.sys_id;\\n\\t\\tgr.document_table = current.getTableName();\\n\\t\\tgr.interaction = current.parent_interaction;\\n\\t\\tgr.insert();\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.parent_interaction.changes() && !current.parent_interaction.nil()\",\n\t\"name\": \"Link interction m2m\"\n}```"}
{"prompt":"{\"prompt\":\"Update asset display names\",\"table\":\"cmdb_model\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_model\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"updateAssets(current);\\n\\nfunction updateAssets(current) {\\n\\tvar asset = new GlideRecord(\\\"alm_asset\\\");\\n\\tasset.addQuery(\\\"model\\\", current.sys_id);\\n\\tasset.query();\\n\\twhile (asset.next()) {\\n\\t\\tif (new AssetUtils().calculateDisplayName(asset))\\n\\t\\t\\tasset.update();\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.display_name.changes()\",\n\t\"name\": \"Update asset display names\"\n}```"}
{"prompt":"{\"prompt\":\"Hide user name when anonymize survey\",\"table\":\"asmt_category_result\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_category_result\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"1000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// When the survey was set up as \\\"Anonymize response\\\", we need to hide survey user's name\\n\\tcurrent.autoSysFields(false);\\n\\tcurrent.setValue(\\\"sys_updated_by\\\", \\\"guest\\\");\\n\\tcurrent.setValue(\\\"sys_created_by\\\", \\\"guest\\\");\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"metric_type.anonymize=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Hide user name when anonymize survey\"\n}```"}
{"prompt":"{\"prompt\":\"Populate scratchpads for subscription\",\"table\":\"license_details\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"license_details\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onDisplay(current, g_scratchpad) {\\n\\t //This function will be automatically called when this rule is processed.\\n\\tg_scratchpad.subscriptionWikiLink = gs.getProperty('help.base.servicenow')+ 'CSHelp:Subscription-Usage-Application';\\n\\tg_scratchpad.subscriptionWikiTitle = gs.getMessage('More Info');\\n\\tg_scratchpad.perUserDispOnlySubMsg = gs.getMessage('This subscription does not require detailed monitoring. No action is required on your part.');\\n\\tg_scratchpad.perUserSubMsg = gs.getMessage('Your organization purchased a subscription for the number of users who should be allowed to access subscription applications and capabilities. As the usage administrator, you are required to allocate eligible users to the subscription.');\\n\\tg_scratchpad.capacitySubMsg = gs.getMessage('Your ServiceNow instance auto-allocates software or hardware resources to this subscription. No action is required on your part.');\\n\\tg_scratchpad.maxUserSubMsg = gs.getMessage('Unrestricted-user licenses are auto-allocated based on the number of active users. For more details, <a id=\\\"permalink\\\" class=\\\"linked\\\" style=\\\"color:#666666;\\\" href=\\\"/api/now/v1/context_doc_url/types_of_subscriptions\\\" target=\\\"_blank\\\">view our documentation.</a>');\\n\\tg_scratchpad.unlimitedUserSubMsg = gs.getMessage('All active users with a valid User ID can use this subscription. No action is required on your part.');\\n\\tg_scratchpad.paIndicatorSubMsg = gs.getMessage('Performance Analytics Indicators may be created on any tables on the applications associated with this subscription. No action is required on your part.');\\n\\tg_scratchpad.viewSubscriptionHistory = gs.getMessage('Subscription History');\\n\\tg_scratchpad.viewUserSubscriptionHistory = gs.getMessage('User Subscription History');\\n\\tg_scratchpad.hasMultipleLineItems = hasMultipleLineItems();\\n\\tg_scratchpad.hasEntitlements = hasEntitlements();\\n\\tg_scratchpad.hasApplications = hasApplications();\\n\\tg_scratchpad.hasFamilies = hasFamilies();\\n\\tg_scratchpad.invalidAllocatedMsg = gs.getMessage('Allocated: Unable to determine the number of allocated resources or users.');\\n\\n\\tvar utils = new SNSubscriptionUtils();\\n\\tvar allotmentType = hasPlatformLicAllotment();\\n\\tg_scratchpad.hasPlatformLicAllotment = allotmentType;\\n\\n\\tg_scratchpad.hasITOMRatios = hasLicenseMetadata('itom_su_ratio');\\n\\tg_scratchpad.hasIHSpokes = hasLicenseMetadata('ih_spoke');\\n\\tg_scratchpad.hasIHSpokeActions = hasLicenseMetadata('sku_ih_spoke_action');\\n\\tg_scratchpad.hasIHSpokeCallerScopes = hasLicenseMetadata(\\\"ih_spoke_caller_scope\\\");\\n\\tg_scratchpad.hasIHProtocols = hasLicenseMetadata('ih_protocol');\\n\\tg_scratchpad.hasIHFeatures = hasLicenseMetadata('ih_feature');\\n\\tg_scratchpad.hasLicPool = hasLicenseMetadata('license_pool');\\n\\t\\n\\tg_scratchpad.entitlementLevel = SNC.UsageAnalyticsScriptUtils.getEntitlementLevel();\\n\\tg_scratchpad.autoSystemEntitlementEnabled = SNC.UsageAnalyticsScriptUtils.isAutoSystemEntitlementEnabled();\\n\\n\\tvar isIhType = SNC.UsageAnalyticsScriptUtils.isLicenseIHType(current.license_id);\\n\\tif (isIhType) {\\n\\t\\tif(g_scratchpad.hasLicPool == true) {\\n\\t\\t\\tvar contributed = utils._getUsageAnalyticsCount(current, utils.LIC_CCU, \\\"count\\\");\\n\\t\\t\\tif(contributed > 0)\\n\\t\\t\\t\\tg_scratchpad.rollingUsage = \\\"Contributed: \\\" + contributed;\\n\\t\\t} else {\\n\\t\\t\\tvar borrowed = utils._getUsageAnalyticsCount(current, utils.LIC_BCU, \\\"count\\\");\\n\\t\\t\\tif(borrowed > 0)\\n\\t\\t\\t\\tg_scratchpad.rollingUsage = \\\"Used: \\\" + current.count + \\\" Borrowed: \\\" + borrowed;\\n\\t\\t}\\n\\t}\\n\\n\\tif (allotmentType == utils.PLAT_BUNDLE_ALLOT_TYPE)\\n\\t\\tgs.addInfoMessage(gs.getMessage('Custom tables associated to this subscription are managed through the \\\"Manage Your Tables\\\" link.'));\\n\\telse if (allotmentType == utils.GRANDFATHER_ALLOT_TYPE)\\n\\t\\tgs.addInfoMessage(gs.getMessage('Please note: Once added, tables cannot be removed from this subscription'));\\n\\telse if (allotmentType == utils.PLAT_ONLY_ALLOT_TYPE) {\\n\\t\\tvar tc = SNC.UsageAnalyticsScriptUtils.getTableCount(allotmentType, current.getUniqueValue());\\n\\n\\t\\tif (tc > 0) {\\n\\t\\t\\tvar params = [current.count, tc];\\n\\t\\t\\tgs.addInfoMessage(gs.getMessage('{0} users may access up to {1} custom tables from given Custom Tables list', params));\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction hasApplications() {\\n\\tvar hasApps = false;\\n\\tvar licAppGR = new GlideRecord('license_has_app');\\n\\tif (licAppGR.isValid()) {\\n\\t\\tlicAppGR.addQuery('license', current.getUniqueValue());\\n\\t\\tlicAppGR.query();\\n\\t\\thasApps = licAppGR.getRowCount() > 0;\\n\\t}\\n\\treturn hasApps;\\n}\\n\\nfunction hasFamilies() {\\n\\tvar hasFams = false;\\n\\tvar licFamGR = new GlideRecord('license_has_family');\\n\\tif (licFamGR.isValid()) {\\n\\t\\tlicFamGR.addQuery('license', current.getUniqueValue());\\n\\t\\tlicFamGR.query();\\n\\t\\thasFams = licFamGR.getRowCount() > 0;\\n\\t}\\n\\treturn hasFams;\\n}\\n\\nfunction hasMultipleLineItems() {\\n\\tvar hasMultItems = false;\\n\\tvar lineItemGR = new GlideRecord('license_details_item');\\n\\tif (lineItemGR.isValid()) {\\n\\t\\tlineItemGR.addQuery('license_details', current.getUniqueValue());\\n\\t\\tlineItemGR.query();\\n\\t\\thasMultItems = lineItemGR.getRowCount() > 1;\\n\\t}\\n\\treturn hasMultItems;\\n}\\n\\nfunction hasEntitlements() {\\n\\tvar gr = new GlideRecord('license_has_entitlement');\\n\\tif (gr.isValid()) {\\n\\t\\tgr.addQuery('license', current.getUniqueValue());\\n\\t\\tgr.query();\\n\\t\\tif ( gr.getRowCount() > 0)\\n\\t\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\\nfunction hasPlatformLicAllotment() {\\n\\tvar utils = new SNSubscriptionUtils();\\n\\n\\tvar allotGR = new GlideRecord(utils.LICENSE_CUST_ALLOTMENT_TBL);\\n\\tallotGR.addQuery(utils.SUBSCRIPTION, current.getUniqueValue());\\n\\tallotGR.query();\\n\\n\\tif (allotGR.next())\\n\\t\\treturn allotGR.getValue(utils.ALLOTMENT_TYPE);\\n\\n\\treturn \\\"-1\\\";\\n}\\n\\nfunction hasLicenseMetadata(metadataType) {\\n\\tvar gr = new GlideRecord('license_metadata');\\n\\tif (gr.isValid()) {\\n\\t\\tgr.addQuery('license', current.getUniqueValue());\\n\\t\\tgr.addQuery('type_id', metadataType);\\n\\t\\tgr.query();\\n\\t\\tif ( gr.getRowCount() > 0)\\n\\t\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Populate scratchpads for subscription\"\n}```"}
{"prompt":"{\"prompt\":\"Clear Conflicts\",\"table\":\"change_request\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*undefined when async or display*/) {\\n\\n\\t// Preconditions for running conflict detection satisfied so return\\n\\tif (ChangeCheckConflicts.allowConflictDetection(current, previous))\\n\\t\\treturn;\\n\\t\\t\\n\\t// Update conflict fields for current change_request record\\n\\tcurrent.conflict_status = 'Not Run';\\n\\tcurrent.conflict_last_run = \\\"\\\";\\n\\t\\n\\t// Build up a set of associated change_request records\\n\\tvar map = {};\\n\\tvar conflictGr = new GlideRecord('conflict');\\n\\tconflictGr.addQuery('change', current.getUniqueValue()).addOrCondition('conflicting_change', current.getUniqueValue());\\n\\tconflictGr.query();\\t\\n\\twhile (conflictGr.next()) {\\n\\t\\tmap[conflictGr.change.toString()] = null;\\n\\t\\tmap[conflictGr.conflicting_change.toString()] = null;\\t\\t\\t\\t\\t\\n\\t\\tconflictGr.deleteRecord();\\n\\t}\\n\\tdelete map[current.getUniqueValue()];\\n\\t\\n\\t// Update conflict fields for associated change_request records\\n\\tfor (var sysId in map) {\\n\\t\\tconflictGr = new GlideRecord('conflict');\\n\\t\\tconflictGr.addQuery('change', sysId).addOrCondition('conflicting_change', sysId);\\n\\t\\tconflictGr.query();\\n\\t\\tif (conflictGr.getRowCount() === 0) {\\n\\t\\t\\tvar record = new GlideRecord('change_request');\\n\\t\\t\\tif (record.get(sysId)) {\\n\\t\\t\\t\\trecord.conflict_status = 'Not Run';\\n\\t\\t\\t\\trecord.conflict_last_run = '';\\t\\t\\t\\t\\n\\t\\t\\t\\trecord.update();\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n})(current, typeof previous != 'undefined' ?\\tprevious : null);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"active=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear Conflicts\"\n}```"}
{"prompt":"{\"prompt\":\"Delete should clear reported at field\",\"table\":\"sys_report_source\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_report_source\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var gr = new GlideRecord('pa_cubes');\\ngr.addQuery('report_source', current.sys_id);\\ngr.query();\\nwhile (gr.next()) {\\n\\tgr.setValue('report_source_updated_at', '');\\n\\tgr.update();\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete should clear reported at field\"\n}```"}
{"prompt":"{\"prompt\":\"UpdateGoalsInProgressIfTargetIsUnlinked\",\"table\":\"sn_gf_goal_target\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_gf_goal_target\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"50\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\tnew TargetProgressUtil(current).updateTargetProgressGoalWithNewTargetGoal();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"goalVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"UpdateGoalsInProgressIfTargetIsUnlinked\"\n}```"}
{"prompt":"{\"prompt\":\"Limit record producer to one HR Service\",\"table\":\"sn_hr_core_service\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_service\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar gr = new GlideRecord('sn_hr_core_service');\\n\\tgr.addActiveQuery();\\n\\tgr.addQuery('sys_id', '!=', current.getUniqueValue());\\n\\tgr.addQuery('producer', current.producer);\\n\\tgr.query();\\n\\n\\tif (gr.getRowCount() > 0) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('The chosen record producer is already in use on one or more other active HR Services'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.producer.nil() && current.active && (current.producer.changes() || current.active.changes())\",\n\t\"name\": \"Limit record producer to one HR Service\"\n}```"}
{"prompt":"{\"prompt\":\"VirtualAgentContextNoSpace\",\"table\":\"sys_cs_virtual_agent_context\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"false\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cs_virtual_agent_context\",\n\t\"advanced\": \"false\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"nameMATCH_PAT* *^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"VirtualAgentContextNoSpace\"\n}```"}
{"prompt":"{\"prompt\":\"Checks illustration file type\",\"table\":\"sn_app_eng_studio_taxonomy\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_app_eng_studio_taxonomy\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"101\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar supportedContentTypes = gs.getProperty(\\\"sn_app_eng_studio.illustration_supported_content_types\\\", \\\"image/svg+xml\\\").split(\\\",\\\");\\n\\t\\n\\tcurrent = new ImageAttachmentValidator(current, \\\"illustration\\\", supportedContentTypes).validate();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Checks illustration file type\"\n}```"}
{"prompt":"{\"prompt\":\"Draft Item Query\",\"table\":\"sc_ic_item_staging\",\"when\":\"before\",\"actions\":\"r\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"true\",\n\t\"collection\": \"sc_ic_item_staging\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var myCatalogCategories = getMyCatalogCategories();\\n\\nif (myCatalogCategories.length > 0) {\\n\\tvar query = 'sc_categoriesLIKE' + myCatalogCategories[0];\\n\\t\\n\\tfor (var i = 1; i < myCatalogCategories.length; i++) {\\n\\t\\tquery += '^ORsc_categoriesLIKE' + myCatalogCategories[i];\\n\\t}\\n\\t\\n\\tcurrent.addEncodedQuery(query);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!gs.hasRole(\\\"catalog_admin\\\")\",\n\t\"name\": \"Draft Item Query\"\n}```"}
{"prompt":"{\"prompt\":\"Delete Application Scope\",\"table\":\"sys_app\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_app\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\n\\tvar scopeAPI = new GlideScopeAPI();\\n\\tvar scopeReleased = scopeAPI.unregisterScope(current.scope.toString(), current.getUniqueValue());\\n\\t\\n\\tif(!scopeReleased){\\n\\t\\tgs.addInfoMessage(scopeAPI.getLastErrorMessage());\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.scope.nil() && current.scope.toString() != 'global'\",\n\t\"name\": \"Delete Application Scope\"\n}```"}
{"prompt":"{\"prompt\":\"Set default wizard for app templates\",\"table\":\"sys_app_template\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_app_template\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar appWizardSysId = '1ecf9a0e28e96e12a39fd11c51397fa4';\\n\\tvar appWizard = new GlideRecord('sys_ux_lib_component');\\n\\t\\n\\tif (appWizard.get(appWizardSysId)) {\\n\\t\\tcurrent.setValue('ux_framework_component', appWizardSysId);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"create_app=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Set default wizard for app templates\"\n}```"}
{"prompt":"{\"prompt\":\"Update answer field\",\"table\":\"kb_social_qa_answer\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"kb_social_qa_answer\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"1000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\t\\t// Add your code here\\n\\t\\n\\t})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"accepted=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Update answer field\"\n}```"}
{"prompt":"{\"prompt\":\"Sync status with parent and comments\",\"table\":\"sys_sync_history\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sync_history\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var push = new SNC.PushAPI();\\npush.syncHistoryWithParent(current.sys_id);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.type == \\\"push\\\" && current.stage == \\\"codereview\\\"\",\n\t\"name\": \"Sync status with parent and comments\"\n}```"}
{"prompt":"{\"prompt\":\"Get Number\",\"table\":\"global\",\"when\":\"after\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function getNextObjNumber() {\\r\\n\\tvar assignOnInsert = gs.getProperty(\\\"glide.itil.assign.number.on.insert\\\");\\r\\n\\tif (assignOnInsert == 'true') {\\r\\n\\t\\t if (current.sys_id.isNil()) {\\r\\n\\t\\t\\t\\treturn null;\\r\\n\\t\\t }\\r\\n\\t}\\r\\n\\r\\n\\tvar nm = new NumberManager(current.sys_meta.name);\\r\\n\\tanswer = nm.getNextObjNumber();\\r\\n\\r\\n\\tif (assignOnInsert == 'true'&& current.sys_meta.name != 'sys_report_summary')\\r\\n\\t\\tgs.addInfoMessage(gs.getMessage('Number') + ' ' + answer + ' ' + gs.getMessage('was assigned to') + ' ' + current.sys_meta.label);\\r\\n\\r\\n\\treturn answer;\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Get Number\"\n}```"}
{"prompt":"{\"prompt\":\"ML Similarity Vectors Deletion\",\"table\":\"ml_solution\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ml_solution\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\t/* PRB1311739: Cascade Delete for ML Solution Definition/ML Solution\\n\\t\\t This business rule will be excuted whenever a ML Solution is deleted which can happen in case of a deletion of Ml Solution Definition or by directly deleting a solution through UI. */\\n\\t\\n\\t\\n\\t// Deleting records from ML Solution Vectors when a solution is deleted, fetching all records corresponding to solution_id and deleting them.\\n\\tvar solutionVectors = GlideRecord(\\\"ml_solution_vectors\\\");\\n\\tif (solutionVectors.isValid()) {\\n\\t\\tsolutionVectors.addQuery(\\\"solution_id\\\", current.sys_id);\\n\\t\\tsolutionVectors.deleteMultiple();\\n\\t}\\t\\n\\t\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"ML Similarity Vectors Deletion\"\n}```"}
{"prompt":"{\"prompt\":\"Validation of Deployment Requests\",\"table\":\"sn_deploy_pipeline_deployment_request\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_deploy_pipeline_deployment_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar sysId = current.getValue('sys_id');\\n\\t\\tvar appSysId = current.getValue('app_sys_id');\\n\\t\\tvar currentState = current.getValue('state');\\n\\t\\tvar operation = current.operation();\\n\\t\\tvar createdOn = current.getValue('sys_created_on');\\n\\n\\t\\tvar deploymentRequestUtils = new DeploymentRequestUtils();\\n\\t\\tvar isInvalid;\\n\\t\\tvar errorMessage;\\n\\n\\t\\tif (current.operation() === 'insert') {\\n\\t\\t\\t\\tisInvalid = deploymentRequestUtils.isOpenDeploymentRequestPresentForApp(appSysId);\\n\\t\\t\\n\\t\\terrorMessage = gs.getMessage(\\\"Deployment Request {0} operation failed: Application with sys_id {1} has an open deployment request.\\\", [current.operation(), appSysId]);\\n\\t\\t} else if (deploymentRequestUtils.isNewerDeploymentRequestPresent(sysId, appSysId, createdOn)) {\\n\\t\\t\\t\\tisInvalid = true;\\n\\n\\t\\t\\t\\terrorMessage = gs.getMessage(\\\"Deployment Request update operation failed: Application with sys_id {0} has a newer deployment request than request with sys_id {1}.\\\", [appSysId, sysId]);\\n\\n\\t\\t}\\n\\n\\t\\tif (isInvalid) {\\n\\t\\t\\t\\tgs.addErrorMessage(errorMessage);\\n\\t\\t\\t\\tgs.error(errorMessage);\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validation of Deployment Requests\"\n}```"}
{"prompt":"{\"prompt\":\"Update detail field\",\"table\":\"sc_ic_aprvl_defn_staging\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_ic_aprvl_defn_staging\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"sc_ic_Factory.wrap(current,gs).setDetail();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update detail field\"\n}```"}
{"prompt":"{\"prompt\":\"Delete Tasks for Deleted Requested Item\",\"table\":\"sc_req_item\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_req_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\t// delete all the tasks for this request item\\n\\t\\tvar task = new GlideRecord(\\\"sc_task\\\");\\n\\t\\ttask.addQuery(\\\"request_item\\\", \\\"=\\\", current.sys_id);\\n\\t\\ttask.deleteMultiple();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete Tasks for Deleted Requested Item\"\n}```"}
{"prompt":"{\"prompt\":\"Check Requested For on variable set\",\"table\":\"io_set_item\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"io_set_item\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar catItem = current.sc_cat_item;\\n\\tvar variableSet = current.variable_set;\\n\\tvar requestedForUtil = new RequestedForUtil();\\n\\t//In case of update operation, if the outgoing variable_set has requested for, \\n\\t//then there is no need to do item check as the outgoing VS had the requested for.\\n\\tif(current.operation() == \\\"update\\\" && current.variable_set.changes() && requestedForUtil.hasRequestedForOnVariableSet(previous.variable_set)) {\\n\\t\\treturn;\\n\\t}\\n\\t//Check requested for on item and variable set that they both do not have a requested for variable\\n\\tif (requestedForUtil.hasRequestedForOnVariableSet(variableSet) && requestedForUtil.hasRequestedForOnItem(catItem)) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"You cannot associate {0} with {1} since the item already includes a Requested For variable. {2}\\\", [variableSet.getDisplayValue(), catItem.getDisplayValue(), requestedForUtil.getDocumentationLink()]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn;\\n\\t}\\n})(current, previous);\\n\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(current.sc_cat_item.changes() || current.variable_set.changes())\",\n\t\"name\": \"Check Requested For on variable set\"\n}```"}
{"prompt":"{\"prompt\":\"Close historical rule executions\",\"table\":\"em_alert\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"em_alert\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"1000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar alertManager = new SNC.AlertManager();\\n\\talertManager.addStep(\\\"Alert BR: Close historical rule executions (after)\\\");\\n\\t\\n\\tvar gr = new GlideRecord(\\\"em_alert_management_execution\\\");\\n\\tgr.addQuery(\\\"alert\\\",current.getUniqueValue());\\n\\tgr.setValue(\\\"historical\\\",\\\"true\\\");\\n\\tgr.updateMultiple();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"stateCHANGESTOClosed^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Close historical rule executions\"\n}```"}
{"prompt":"{\"prompt\":\"Test query rewrite\",\"table\":\"sys_query_rewrite\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_query_rewrite\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"999\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\tvar successful = new GlideQueryRewriteTest(current).runTest();\\n\\tif (!successful) {\\n\\t\\tcurrent.active = false;\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.active.changesTo(true) && !current.isActionAborted()\",\n\t\"name\": \"Test query rewrite\"\n}```"}
{"prompt":"{\"prompt\":\"Check local chapter belongs to union\",\"table\":\"sn_hr_core_labor_union_contact\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"false\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_labor_union_contact\",\n\t\"advanced\": \"false\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"300\",\n\t\"add_message\": \"true\",\n\t\"script\": \"\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"local_union_chapterISNOTEMPTY^labor_unionISNOTEMPTY^labor_unionNSAMEASlocal_union_chapter.labor_union^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Check local chapter belongs to union\"\n}```"}
{"prompt":"{\"prompt\":\"Clear Parent fields\",\"table\":\"sys_app_file_type\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_app_file_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"current.sys_source_field = \\\"\\\";\\ncurrent.sys_parent_field = \\\"\\\";\\ncurrent.sys_use_parent_scope = false;\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.sys_parent_table.nil()\",\n\t\"name\": \"Clear Parent fields\"\n}```"}
{"prompt":"{\"prompt\":\"Run Export Set\",\"table\":\"sys_export_set\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_export_set\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*undefined when async or display*/) {\\n\\n\\tif (\\\"1\\\" == gs.getSession().getProperty(\\\"doexportdata\\\") ) {\\n\\t\\tg_scratchpad.doexportdata=\\\"1\\\";\\n\\t\\tgs.getSession().clearProperty(\\\"doexportdata\\\");\\n\\t} else if (\\\"1\\\" == gs.getSession().getProperty(\\\"dotestexport20records\\\") ) {\\n\\t\\tg_scratchpad.dotestexport20records=\\\"1\\\";\\n\\t\\tgs.getSession().clearProperty(\\\"dotestexport20records\\\");\\n\\t}\\n\\n})(current, typeof previous != 'undefined' ?\\tprevious : null);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Run Export Set\"\n}```"}
{"prompt":"{\"prompt\":\"Set OAuth info on scratchpad\",\"table\":\"sys_rest_message_fn\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_rest_message_fn\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*undefined when async or display*/) {\\n\\n\\t// current record\\n\\tg_scratchpad.oauth_provider_id = current.oauth2_profile.oauth_entity;\\n\\tg_scratchpad.grant_type = current.oauth2_profile.grant_type;\\n\\t\\n\\t// parent record\\n\\tg_scratchpad.rm_oauth_provider_id = current.rest_message.oauth2_profile.oauth_entity;\\n\\tg_scratchpad.rm_grant_type = current.rest_message.oauth2_profile.grant_type;\\n\\tg_scratchpad.rm_authentication_type = current.rest_message.authentication_type;\\n\\tg_scratchpad.rm_oauth2_profile = current.rest_message.oauth2_profile;\\n\\t\\n})(current, typeof previous != 'undefined' ?\\tprevious : null);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"oauth2_profileISNOTEMPTY^ORrest_message.oauth2_profileISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Set OAuth info on scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"Remove error message on rule activation\",\"table\":\"em_alert_management_rule\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"em_alert_management_rule\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"80\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"activeCHANGESTOtrue^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Remove error message on rule activation\"\n}```"}
{"prompt":"{\"prompt\":\"Update fields when Problem is Confirmed\",\"table\":\"problem\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"problem\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tcurrent.confirmed_at = gs.nowDateTime();\\n\\tcurrent.confirmed_by = gs.getUserID();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"state=103^confirmed_atISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Update fields when Problem is Confirmed\"\n}```"}
{"prompt":"{\"prompt\":\"Phone number source is mandatory\",\"table\":\"sys_on_call_contact_source\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_on_call_contact_source\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Phone number source is mandatory\\\"));\\n\\tcurrent.setAbortAction(true);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"source_type=phone_number^phone_number_sourceISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Phone number source is mandatory\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent updates\",\"table\":\"label_user_m2m\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"label_user_m2m\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"gs.addErrorMessage(gs.getMessage('This type of record is not intended to be updated'));\\ncurrent.setAbortAction(true);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent updates\"\n}```"}
{"prompt":"{\"prompt\":\"Read only Model when not initial state\",\"table\":\"change_request\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"80\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Change model cannot be modified for in progress Change Requests\\\"));\\n\\tcurrent.setAbortAction(true);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"chg_modelVALCHANGES^EQ\",\n\t\"condition\": \"!new ChangeRequest(previous).isInitialState()\",\n\t\"name\": \"Read only Model when not initial state\"\n}```"}
{"prompt":"{\"prompt\":\"Unique implicit relationship records\",\"table\":\"nlq_cmdb_implicit_relationship\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"nlq_cmdb_implicit_relationship\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar fromTable = current.from_table;\\n\\t\\tvar filter = current.filter;\\n\\t\\tvar toTable = current.to_table;\\n\\t\\tif ((fromTable != previous.from_table) || (filter != previous.filter) || (toTable != previous.to_table)) {\\n\\t\\t\\t\\tvar cmdbImplicitRelTypeRecord = new GlideRecord(\\\"nlq_cmdb_implicit_relationship\\\");\\n\\t\\t\\t\\tcmdbImplicitRelTypeRecord.addQuery(\\\"from_table\\\", fromTable);\\n\\t\\t\\t\\tcmdbImplicitRelTypeRecord.addQuery(\\\"filter\\\", filter);\\n\\t\\t\\t\\tcmdbImplicitRelTypeRecord.addQuery(\\\"to_table\\\", toTable);\\n\\t\\t\\t\\tcmdbImplicitRelTypeRecord.query();\\n\\n\\t\\t\\t\\tif (cmdbImplicitRelTypeRecord.hasNext()) {\\n\\t\\t\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Cmdb Implicit relationship for the specified From table, Filters and To table already exist. Please update the existing record.\\\"));\\n\\t\\t\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Unique implicit relationship records\"\n}```"}
{"prompt":"{\"prompt\":\"Abort adding more than one taxonomy\",\"table\":\"m2m_sp_portal_taxonomy\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"m2m_sp_portal_taxonomy\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar gr = new GlideRecord(\\\"m2m_sp_portal_taxonomy\\\");\\n\\t\\tgr.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.getUniqueValue());\\n\\t\\tgr.addQuery(\\\"sp_portal\\\", current.getValue(\\\"sp_portal\\\"));\\n\\t\\tgr.setLimit(1);\\n\\t\\tgr.query();\\n\\n\\t\\tif (gr.hasNext()) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Only one taxonomy can be associated to a portal\\\"));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Abort adding more than one taxonomy\"\n}```"}
{"prompt":"{\"prompt\":\"saListCis\",\"table\":\"global\",\"when\":\"after\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function saListCis(bsId) {\\n\\treturn ListCis.getCis(bsId);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"saListCis\"\n}```"}
{"prompt":"{\"prompt\":\"Restrict business calendar to one group\",\"table\":\"m2m_business_calendar_group_business_calendars\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"m2m_business_calendar_group_business_calendars\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.business_calendar === previous.business_calendar)\\n\\t\\treturn;\\n\\n\\tvar gr = new GlideRecord('m2m_business_calendar_group_business_calendars');\\n\\tgr.addQuery('business_calendar', current.business_calendar);\\n\\tgr.query();\\n\\tif (gr.next()) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('The selected business calendar is already mapped to a group'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Restrict business calendar to one group\"\n}```"}
{"prompt":"{\"prompt\":\"Enforce password history message\",\"table\":\"pwd_cred_store\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pwd_cred_store\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(){\\n\\tg_scratchpad.enforcePasswordMessage = gs.getMessage('To enforce password history policy, you must create an integer value parameter called {0}.','\\\\'password_history_limit\\\\'' );\\n\\t\\n\\tg_scratchpad.mandatoryHistoryParamMsg = gs.getMessage('You have to create the mandatory parameter {0}', '\\\\'password_history_limit\\\\'');\\n\\tg_scratchpad.unfilledMandatoryFieldsMsg = gs.getMessage('The following mandatory fields are not filled in: ');\\n\\t\\n\\t\\n\\tg_scratchpad.cur_enforce_history_policy = false;\\n\\tif (current.enforce_history_policy) {\\n\\t\\tg_scratchpad.cur_enforce_history_policy = true;\\n\\t\\tvar paramGr = new GlideRecord('pwd_cred_store_param');\\n\\t\\tparamGr.addQuery('cred_store', current.getUniqueValue());\\n\\t\\tparamGr.addQuery('name', 'password_history_limit');\\n\\t\\tparamGr.query();\\n\\t\\tif (paramGr.next())\\n\\t\\t\\tg_scratchpad.cur_password_history_limit = parseInt(paramGr.getValue('value'));\\n\\t}\\n})();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Enforce password history message\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Target Mandatory\",\"table\":\"sn_gf_goal_target\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_gf_goal_target\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar errorMsg;\\n\\t\\tif (!current.getValue(\\\"name\\\"))\\n\\t\\t\\t\\terrorMsg = gs.getMessage(\\\"Name field is mandatory.\\\");\\n\\t\\telse if (!current.getValue(\\\"goal\\\")){\\n\\t\\tvar goalLabel = sn_gf.GFUtil.getTableLabel(GoalFrameworkConstants.GOAL_TABLE);\\n\\t\\t\\t\\terrorMsg = gs.getMessage(\\\"{0} field is mandatory.\\\", goalLabel);\\n\\t}\\n\\t\\tif (errorMsg) {\\n\\t\\t\\t\\tgs.addErrorMessage(errorMsg);\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate Target Mandatory\"\n}```"}
{"prompt":"{\"prompt\":\"Send training request\",\"table\":\"ais_relevancy_training_execution\",\"when\":\"async\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ais_relevancy_training_execution\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"10000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar trainingRequest = new sn_ais.RelevancyService().processCompletion(current.sys_id);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"state=complete^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Send training request\"\n}```"}
{"prompt":"{\"prompt\":\"Verify Roles Exist\",\"table\":\"sys_broadcast_message\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_broadcast_message\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*undefined when async or display*/) {\\n\\n\\t// Add your code here\\n\\n})(current, typeof previous != 'undefined' ?\\tprevious : null);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"any_roled_user=false^user_filterISEMPTY^ORuser_filterEMPTYSTRING^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Verify Roles Exist\"\n}```"}
{"prompt":"{\"prompt\":\"Check MID inactivity timeout properties\",\"table\":\"sys_properties\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar errorMessage = null;\\n\\t\\tif (current.name == 'mid.inactivity.timeout.enabled') {\\n\\t\\t\\t\\tif (JSUtil.nil(current.type) || current.type != 'boolean' || JSUtil.nil(current.value) || ((current.value) != 'true' && (current.value != 'false')))\\n\\t\\t\\t\\t\\t\\terrorMessage = gs.getMessage(\\\"Property type must be 'true | false'.\\\");\\n\\t\\t} else if (current.name == 'mid.inactivity.timeout.days') {\\n\\t\\t\\t\\tif (JSUtil.nil(current.type) || current.type != 'integer')\\n\\t\\t\\t\\t\\t\\terrorMessage = gs.getMessage(\\\"Type must be integer.\\\");\\n\\t\\t\\t\\telse if (JSUtil.nil(current.value) || isNaN(current.value) || current.value.indexOf(\\\".\\\") !== -1 || parseInt(current.value, 10) < 0)\\n\\t\\t\\t\\t\\t\\terrorMessage = gs.getMessage(\\\"Value must be a positive integer representing the number of days of inactivity before timeout occurs (0 disables inactivity timeout).\\\");\\n\\t\\t}\\n\\n\\t\\tif (errorMessage != null) {\\n\\t\\t\\t\\tgs.addErrorMessage(errorMessage);\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.name == 'mid.inactivity.timeout.enabled' || current.name == 'mid.inactivity.timeout.days'\",\n\t\"name\": \"Check MID inactivity timeout properties\"\n}```"}
{"prompt":"{\"prompt\":\"AddServiceAnalyticsApplication\",\"table\":\"ecc_agent_application_m2m\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_agent_application_m2m\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\nvar serviceProcessor = new SNC.ServiceAnalyticsProcessor();\\n\\tvar response=serviceProcessor.getApplicationResponse(current);\\n\\tif(response.getErrorStatus()==true){\\n\\t gs.addErrorMessage(response.getErrorMessage());\\n\\t current.setAbortAction(true);\\t\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"AddServiceAnalyticsApplication\"\n}```"}
{"prompt":"{\"prompt\":\"Sync approval with agenda item\",\"table\":\"change_request\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\tvar cabChangeScript = new sn_change_cab.CABChangeRequest(current);\\n\\tcabChangeScript.updateDecisionforAgendaItem();\\n\\tcabChangeScript.addApprovalDecisionToMeetingNotes();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"approvalCHANGESTOapproved^ORapprovalCHANGESTOrejected^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Sync approval with agenda item\"\n}```"}
{"prompt":"{\"prompt\":\"Enforce weight range\",\"table\":\"gsw_content\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"gsw_content\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (!new GuidedSetupUtilSNC().isContentWeightValid(current)) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"weightVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Enforce weight range\"\n}```"}
{"prompt":"{\"prompt\":\"Label - Group Parent Change\",\"table\":\"sys_user_group\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_user_group\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// assigns all the parents labels to the child\\nupdateParentLabels();\\n\\nfunction updateParentLabels() {\\n\\tvar update = new LabelUpdate();\\n\\tif (!previous.parent.nil())\\n\\t\\tupdate.removeGroupLabelsFromGroup(current, previous.parent);\\n\\t\\n\\tif (current.parent)\\n\\t\\t\\tupdate.addGroupLabelsToGroup(current, current.parent);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"parentVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Label - Group Parent Change\"\n}```"}
{"prompt":"{\"prompt\":\"Password Reset Activity Monitor\",\"table\":\"pwd_user_lockout\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pwd_user_lockout\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"run();\\n\\nfunction run() {\\n\\t// continue only for 'Max Failed Attempt Reached' lockout type\\n\\tif (current.type != 0) \\n\\t\\treturn;\\n\\t\\n\\t// get all records from pwd_activity_monitor for given process and time interval\\n\\tvar now = GlideDateTime();\\n\\tvar processId = current.process;\\n\\tvar monitor = GlideRecord('pwd_activity_monitor');\\n\\tmonitor.addQuery('sys_created_on', '<=', now.getValue());\\n\\tmonitor.addQuery('expiration', '>', now.getValue());\\n\\tmonitor.addQuery('process', processId);\\n\\tmonitor.orderByDesc('sys_created_on');\\n\\tmonitor.query();\\n\\t\\n\\t// pick up latest created\\n\\tif (monitor.next()) {\\n\\t\\tvar cnt = monitor.getValue('counter');\\n\\t\\t++cnt;\\n\\t\\tmonitor.setValue('counter', cnt);\\n\\t\\tvar threshold = GlideProperties.get('password_reset.activity_monitor.incident_threshold');\\n\\t\\tthreshold = parseInt(threshold);\\n\\t\\t// create event\\n\\t\\tif (cnt > threshold && monitor.getValue('event_created') == false) {\\n\\t\\t\\tcreateEvent(monitor);\\n\\t\\t\\tmonitor.setValue('event_created', 'true');\\n\\t\\t}\\n\\t\\tmonitor.update();\\n\\t} else { // there are no records whith in the time window, create new \\n\\t\\taddMonitorRecord(processId);\\n\\t}\\n}\\n\\nfunction addMonitorRecord(processId) {\\n\\tvar expiration = GlideDateTime();\\n\\tvar window = GlideProperties.get('password_reset.activity_monitor.incident_window');\\n\\twindow = parseInt(window);\\n\\texpiration.addSeconds(60 * window);\\n\\tvar gr = new GlideRecord('pwd_activity_monitor');\\n\\tgr.initialize();\\n\\tgr.setValue('process', processId);\\n\\tgr.setValue('expiration', expiration.getValue());\\n\\tgr.insert();\\n}\\n\\nfunction createEvent(currentRecord) {\\n\\tvar eventName = 'pwd.activity_monitor.lockout_threshold';\\n\\tvar gr = new GlideRecord('pwd_process');\\n\\tgr.get(currentRecord.getValue('process'));\\n\\tvar param1 = gr.getValue('name');\\n\\tvar param2 = gs.getUserName();\\n\\tgs.eventQueue(eventName, currentRecord, param1, param2);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Password Reset Activity Monitor\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent insertion under same domain\",\"table\":\"mid_cert_check_policy\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"mid_cert_check_policy\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"\\n\\t\\t(function executeRule(current, previous /*null when async*/) {\\n\\t\\t\\n\\tswitch(current.policy_type.toString()) {\\n\\t\\tcase 'system_defaults':\\n\\t\\t\\tif(current.operation() == 'insert') {\\n\\t\\t\\t\\trejectInsertion(current);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\n\\t\\tcase 'public_network':\\n\\t\\tcase 'private_network':\\n\\t\\t\\tvar gr = new GlideRecord('mid_cert_check_policy');\\n\\t\\t\\tgr.addQuery('policy_type', current.policy_type);\\n\\t\\t\\tgr.addQuery('sys_domain', current.sys_domain);\\n\\t\\t\\tgr.addQuery('sys_id', '!=', current.sys_id);\\n\\n\\t\\t\\tgr.query();\\n\\n\\t\\t\\tif(gr.next()) {\\n\\t\\t\\t\\trejectInsertion(current);\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t}\\n\\n})(current, previous);\\n\\nfunction rejectInsertion(current) {\\n\\tvar type = current.policy_type;\\n\\tvar domain = current.sys_domain;\\n\\n\\tvar message = \\\"Duplicate record: type [\\\" + type + \\\"] under domain [\\\" + domain + \\\"]\\\";\\n\\t\\n\\tgs.addErrorMessage(message);\\n\\t\\n\\tcurrent.setAbortAction(true);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"policy_type=private_network^ORpolicy_type=public_network^ORpolicy_type=system_defaults^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent insertion under same domain\"\n}```"}
{"prompt":"{\"prompt\":\"Get VNCC Property\",\"table\":\"sys_semaphore\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_semaphore\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tg_scratchpad.vncc_property = gs.getProperty('com.snc.cluster.vncc.enabled', 'false');\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Get VNCC Property\"\n}```"}
{"prompt":"{\"prompt\":\"Set Domain of Category Result\",\"table\":\"asmt_category_result\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_category_result\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t// category result domain = assessable record domain\\n\\t//if assessable record's record is not domain separated, category result domain = category domain if is global\\n\\tvar sourceRecord = new GlideRecord(current.source_table);\\n\\tsourceRecord.get(current.source_id);\\n\\tif (tableHasColumn(current.source_table))\\n\\t\\tcurrent.sys_domain = sourceRecord.sys_domain;\\n\\telse if (isGlobal(current.category.sys_domain))\\n\\t\\tcurrent.sys_domain = current.category.sys_domain;\\n\\tfunction tableHasColumn (tableName) {\\n\\t\\tvar gr = new GlideRecord(tableName);\\n\\t\\tgr.initialize();\\n\\t\\tvar ge = gr.getElement(\\\"sys_domain\\\");\\n\\t\\treturn ge != null;\\n\\t}\\n\\tfunction isGlobal(domain) {\\n\\tif (domain.nil())\\n\\t\\treturn true;\\n\\tif (domain.indexOf(\\\"global\\\") >= 0)\\n\\t\\treturn true;\\n\\treturn false;\\n}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"GlidePluginManager.isActive('com.glide.domain')\",\n\t\"name\": \"Set Domain of Category Result\"\n}```"}
{"prompt":"{\"prompt\":\"Leaderboard and Points\",\"table\":\"x_snc_pointsthing_chat\",\"when\":\"async_always\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"x_snc_pointsthing_chat\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async_always\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar leaderboardMatches = current.text.match(/!leaderboard\\\\b/gmi); \\n\\tif (leaderboardMatches) {\\n\\t\\tnew x_snc_pointsthing.PointsThing().leaderboard(current, true, false);\\n\\t\\treturn;\\n\\t}\\n\\n\\tvar leaderboardAllMatches = current.text.match(/!leaderboardall\\\\b/gmi); \\n\\tif (leaderboardAllMatches){\\n\\t\\tnew x_snc_pointsthing.PointsThing().leaderboard(current, true, true);\\n\\t\\treturn;\\n\\t}\\n\\n\\tvar pointsMatches = current.text.match(/!(my)*points\\\\b/gmi);\\n\\tif (pointsMatches){\\n\\t\\tnew x_snc_pointsthing.PointsThing().tell_points(current);\\n\\t\\treturn;\\n\\t}\\n\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Leaderboard and Points\"\n}```"}
{"prompt":"{\"prompt\":\"Update Asset fields on change\",\"table\":\"cmdb_ci\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"1000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"syncAssetRecord();\\n\\nfunction syncAssetRecord() {\\n\\t\\tif (current.skip_sync != true) {\\n\\t\\t\\t\\tvar ca = new AssetAndCISynchronizer();\\n\\t\\t\\t\\tca.syncRecords(current, 'alm_asset', true);\\n\\t\\t} else {\\n\\t\\t\\t\\t// skip_sync is used only to prevent recursion within the same cycle of BRs --> reset for next cycle\\n\\t\\t\\t\\tcurrent.skip_sync = false;\\n\\t\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.asset.nil()\",\n\t\"name\": \"Update Asset fields on change\"\n}```"}
{"prompt":"{\"prompt\":\"Validate employment start and end dates\",\"table\":\"sn_employee_profile\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_employee_profile\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (!current.employment_start_date.nil() && !current.employment_end_date.nil() && current.employment_start_date > current.employment_end_date) {\\n\\tcurrent.employment_end_date.setError(gs.getMessage('Employment end date must be after Employment start date'));\\n\\tcurrent.setAbortAction(true);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.employment_start_date.changes() || current.employment_end_date.changes()\",\n\t\"name\": \"Validate employment start and end dates\"\n}```"}
{"prompt":"{\"prompt\":\"Reopen associated closed incident\",\"table\":\"em_alert\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"em_alert\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"500\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// This rule runs when a closed alert is reopened or goes into flapping for a new event\\n// It checks if the associated task is in the resolved or closed state\\n// If it is, then it can reopen that task or create a new one (checks the property alert_reopens_incident)\\n// If not, it just adds a comment on the task\\n\\nvar alertManager = new SNC.AlertManager();\\nalertManager.addStep(\\\"Alert BR: Reopen associated closed incident (after)\\\");\\n\\nvar alertManagementAlertReopenHandlerDynamic;\\n\\nif (EvtMgmtAlertMgmtProperties.isARMScopedAppActive()) {\\n\\t\\tgs.include('sn_em_arm.EvtMgmtAlertMgmtAlertReopenHandler');\\n\\t\\talertManagementAlertReopenHandlerDynamic = new sn_em_arm.EvtMgmtAlertMgmtAlertReopenHandler();\\n} else {\\n\\t\\tgs.include('EvtMgmtAlertManagementAlertReopenHandler');\\n\\t\\talertManagementAlertReopenHandlerDynamic = new EvtMgmtAlertManagementAlertReopenHandler();\\n}\\n\\nalertManagementAlertReopenHandlerDynamic.onAlertReopen(current);\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"((previous.state == 'Closed' && (current.state == 'Reopen' || current.state == 'Flapping')) || (previous.severity == '5' && current.severity != '5' && current.severity != '0')) && ((!current.incident.nil()) || (!current.remote_task_id.nil()) )\",\n\t\"name\": \"Reopen associated closed incident\"\n}```"}
{"prompt":"{\"prompt\":\"Templates\",\"table\":\"sys_app_template\",\"when\":\"before\",\"actions\":\"r\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"true\",\n\t\"collection\": \"sys_app_template\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tif (gs.getSession().isInteractive()) {\\n\\t\\t\\t\\tvar view_name = gs.action.getGlideURI().get('sysparm_view');\\n\\t\\t\\t\\tif (view_name && view_name == 'welcome_hub_template') {\\n\\t\\t\\t\\t\\t\\tvar condition = current.addQuery('type', 'b8c9bf330f3030108c9c5019c4767eb6');\\n\\t\\t\\t\\t}\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Templates\"\n}```"}
{"prompt":"{\"prompt\":\"Reset Unknown Discovery Source State\",\"table\":\"cmdb_ci\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"1010\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n // Reset \\\"Unknown\\\" discovery_source state, if CI gets updated\\n current.discovery_source = '';\\n current.setWorkflow(false);\\n current.update();\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"discovery_source=Unknown^EQ\",\n\t\"condition\": \"(!current.discovery_source.changes())\",\n\t\"name\": \"Reset Unknown Discovery Source State\"\n}```"}
{"prompt":"{\"prompt\":\"Make time between reminders mandatory\",\"table\":\"cmn_rota_esc_step_def\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmn_rota_esc_step_def\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (current.reminders && current.reminders > 0 && !current.time_between_reminders) {\\n\\t\\tvar message = gs.getMessage('Time between reminders is mandatory when number of reminders is set');\\n\\t\\tgs.addErrorMessage(message);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Make time between reminders mandatory\"\n}```"}
{"prompt":"{\"prompt\":\"setDefaultName\",\"table\":\"ts_synonym_set\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ts_synonym_set\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t current.name=current.synset;\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\\n\\t\\t\\tnameISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"setDefaultName\"\n}```"}
{"prompt":"{\"prompt\":\"Put display name on scratchpad\",\"table\":\"sys_metadata\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_metadata\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onDisplay(current, g_scratchpad) {\\n\\t //This function will be automatically called when this rule is processed.\\n\\tg_scratchpad.create_now_studio = g_scratchpad.create_now_studio ? g_scratchpad.create_now_studio : {};\\n\\tg_scratchpad.create_now_studio.display_name = current.getDisplayName() + '';\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Put display name on scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"SHN Cache Table Entry\",\"table\":\"sn_shn_configuration\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_shn_configuration\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar prevKey = \\\"sn_shn_configuration_\\\"+previous.table_name;\\n\\tvar key = \\\"sn_shn_configuration_\\\" + current.table_name;\\n\\tvar value = GlideCacheManager.get(\\\"SHN\\\", key);\\n\\tif(current.operation() == \\\"insert\\\")\\n\\t\\tGlideCacheManager.put(\\\"SHN\\\", key, 'true');\\n\\telse if(current.operation() == \\\"update\\\" && current.table_name.changes()){\\n\\t\\tGlideCacheManager.put(\\\"SHN\\\",prevKey , 'false');\\n\\t\\tGlideCacheManager.put(\\\"SHN\\\", key, 'true');\\n\\t}\\n\\telse if(current.operation() == \\\"delete\\\")\\n\\t\\tGlideCacheManager.put(\\\"SHN\\\", key, 'false');\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"SHN Cache Table Entry\"\n}```"}
{"prompt":"{\"prompt\":\"Auto assessment business rule\",\"table\":\"sn_hr_core_case\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_case\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(){ \\n (new sn_assessment_core.AssessmentCreation()).conditionTrigger(current, 'f70370019f22120047a2d126c42e7067'); \\n }\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(new global.AssessmentUtils().conditionCheck(current, 'universal_requestISEMPTY^state=3^ORstate=4^EQ'))\",\n\t\"name\": \"Auto assessment business rule\"\n}```"}
{"prompt":"{\"prompt\":\"Add HR supervisors to watch list\",\"table\":\"sn_hr_core_case\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_case\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\t// Add all members from HR VIP Watchlist group to the watch list\\n\\tvar groupMembers = new GlideRecord('sys_user_grmember');\\n\\tgroupMembers.addQuery('group.name', 'HR VIP Watchlist');\\n\\tgroupMembers.addQuery('user', 'NOT IN', current.getValue('watch_list'));\\n\\tgroupMembers.query();\\n\\n\\tif(groupMembers.hasNext())\\n\\t\\tgs.addInfoMessage(gs.getMessage('VIP employee. Members of the VIP watch list group were added to the watch list.'));\\n\\t\\n\\twhile (groupMembers.next()) {\\n\\t\\tvar user = groupMembers.getValue('user');\\n\\n\\t\\tif (!current.watch_list.nil())\\n\\t\\t\\tcurrent.watch_list += ',' + user;\\n\\t\\telse\\n\\t\\t\\tcurrent.watch_list = user;\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"opened_for.vip=true^opened_forVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Add HR supervisors to watch list\"\n}```"}
{"prompt":"{\"prompt\":\"Set source allocation fields\",\"table\":\"fm_expense_line\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"fm_expense_line\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"50\",\n\t\"add_message\": \"false\",\n\t\"script\": \"setInheritedFields(current);\\nif(current.source_table == '' || current.source_id == '') {\\n\\t\\tif (current.task != '') {\\n\\t\\t\\t\\tcurrent.source_table = current.task.sys_class_name;\\n\\t\\t\\t\\tcurrent.source_id = current.task;\\n\\t\\t} else if (current.ci != '') {\\n\\t\\t\\t\\tcurrent.source_table = current.ci.sys_class_name;\\n\\t\\t\\t\\tcurrent.source_id = current.ci;\\n\\t\\t} else if (current.asset != '') {\\n\\t\\t\\t\\tcurrent.source_table = current.asset.sys_class_name;\\n\\t\\t\\t\\tcurrent.source_id = current.asset;\\n\\t\\tcurrent.fixed_asset = (new ExpenseManagementUtils()).fetchFixedAssset(current.asset);\\n\\t\\t} else if (current.user != '') {\\n\\t\\t\\t\\tcurrent.source_table = 'sys_user';\\n\\t\\t\\t\\tcurrent.source_id = current.user;\\n\\t\\t} else if (current.contract != '') {\\n\\t\\t\\t\\tcurrent.source_table = 'ast_contract';\\n\\t\\t\\t\\tcurrent.source_id = current.contract;\\n\\t\\t}\\n}\\n\\nif (current.source_id != '' && current.source_table != '') {\\n\\tvar values = (new ExpenseManagementUtils()).fetchValues(current.source_id, current.source_table, current);\\n\\tfor(var field in values) {\\n\\t\\tif(values[field]) {\\n\\t\\t\\tcurrent[field] = values[field];\\n\\t\\t}\\n\\t}\\n}\\n\\nfunction setInheritedFields(current) {\\n\\tif(!current.inherited || current.parent == '')\\n\\t\\treturn;\\n\\t\\n\\tvar fields = ['task', 'ci', 'asset', 'user', 'contract'];\\n\\tfor(var i = 0; i < fields.length; ++i) {\\n\\t\\tif(current[fields[i]] == '')\\n\\t\\t\\tcurrent[fields[i]] = current.parent[fields[i]];\\n\\t}\\n}\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.source_id.changes() || current.operation() == 'insert'\",\n\t\"name\": \"Set source allocation fields\"\n}```"}
{"prompt":"{\"prompt\":\"Check table/field changes\",\"table\":\"sttrm_model\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sttrm_model\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar stateGr = new GlideRecord(\\\"sttrm_state\\\");\\n\\tstateGr.addQuery(\\\"sttrm_model\\\", current.getUniqueValue());\\n\\tstateGr.query();\\n\\t\\n\\tif (stateGr.next()) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"You cannot change the State field or Table name if states are associated\\\"));\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"state_fieldVALCHANGES^NQtable_nameVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Check table/field changes\"\n}```"}
{"prompt":"{\"prompt\":\"Text Index remove stop word family\",\"table\":\"ts_stop\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ts_stop\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\nnew GlideTSUtil().removeFamilyForStopWord(current.word, null);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"active=true^EQ\",\n\t\"condition\": \"current != null && !gs.nil(current.word)\",\n\t\"name\": \"Text Index remove stop word family\"\n}```"}
{"prompt":"{\"prompt\":\"Update MID Upgrade Info\",\"table\":\"ecc_agent\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_agent\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\tvar ECC_AGENT_UPGRADE_HISTORY_STAGE = 'ecc_agent_upgrade_history_stage';\\n\\tvar midSysId = current.getUniqueValue();\\n\\tvar newVersion = (gs.getProperty('mid.version'));\\n\\tvar overrideVersion = gs.getProperty('mid.version.override');\\n\\tif (overrideVersion)\\n\\t\\tnewVersion = overrideVersion;\\n\\n\\t\\n\\t//TODO: Update the condition to support the pinned version MID Servers\\n\\tif (current.version != newVersion)\\n\\t\\treturn;\\n\\t\\n\\tvar gr = new GlideRecord(ECC_AGENT_UPGRADE_HISTORY_STAGE);\\n\\tgr.addQuery('mid_server', midSysId);\\n\\tgr.addQuery('stage', 'CopyBinaryFiles');\\n\\tgr.addQuery('state', 'InProgress');\\n\\tgr.orderByDesc('sys_created_on');\\n\\tgr.query();\\n\\t\\n\\tif (gr.next()) {\\n\\t\\tgr.setValue('state', 'Completed');\\n\\t\\tgr.update();\\n\\t\\t\\n\\t\\tvar upGr = new GlideRecord(ECC_AGENT_UPGRADE_HISTORY_STAGE);\\n\\t\\tupGr.initialize();\\n\\t\\tupGr.setValue('stage','MidUpgraded');\\n\\t\\tupGr.setValue('state', 'Completed');\\n\\t\\tupGr.setValue('mid_server', midSysId);\\n\\t\\tupGr.setValue('upgrade_history', gr.getValue('upgrade_history'));\\n\\t\\tupGr.insert();\\n\\t\\t\\n\\t\\t// resolve any open MID Server issue records for upgrade\\n\\t\\tMIDServerUtil.resolveExistingIssues(midSysId, 'Upgrade');\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(current.version.changes())&&(current.status == 'Up')\",\n\t\"name\": \"Update MID Upgrade Info\"\n}```"}
{"prompt":"{\"prompt\":\"Clear Current Hub After Delete\",\"table\":\"sys_update_set_source\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_update_set_source\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var curHubInstanceId = GlideProperties.get('glide.apps.hub.current');\\nif(current.instance_id == curHubInstanceId) { \\n\\tGlidePropertiesDB.set('glide.apps.hub.current','');\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear Current Hub After Delete\"\n}```"}
{"prompt":"{\"prompt\":\"Update Template version\",\"table\":\"cert_template\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cert_template\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var fieldChange = (current.name.changes() || current.filter.changes());\\n\\nvar desiredStateUtil = new DesiredStateUtil;\\nvar currentId = String(current.sys_id);\\nvar clonedCondition = desiredStateUtil.clonedConditions(currentId);\\nfor (var i = 0; i < clonedCondition.length; i++)\\n\\tfieldChange = fieldChange || clonedCondition[i].hasNext();\\n\\nif (fieldChange) {\\n\\tvar newRecordId = SNC.VersionControl.createNewVersion(current, false);\\t// do not move references to latest version\\n\\t(new VersionControlUtil).redirect('cert_template', newRecordId);\\n\\tdesiredStateUtil.copyConditions(currentId, newRecordId, clonedCondition);\\n} else if(current.isValidRecord() && (current.operation() === 'insert'))\\n\\tSNC.VersionControl.createNewVersion(current, false);\\t// used by Clone UI action\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.isValidRecord() || (current.operation() === 'insert')\",\n\t\"name\": \"Update Template version\"\n}```"}
{"prompt":"{\"prompt\":\"Check clustering parameters logic delete\",\"table\":\"ml_advanced_solution_settings\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ml_advanced_solution_settings\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\t/*if DBSCAN is selected than remove threshold for the same solution definition\\n\\t\\t */\\n\\tvar ld = \\\"668619e753220010d1dcddeeff7b125a\\\";\\n\\tvar dbscan = \\\"f4c4ca8053c04010d1dcddeeff7b1236\\\";\\n\\tvar remove_clustered_points = \\\"6d558e8053c04010d1dcddeeff7b1273\\\";\\n\\tvar threshold = \\\"999c201453733300d1dcddeeff7b1212\\\";\\n\\tvar epsilon = \\\"30cbe4d053733300d1dcddeeff7b1252\\\";\\n\\tvar minimum_neighbors = \\\"32ddecd053733300d1dcddeeff7b12c2\\\";\\n\\tvar solution_parameters = current.getValue('solution_parameters');\\n\\tvar solutionDef = current.getValue(global.MLBaseConstants.SOL_DEFINITION_REF_FIELD);\\n\\tswitch (solution_parameters) {\\n\\t\\tcase dbscan : \\n\\t\\t\\t//add threshold\\n\\t\\t\\tvar clustering_params = [threshold];\\n\\t\\t\\tfor (var i =0; i< clustering_params.length; i++){\\n\\t\\t\\t\\tif (!isAdvanceSolutionParamPresent(clustering_params[i])){\\n\\t\\t\\t\\t\\taddAdvanceSolutionSetting(clustering_params[i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// remove eplison, minimum_neighbors\\n\\t\\t\\tvar gr = new GlideRecord(global.MLBaseConstants.ML_ADVANCED_SOL_SETTINGS);\\n\\t\\t\\tgr.addQuery(global.MLBaseConstants.SOL_DEFINITION_REF_FIELD,solutionDef);\\n\\t\\t\\tgr.addQuery(\\\"solution_parameters\\\", \\\"IN\\\", epsilon+','+minimum_neighbors+','+ld);\\n\\t\\t\\tgr.deleteMultiple();\\n\\t\\t\\tbreak;\\n\\t}\\n\\t\\n\\tfunction addAdvanceSolutionSetting(solutionParamSysid) {\\n\\t\\tvar solParamSysidGr = new GlideRecord('ml_solution_parameters');\\n\\t\\tsolParamSysidGr.addActiveQuery();\\n\\t\\tsolParamSysidGr.addQuery('sys_id',solutionParamSysid);\\n\\t\\tsolParamSysidGr.query();\\n\\t\\tif (solParamSysidGr.next()) {\\n\\t\\t\\tvar gr = new GlideRecord('ml_advanced_solution_settings');\\n\\t\\t\\tgr.initialize();\\n\\t\\t\\tgr.setValue('solution_parameters', solParamSysidGr.getValue('sys_id'));\\n\\t\\t\\tgr.setValue('ml_capability_definition', solutionDef);\\n\\t\\t\\tgr.setValue('user_inputs', solParamSysidGr.getValue('user_inputs'));\\n\\t\\t\\tgr.insert();\\n\\t\\t}\\n\\t}\\n\\t\\n\\tfunction isAdvanceSolutionParamPresent(param){\\n\\t\\tif (param) {\\n\\t\\t\\tvar gr = new GlideRecord(global.MLBaseConstants.ML_ADVANCED_SOL_SETTINGS);\\n\\t\\t\\tgr.addQuery(global.MLBaseConstants.SOL_DEFINITION_REF_FIELD,solutionDef);\\n\\t\\t\\tgr.addQuery('solution_parameters',param);\\n\\t\\t\\tgr.query();\\n\\t\\t\\tif (gr.next()){\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"solution_parameters.capabilityLIKE366d333453c73300d1dcddeeff7b12fc^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Check clustering parameters logic delete\"\n}```"}
{"prompt":"{\"prompt\":\"Avoid changes from unwanted domains\",\"table\":\"sa_agg_alert_filter\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sa_agg_alert_filter\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"30\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar currDomain = new EvtMgmtCommons().getCurrentDomainID();\\n\\t\\n\\tvar includedDomains = gs.getProperty(\\\"sa_analytics.included_domains_for_filter\\\",\\\"\\\");\\n\\tincludedDomains = includedDomains.split(',');\\n\\t// Always include \\\"global\\\" domain\\n\\tincludedDomains.push('global');\\n\\t\\t\\n\\tincludedDomains = includedDomains.filter(function(s) { return s }).join(',');\\n\\t\\n\\tif( ! includedDomains.includes(currDomain) ){\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Users from this domain are not allowed to make changes in filters\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Avoid changes from unwanted domains\"\n}```"}
{"prompt":"{\"prompt\":\"Check for duplicate name\",\"table\":\"ts_index_group\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ts_index_group\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar gr = new GlideRecord('ts_index_group');\\n\\tif (gr.get('name', current.name)) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('Index group with name {0} already exists', current.name));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Check for duplicate name\"\n}```"}
{"prompt":"{\"prompt\":\"Validate inputs\",\"table\":\"em_connector_instance\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"em_connector_instance\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"check();\\nfunction check() {\\n\\t\\tif (gs.nil(current.name.trim()))\\n\\t\\t\\t\\terrorAndAbort('Name should not be empty');\\n\\t\\tif (current.active == true) {\\n\\t\\t\\t\\tif (current.operation() === \\\"update\\\" && current.connector_definition.name == \\\"SCOM\\\") {\\n\\t\\t\\t\\t\\t\\tvar connectorVal = new GlideRecord(\\\"em_connector_instance_value\\\");\\n\\t\\t\\t\\t\\t\\tconnectorVal.addQuery(\\\"connector_instance\\\", current.sys_id);\\n\\t\\t\\t\\t\\t\\tconnectorVal.addQuery(\\\"name\\\", \\\"scom_version\\\");\\n\\t\\t\\t\\t\\t\\tconnectorVal.query();\\n\\t\\t\\t\\t\\t\\tvar isDefined = 0;\\n\\t\\t\\t\\t\\t\\tif (connectorVal.next()) {\\n\\t\\t\\t\\t\\t\\t\\t\\tif (connectorVal.getValue(\\\"value\\\") === \\\"2007\\\" || connectorVal.getValue(\\\"value\\\") === \\\"2012\\\" || connectorVal.getValue(\\\"value\\\") === \\\"2016\\\" || connectorVal.getValue(\\\"value\\\") === \\\"2019\\\")\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tisDefined = 1;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif (isDefined == 0)\\n\\t\\t\\t\\t\\t\\t\\t\\terrorAndAbort(\\\"SCOM version is not defined or invalid\\\");\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t//Validation of connector instance name to be unique. STRY53357484\\n\\t\\t//if its insert, then dont allow connector instance with same name as active connector instance name.\\n\\t\\tif (current.operation() == \\\"insert\\\") {\\n\\t\\t\\t\\tvar connectorInstances = new GlideRecord(\\\"em_connector_instance\\\");\\n\\t\\t\\t\\tconnectorInstances.addQuery(\\\"name\\\", current.name);\\n\\t\\t\\t\\t//If a new connector instance is getting created, dont allow to create with same name eventhough they are not active\\n\\t\\t\\t\\t//connectorInstances.addActiveQuery() \\n\\t\\t\\t\\tconnectorInstances.query();\\n\\t\\t\\t\\tif (connectorInstances.next()) {\\n\\t\\t\\t\\t\\t\\terrorAndAbort(\\\"Connector Instance with same name already exists. Specify different name.\\\");\\n\\t\\t\\t\\t}\\n\\n\\t\\t} else if (current.operation() == \\\"update\\\") {\\n\\t\\t\\t\\t//for existing records if user is changing some info in the connector instance, we cannot restrict the user to use different name.\\n\\t\\t\\t\\tvar connectorInstances = new GlideRecord(\\\"em_connector_instance\\\");\\n\\t\\t\\t\\tconnectorInstances.addQuery(\\\"name\\\", current.name);\\n\\t\\t\\t\\tconnectorInstances.addQuery(\\\"sys_id\\\", \\\"!=\\\", current.sys_id);\\n\\t\\t\\t\\tconnectorInstances.addActiveQuery();\\n\\t\\t\\t\\tconnectorInstances.query();\\n\\t\\t\\t\\tif (connectorInstances.next()) {\\n\\t\\t\\t\\t\\t\\tif (current.name == previous.name) {\\n\\t\\t\\t\\t\\t\\t\\t\\t//for existing records if user is changing some info in the connector instance otherthan name, we cannot restrict the user to use different name.\\n\\t\\t\\t\\t\\t\\t\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Connector Instance with same name '{0}' already exists. It is recommended to use unique name.\\\",current.name));\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t//if user is changing the name of the existing connector with the same name of another existing connector instance, error out.\\n\\t\\t\\t\\t\\t\\t\\t\\terrorAndAbort(\\\"Connector Instance with same name already exists. Specify different name.\\\");\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\tfunction errorAndAbort(msg) {\\n\\t\\tvar errMsg= gs.getMessage(msg);\\n\\t\\tgs.addErrorMessage(errMsg);\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate inputs\"\n}```"}
{"prompt":"{\"prompt\":\"Check conflicts in field configurations\",\"table\":\"std_change_properties\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"std_change_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*undefined when async or display*/) {\\n\\tfunction checkIntersection(what, checkIn) {\\n\\t\\tvar common = [];\\n\\t\\tfor (var i = 0; i < what.length; i++) {\\n\\t\\t\\tif (util.contains(checkIn, what[i])) {\\n\\t\\t\\t\\tcommon.push(gr[what[i]].getLabel());\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn common;\\n\\t}\\n\\tvar gr = new GlideRecord('change_request');\\n\\tgr.initialize();\\n\\tvar util = new ArrayUtil();\\n\\n\\tvar mandatory = current.getValue('mandatory_fields').split(',');\\n\\tvar fixed = current.getValue('restricted_fields').split(',');\\n\\tvar toCopy = current.getValue('fields_to_copy').split(',');\\n\\tvar defaultValues = current.getValue('default_values').split(',');\\n\\tvar hasErr = false;\\n\\n\\tvar common = checkIntersection(fixed, mandatory);\\n\\tif (common.length > 0) {\\n\\t\\tif (common.length == 1) {\\n\\t\\t\\tcommon = common[0];\\n\\t\\t} else {\\n\\t\\t\\tcommon = common.join(', ');\\n\\t\\t}\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"You cannot specify the same fields ({0}) in both Mandatory and Restricted fields.\\\", common));\\n\\t\\thasErr = true;\\n\\t}\\n\\n\\tcommon = checkIntersection(fixed, toCopy);\\n\\tif (common.length > 0) {\\n\\t\\tif (common.length == 1) {\\n\\t\\t\\tcommon = common[0];\\n\\t\\t} else {\\n\\t\\t\\tcommon = common.join(', ');\\n\\t\\t}\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"You cannot specify the same fields ({0}) in both Restricted field and Fields to copy.\\\", common));\\n\\t\\thasErr = true;\\n\\t}\\n\\n\\tcommon = new StdChangeUtils().checkFieldsToCopyWithMandatory(mandatory, defaultValues, toCopy);\\n\\tif (common.length > 0) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"The combination of fields listed in <b>Default Change values</b> and <b>Change Fields to copy</b> must include all <b>Mandatory Change fields</b>.<br/>The missing fields are: {0}\\\", common.join(\\\", \\\")));\\n\\t\\thasErr = true;\\t\\t\\n\\t}\\n\\n\\tgr = new GlideRecord('change_task');\\n\\tgr.initialize();\\n\\tvar taskMandatory = current.getValue('mandatory_task_fields').split(',');\\n\\tvar taskFixed = current.getValue('restricted_task_fields').split(',');\\n\\tvar taskToCopy = current.getValue('task_fields_to_copy').split(',');\\n\\tvar defaultTaskValues = current.getValue('default_task_values').split(',');\\n\\n\\tcommon = checkIntersection(taskFixed, taskMandatory);\\n\\tif (common.length > 0) {\\n\\t\\tif (common.length == 1) {\\n\\t\\t\\tcommon = common[0];\\n\\t\\t} else {\\n\\t\\t\\tcommon = common.join(', ');\\n\\t\\t}\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"You cannot specify the same fields ({0}) in both Mandatory Change Task fields and Restricted Change Task fields.\\\", common));\\n\\t\\thasErr = true;\\n\\t}\\n\\n\\tcommon = checkIntersection(taskFixed, taskToCopy);\\n\\tif (common.length > 0) {\\n\\t\\tif (common.length == 1) {\\n\\t\\t\\tcommon = common[0];\\n\\t\\t} else {\\n\\t\\t\\tcommon = common.join(', ');\\n\\t\\t}\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"You cannot specify the same fields ({0}) in both Restricted Change Task fields and Change Task Fields to copy.\\\", common));\\n\\t\\thasErr = true;\\n\\t}\\n\\n\\tcommon = new StdChangeTaskUtils().checkFieldsToCopyWithMandatory(taskMandatory, defaultTaskValues, taskToCopy);\\n\\tif (common.length > 0) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"The combination of fields listed in <b>Default Change Task values</b> and <b>Change Task Fields to copy</b> must include all <b>Mandatory Change Task fields</b>.<br/>The missing fields are: {0}\\\", common.join(\\\", \\\")));\\n\\t\\thasErr = true;\\t\\t\\n\\t}\\n\\t\\n\\tif (hasErr)\\n\\t\\tcurrent.setAbortAction(true);\\n\\n})(current, typeof previous != 'undefined' ?\\tprevious : null);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"new StdChangeUtils().hasPropertyFieldChanged(current) || new StdChangeTaskUtils().hasPropertyFieldChanged(current)\",\n\t\"name\": \"Check conflicts in field configurations\"\n}```"}
{"prompt":"{\"prompt\":\"Delete Task Config User Config Rel\",\"table\":\"agent_schedule_task_config\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"agent_schedule_task_config\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\tvar taskConfigUserPrefRelGR = new GlideRecord('agent_schedule_task_config_rel_user_pref');\\n\\ttaskConfigUserPrefRelGR.addQuery('task_config',current.getValue('sys_id'));\\n\\ttaskConfigUserPrefRelGR.deleteMultiple();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete Task Config User Config Rel\"\n}```"}
{"prompt":"{\"prompt\":\"Set default value for empty script field\",\"table\":\"sys_notification_va_content\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_notification_va_content\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\n\\t\\t\\t\\tcurrent.script = \\\"(function getNotificationHeadingAndMessage(\\\\r\\\\n\\\" +\\n\\t\\t\\t\\t\\\"\\\\t\\\\t\\\\t/*GlideRecord of record changed to cause notification*/ target,\\\\r\\\\n\\\" +\\n\\t\\t\\t\\t\\\"\\\\t\\\\t\\\\t/*GlideRecord of event triggered to cause notification*/ event,\\\\r\\\\n\\\" +\\n\\t\\t\\t\\t\\\"\\\\t\\\\t\\\\t/*Recipient Table Name*/ recipientTable,\\\\r\\\\n\\\" +\\n\\t\\t\\t\\t\\\"\\\\t\\\\t\\\\t/*Recipient Sys Id*/ recipientSysId) {\\\\r\\\\n\\\" +\\n\\t\\t\\t\\t\\\"\\\\t\\\\r\\\\n\\\" +\\n\\t\\t\\t\\t\\\"\\\\t// var arrayEventParam = event.parm1.split(',');\\\\r\\\\n\\\" +\\n\\t\\t\\t\\t\\\"\\\\t// var jsonEventParam = JSON.parse(event.parm2);\\\\r\\\\n\\\" +\\n\\t\\t\\t\\t\\\"\\\\t//\\\\r\\\\n\\\" +\\n\\t\\t\\t\\t\\\"\\\\t// var recipient = new GlideRecord(recipientTable);\\\\r\\\\n\\\" +\\n\\t\\t\\t\\t\\\"\\\\t// recipient.get(recipientSysId);\\\\r\\\\n\\\" +\\n\\t\\t\\t\\t\\\"\\\\t// var messageContent = 'Dear ' + recipient.first_name + ', \\\\\\\\r\\\\\\\\n';\\\\r\\\\n\\\" +\\n\\t\\t\\t\\t\\\"\\\\t// messageContent += 'Use markdown in message content for ***formatted message***.';\\\\r\\\\n\\\" +\\n\\t\\t\\t\\t\\\"\\\\t//\\\\r\\\\n\\\" +\\n\\t\\t\\t\\t\\\"\\\\t// Return object using the below format (messageHeading is optional and messageContent is required)\\\\r\\\\n\\\" +\\n\\t\\t\\t\\t\\\"\\\\t\\\\r\\\\n\\\" +\\n\\t\\t\\t\\t\\\"\\\\treturn {messageHeading:'formattedMessageHeading', messageContent:'formattedMessageContent'};\\\\r\\\\n\\\" +\\n\\t\\t\\t\\t\\\"\\\\t\\\\r\\\\n})(target, event, recipientTable, recipientSysId);\\\";\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.script\",\n\t\"name\": \"Set default value for empty script field\"\n}```"}
{"prompt":"{\"prompt\":\"Report Helpers\",\"table\":\"global\",\"when\":\"\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"//\\r\\n// Return an array of all the users that are in any of the groups specified\\r\\n//\\r\\nfunction getGroupMembers(name1, name2, name3, name4, name5) {\\r\\n\\t var answer = new Array();\\r\\n\\t getGroupMembersGivenGroupName(name1, answer);\\r\\n\\t getGroupMembersGivenGroupName(name2, answer);\\r\\n\\t getGroupMembersGivenGroupName(name3, answer);\\r\\n\\t getGroupMembersGivenGroupName(name4, answer);\\r\\n\\t getGroupMembersGivenGroupName(name5, answer);\\r\\n\\t return answer;\\r\\n}\\r\\n\\r\\n// \\r\\n// Add members of a specified group into an array\\r\\n//\\r\\nfunction getGroupMembersGivenGroupName(name, answer) {\\r\\n\\t var i = answer.length;\\r\\n\\t if (name == null || name == '')\\r\\n\\t\\t\\treturn;\\r\\n\\r\\n\\t var group = new GlideRecord('sys_user_group');\\r\\n\\t group.addQuery('name', name);\\r\\n\\t group.query();\\r\\n\\t if (group.next()) {\\r\\n\\t\\t\\tvar groupID = group.sys_id;\\r\\n\\t\\t\\tgetGroupMembersGivenGroupID(groupID, answer);\\t \\r\\n\\t }\\r\\n\\t return answer;\\r\\n}\\r\\n\\r\\n// \\r\\n// Add members of a specified group into an array\\r\\n//\\r\\nfunction getGroupMembersGivenGroupID(groupID, answer) {\\r\\n\\t var i = answer.length;\\t\\t\\t\\t\\t\\t\\r\\n\\t var members = new GlideRecord('sys_user_grmember');\\r\\n\\t members.addQuery('group', groupID);\\r\\n\\t members.query();\\t\\t\\t\\r\\n\\t while (members.next()) {\\r\\n\\t\\t\\tanswer[i++] = new String(members.user);\\t \\r\\n\\t }\\r\\n\\t return answer;\\r\\n}\\r\\n\\r\\n//\\r\\n// Get an array of all users that belong to the same groups\\r\\n// that the current user belongs to\\r\\n//\\r\\nfunction getAllMembersOfMyGroups() {\\r\\n\\tvar u = gs.getUserID();\\r\\n\\tvar g = new GlideRecord(\\\"sys_user_grmember\\\"); \\r\\n\\tg.addQuery(\\\"user\\\", u); \\r\\n\\tg.query(); \\r\\n\\tvar answer = new Array();\\r\\n\\tvar i = 0;\\r\\n\\twhile( g.next()) {\\r\\n\\t\\tgetGroupMembersGivenGroupID(g.group, answer);\\t\\r\\n\\t}\\r\\n\\treturn answer;\\r\\n\\r\\n}\\r\\n\\r\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Report Helpers\"\n}```"}
{"prompt":"{\"prompt\":\"Inform user about customizations\",\"table\":\"sys_store_app\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_store_app\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar appId = current.getValue('sys_id');\\n\\t\\n\\tif ((current.canWrite() || sn_app_api.AppStoreAPI.canPublishToAppRepo(current.sys_id)) && gs.getProperty('sn_appauthor.allow_customization_upload', 'true') == 'true'\\t&& sn_app_customization.AppCustomizationAPI.hasAppCustomizationFiles(appId))\\n\\t\\tg_scratchpad.showCustomizationInfo = true;\\n\\t\\n\\tg_scratchpad.customizationInfoMessage = gs.getMessage('inform_user_about_ability_to_deploy_customizations');\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"sn_app_customization.AppCustomizationAPI.isAppCustomizationFeatureEnabled()\",\n\t\"name\": \"Inform user about customizations\"\n}```"}
{"prompt":"{\"prompt\":\"Avoid circular loop in Goal\",\"table\":\"sn_gf_core_goal\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_gf_core_goal\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif((new sn_gf.GFCoreGoal(current.getUniqueValue(),current)).isCircularLoopExists()) {\\n\\t\\tvar goalsLabel = sn_gf.GFUtil.getTablePluralLabel(GoalFrameworkConstants.GOAL_TABLE).toLowerCase();\\n\\t\\tgs.addErrorMessage(gs.getMessage( \\\"Cannot add the {0} as a child of {1} as it creates a circular relationship between {2}.\\\", [current.getDisplayValue(),current.getDisplayValue(\\\"parent_goal\\\"), goalsLabel]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"parent_goalISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Avoid circular loop in Goal\"\n}```"}
{"prompt":"{\"prompt\":\"Cache Mugshots\",\"table\":\"sys_atf_step\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_atf_step\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar componentHashes = [];\\n\\tvar inputs = current.inputs;\\n\\tif (inputs.component != null) {\\n\\t\\tif (previous != null && inputs.component == previous.inputs.component)\\n\\t\\t\\treturn;\\n\\n\\t\\t// push string instead of GlideElement to componentHashes\\n\\t\\tcomponentHashes.push(inputs.component.toString());\\n\\t} else if (inputs.component_values != null) {\\n\\t\\tif (previous != null && inputs.component_values == previous.inputs.component_values)\\n\\t\\t\\treturn;\\n\\n\\t\\tvar terms = inputs.component_values.split('^');\\n\\t\\tfor (var i = 0; i < terms.length - 1; i++) {\\n\\t\\t\\tvar hash = terms[i].split('=')[0];\\n\\t\\t\\tif (gs.nil(hash))\\n\\t\\t\\t\\tcontinue;\\n\\n\\t\\t\\tcomponentHashes.push(hash);\\n\\t\\t}\\n\\t} else\\n\\t\\treturn;\\n\\n\\tvar snapshotUtil = new sn_atf.ATFSnapshot();\\n\\tvar mugshotsCacheJson = snapshotUtil.getMugshotsJSONbyHash(current.test, current.order, componentHashes);\\n\\tmugshotsCacheJson = addPreviousMugshotJSON(mugshotsCacheJson);\\n\\tcurrent.mugshots_cache_json = mugshotsCacheJson;\\n\\n\\t/** This is necessary if the snapshot no longer exists. Copies over previous mugshot cache data to prevent it from being cleared out and lost. */\\n\\tfunction addPreviousMugshotJSON(newMugshotsCacheJSON) {\\n\\t\\tvar tempMugshotCacheData;\\n\\t\\t// use previous.mugshots_cache_json for updates and current.mugshots_cache_json for inserts since previous does not exist\\n\\t\\tif (previous.isValidRecord())\\n\\t\\t\\ttempMugshotCacheData = previous.mugshots_cache_json;\\n\\t\\telse\\n\\t\\t\\ttempMugshotCacheData = current.mugshots_cache_json;\\n\\n\\t\\tif (!tempMugshotCacheData)\\n\\t\\t\\treturn newMugshotsCacheJSON;\\n\\n\\t\\tnewMugshotsCacheJSON = JSON.parse(newMugshotsCacheJSON);\\n\\t\\tvar previousMugshotsCacheJSON = JSON.parse(tempMugshotCacheData);\\n\\t\\tfor (var prevMugshotHash in previousMugshotsCacheJSON) {\\n\\t\\t\\tif (componentHashes.indexOf(prevMugshotHash) === -1)\\n\\t\\t\\t\\tcontinue;\\n\\n\\t\\t\\tif (newMugshotsCacheJSON.hasOwnProperty(prevMugshotHash))\\n\\t\\t\\t\\tcontinue;\\n\\n\\t\\t\\tnewMugshotsCacheJSON[prevMugshotHash] = previousMugshotsCacheJSON[prevMugshotHash];\\n\\t\\t}\\n\\n\\t\\treturn JSON.stringify(newMugshotsCacheJSON);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.inputs != null\",\n\t\"name\": \"Cache Mugshots\"\n}```"}
{"prompt":"{\"prompt\":\"Discovery - Set IP Address to Absent\",\"table\":\"cmdb_ci_network_adapter\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci_network_adapter\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar ips = new GlideRecord('cmdb_ci_ip_address');\\n\\tips.addQuery('nic', current.sys_id);\\n\\tips.setValue('install_status', 100); // absent = 100\\n\\tips.updateMultiple();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"install_status=100^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Discovery - Set IP Address to Absent\"\n}```"}
{"prompt":"{\"prompt\":\"Validate limit\",\"table\":\"cxs_ui_config_base\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cxs_ui_config_base\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if (current.limit < 1){\\n\\tcurrent.limit.setError(gs.getMessage(\\\"Limit cannot be less than one\\\"));\\n\\tcurrent.setAbortAction(true);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.limit != ''\",\n\t\"name\": \"Validate limit\"\n}```"}
{"prompt":"{\"prompt\":\"Publish date missed warning\",\"table\":\"sysapproval_approver\",\"when\":\"before_display\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sysapproval_approver\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\tvar gr = new GlideRecord('sn_publications_publication');\\n\\tif(gr.get(current.document_id)){\\n\\t\\tvar start = (new GlideDateTime(gr.getValue(\\\"publish_date\\\"))).getNumericValue();\\t\\n\\t\\tvar now = new GlideDateTime().getNumericValue();\\n\\n\\t\\tif(now >= start){\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('You are not able to approve because you missed the publish date.'));\\n\\t\\t\\t}\\n\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"source_table=sn_publications_publication^state=requested^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Publish date missed warning\"\n}```"}
{"prompt":"{\"prompt\":\"Display test in execution message\",\"table\":\"sys_atf_test\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_atf_test\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar utProcessor = new sn_atf.UserTestProcessor();\\n\\tvar testResultId = utProcessor.getFirstScheduledOrRunningTestResultSysIdForTest(current.sys_id);\\n\\tif (testResultId) {\\n\\t\\tvar link = \\\"href='/sys_atf_test_result.do?sys_id=\\\" + testResultId + \\\"'\\\";\\n\\t\\tvar message = \\\"This test is currently running or is scheduled to run soon. Modifying the test or its steps while the test is running could cause the test run to fail. <a {0}>See the state of the test run here</a>\\\";\\n\\t\\tgs.addInfoMessage(gs.getMessage(message, link), \\\"ATFScheduledToRunSoon\\\");\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Display test in execution message\"\n}```"}
{"prompt":"{\"prompt\":\"Validate change states are selected\",\"table\":\"sys_properties\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar triggerValue = gs.getProperty('com.snc.change_request.auto.discovery', 'off');\\n\\tvar manualProperty = current.getValue('name') === 'com.snc.change_request.disco.manual.state';\\n\\tvar autoProperty = current.getValue('name') === 'com.snc.change_request.disco.auto.state';\\n\\n\\t//do not check state values if the trigger discovery is off\\n\\tif (triggerValue === 'off')\\n\\t\\treturn;\\n\\n\\t//Check states for manual / Both and not when current is auto\\n\\tif (triggerValue === 'manual' && autoProperty)\\n\\t\\treturn;\\n\\n\\t//Check states for automatic / Both and not when current is manual\\n\\tif (triggerValue === 'automatic' && manualProperty)\\n\\t\\treturn;\\n\\n\\tif (!current.getValue('value')) {\\n\\t\\tif (manualProperty)\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage('Change Request states need to be defined to manually trigger Discovery'));\\n\\n\\t\\tif (autoProperty)\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage('Change Request states need to be defined to automatically trigger Discovery'));\\n\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n\\tvar choiceList = new GlideChoiceList().getChoiceList('change_request', 'state');\\n\\tvar proposedValuesArray = current.getValue('value').split(',');\\n\\n\\tfor (var i = 0; i < proposedValuesArray.length; i++) {\\n\\t\\tvar choiceFound = false;\\n\\t\\tvar proposedValue = proposedValuesArray[i].trim();\\n\\t\\tfor (var j = 0; j < choiceList.getSize(); j++) {\\n\\t\\t\\tvar choice = choiceList.getChoice(j);\\n\\t\\t\\tif ((proposedValue === (choice.getValue()+'')) || (proposedValue === (choice.getLabel()+'')))\\n\\t\\t\\t\\tchoiceFound = true;\\n\\t\\t}\\n\\t\\tif (!choiceFound) {\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage('{0} is not a valid state value to be used for triggering Discovery', [proposedValue]));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=com.snc.change_request.disco.manual.state^ORname=com.snc.change_request.disco.auto.state^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate change states are selected\"\n}```"}
{"prompt":"{\"prompt\":\"Assign Hr Roles\",\"table\":\"sn_hr_core_profile\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_profile\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"110\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar userSysId = current.user.sys_id;\\n\\tvar rlmgmnt = new hr_Utils();\\n\\trlmgmnt.removeRolesAssigned(userSysId);\\n\\trlmgmnt.matchingPortalRoles(current);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"employment_typeVALCHANGES^ORemployment_start_dateVALCHANGES^ORemployment_end_dateVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Assign Hr Roles\"\n}```"}
{"prompt":"{\"prompt\":\"Add Ribbon field values to scratchpad\",\"table\":\"sys_ux_ribbon_config_setting\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ux_ribbon_config_setting\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t// 1. table && ribbon.table needs to be the same, \\n\\t// 2. when ribbon is set/change on the form, we set width to ribbon.width\\n\\t// 3. cache ribbon.table & ribbon.width values in scratchpad, so client script can reuse them\\n\\tvar ribbonTables = {};\\n\\tvar ribbonWidths = {};\\n\\tif (!current.ribbon.nil()) {\\n\\t\\tvar ribbonRecord = current.ribbon.getRefRecord();\\n\\t\\tif (!ribbonRecord.isValidRecord()) {\\n\\t\\t\\tcurrent.getElement('ribbon').setError('Invalid reference');\\n\\t\\t\\tribbonTables[current.ribbon] = '';\\n\\t\\t\\tribbonWidths[current.ribbon] = '2';\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tribbonTables[current.ribbon] = ribbonRecord.getValue('table');\\n\\t\\t\\tribbonWidths[current.ribbon] = ribbonRecord.getValue('width');\\n\\t\\t\\tif (current.isNewRecord()) {\\n\\t\\t\\t\\tcurrent.setValue('table', ribbonRecord.getValue('table'));\\n\\t\\t\\t\\tcurrent.setValue('width', ribbonRecord.getValue('width'));\\n\\t\\t\\t}\\n\\t\\t}\\t\\t\\n\\t}\\n\\tg_scratchpad.ribbonTables = ribbonTables;\\n\\tg_scratchpad.ribbonWidths = ribbonWidths;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Add Ribbon field values to scratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"Update Replacement Article References\",\"table\":\"kb_knowledge\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"kb_knowledge\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\t\\n\\tif(current.getValue('workflow_state') == 'published') {\\n\\t\\tcurrent.setValue('replacement_article', '');\\n\\t\\tcurrent.update();\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"workflow_stateCHANGESTOpublished^workflow_stateCHANGESFROMretired^ORworkflow_stateCHANGESFROMpending_retirement^EQ\",\n\t\"condition\": \"new KBCommon().canProvideReplacementArticle()\",\n\t\"name\": \"Update Replacement Article References\"\n}```"}
{"prompt":"{\"prompt\":\"Enable/Disable PA jobs\",\"table\":\"sn_bm_client_configuration\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_bm_client_configuration\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=opt_in_status^valueVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Enable/Disable PA jobs\"\n}```"}
{"prompt":"{\"prompt\":\"NLU system properties validation\",\"table\":\"sys_properties\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar failUpdate = false;\\n\\t\\tvar value = parseFloat(current.value);\\n\\t\\tvar property = current.name.toString();\\n\\t\\tvar sysProps = NLUConstants.SYS_PROPS;\\n\\t\\tvar optMinLabeledData = Number(gs.getProperty('sn_nlu_workbench.glide.nlu.optimize.min_labeled_data'));\\n\\n\\t\\tswitch (property) {\\n\\t\\t\\t\\tcase sysProps.MAX_UTTERANCES_PER_INTENT:\\n\\t\\t\\t\\t\\t\\tif (isNaN(value) || value < 5 || value > 300) {\\n\\t\\t\\t\\t\\t\\t\\t\\tfailUpdate = true;\\n\\t\\t\\t\\t\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('Set a value between 5 and 300 for maximum utterances per intent.'));\\n\\t\\t\\t\\t\\t\\t} else if (value > 200) {\\n\\t\\t\\t\\t\\t\\t\\t\\tgs.addInfoMessage(gs.getMessage('A maximum of 200 utterances per intent is recommended.'));\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase sysProps.MAX_TABLE_LOOKUP_RECORDS:\\n\\t\\t\\t\\t\\t\\tif (isNaN(value) || value < 0 || value > 100000) {\\n\\t\\t\\t\\t\\t\\t\\t\\tfailUpdate = true;\\n\\t\\t\\t\\t\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('Set a value less than or equal to 100,000 for maximum records in a table vocabulary source.'));\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase sysProps.MAX_STATIC_LOOKUP_RECORDS:\\n\\t\\t\\t\\t\\t\\tif (isNaN(value) || value < 0 || value > 1000) {\\n\\t\\t\\t\\t\\t\\t\\t\\tfailUpdate = true;\\n\\t\\t\\t\\t\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('Set a value less than or equal to 1,000 for maximum records in a list vocabulary source.'));\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tcase sysProps.ACTIVE_LEARNING_MAX_RECORDS:\\n\\t\\t\\t\\t\\t\\tif (isNaN(value) || value < optMinLabeledData) {\\n\\t\\t\\t\\t\\t\\t\\t\\tfailUpdate = true;\\n\\t\\t\\t\\t\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('Set a value greater than {0} for Maximum number of utterances to display for feedback in expert feedback loop.', optMinLabeledData));\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tif (failUpdate)\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"nameINglide.nlu.utterances_per_intent.value_limit,glide.platform_ml.api.max_nlu_lookupsource_records,glide.nlu.static_lookup.value_limit,glide.mlpredictor.option.nlu.activeLearning.label_candidate_table.max_response_size^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"NLU system properties validation\"\n}```"}
{"prompt":"{\"prompt\":\"Dispatch survey results update event\",\"table\":\"asmt_metric_type\",\"when\":\"before\",\"actions\":\"ud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_metric_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t// excluding for updates from survey designer\\n\\tvar pageName = GlideTransaction.get().getPageName();\\n\\tif (pageName.indexOf('angular') != -1) return;\\n\\t\\n\\tvar dbViewName = 'u_metric_' + current.sys_id\\t+ \\\"_result\\\";\\n\\tgs.eventQueue('survey.results_view.updated', current, current.sys_id, dbViewName);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.evaluation_method == 'survey'\\t&& current.publish_state == 'published'\",\n\t\"name\": \"Dispatch survey results update event\"\n}```"}
{"prompt":"{\"prompt\":\"Approval Document\",\"table\":\"global\",\"when\":\"after\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/*\\n * This method checks whether a user can read the document\\n * that is being approved.\\n */\\nfunction hasAccessToDocument(approvalGlideRecord){\\n\\tvar table = approvalGlideRecord.source_table;\\n\\tvar id = approvalGlideRecord.document_id;\\n\\tif (!JSUtil.nil(table) && !JSUtil.nil(id)) {\\n\\t\\tvar gr = new GlideRecord(table);\\n\\t\\tif (gr.get(id) && (gr.canRead() || gr.canWrite() || gr.canCreate()))\\n\\t\\t\\treturn true;\\n\\t} else if (!JSUtil.nil(approvalGlideRecord.sysapproval)) {\\n\\t\\tvar gr = new GlideRecord('task');\\n\\t\\tif (gr.get(approvalGlideRecord.sysapproval) && (gr.canRead() || gr.canWrite() || gr.canCreate()))\\n\\t\\t\\treturn true;\\n\\t}\\n\\t\\n\\treturn false;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Approval Document\"\n}```"}
{"prompt":"{\"prompt\":\"Cascade delete to wf_workflow_binding\",\"table\":\"wf_context\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"wf_context\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t/* PRB1250902\\n\\t\\t * This business rule cascades wf_context deletions to the wf_workflow_binding table.\\n\\t * This business rule does not get executed when the table cleaner on wf_context removes\\n\\t * the wf_context record, there by maintaining the promise not to re-start workflows on old\\n\\t * records.\\n\\t */\\n\\n\\tvar binding = new GlideRecord('wf_workflow_binding');\\n\\tbinding.addQuery('id', current.getValue(\\\"id\\\"));\\n\\tbinding.addQuery('workflow_version', current.getValue(\\\"workflow_version\\\"));\\n\\tbinding.deleteMultiple();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Cascade delete to wf_workflow_binding\"\n}```"}
{"prompt":"{\"prompt\":\"Set labor union\",\"table\":\"sn_hr_core_labor_union_contact\",\"when\":\"before_display\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_labor_union_contact\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"local_union_chapterVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Set labor union\"\n}```"}
{"prompt":"{\"prompt\":\"Protect cmdb_ci_class on insert\",\"table\":\"cmdb_model_category\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_model_category\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var existing = new GlideRecord('cmdb_model_category');\\r\\nif (existing.get('cmdb_ci_class', current.cmdb_ci_class)) { \\r\\n\\t gs.addErrorMessage(gs.getMessage(\\\"There is already a category for this CI class\\\"));\\r\\n\\t current.setAbortAction(true);\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.cmdb_ci_class.nil()\",\n\t\"name\": \"Protect cmdb_ci_class on insert\"\n}```"}
{"prompt":"{\"prompt\":\"Compile Content Extension on insert\",\"table\":\"sys_aw_module\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_aw_module\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar wcu = new WorkspaceCompilerUtils();\\n\\tif (gs.nil(current.workspace_config) || !wcu.isValidUxPageRegistry(current.workspace_config.compiled_page_registry)) {\\n\\t\\tif (gs.nil(current.workspace_config))\\n\\t\\t\\tgs.addErrorMessage('Could not compile module, missing Workspace record');\\n\\t\\telse\\n\\t\\t\\tgs.addErrorMessage('Could not compile module, Workspace record not associated with UX Page Registry');\\n\\t\\treturn;\\n\\t}\\n\\t\\n\\tcurrent.toolbar_button = wcu.createButton(current);\\n\\t\\n\\tif (current.type == 'full' || current.type == 'master_detail') {\\n\\t\\tcurrent.content = wcu.compilePrimaryContentExtension(current);\\n\\t\\t\\n\\t\\tif (current.type == 'master_detail') {\\n\\t\\t\\tcurrent.detail = wcu.compileSecondaryContentExtension(current);\\n\\t\\t}\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Compile Content Extension on insert\"\n}```"}
{"prompt":"{\"prompt\":\"Update Document\",\"table\":\"dms_document_revision\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"dms_document_revision\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"updateDocumentState();\\r\\n\\r\\nfunction updateDocumentState() {\\r\\n\\r\\n\\tvar db = new DocumentManagementDB();\\r\\n\\tvar documentId = current.document;\\r\\n\\r\\n\\tvar noneDraftFound = false;\\r\\n\\r\\n\\tvar revisions = db.getRevisionsByDocumentId(documentId);\\r\\n\\r\\n\\tfor ( var i = 0; i < revisions.length; i++) {\\r\\n\\t\\tif (revisions[i].stage != DocumentManagement.draft) {\\r\\n\\t\\t\\tnoneDraftFound = true;\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tif (noneDraftFound) {\\r\\n\\t\\tvar document = db.getDocumentById(documentId, true);\\r\\n\\t\\tdocument.state = DocumentManagement.active;\\r\\n\\t\\tdocument.update();\\r\\n\\t}\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.stage.changes();\",\n\t\"name\": \"Update Document\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent invalid executions limit\",\"table\":\"em_alert_management_action\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"false\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"em_alert_management_action\",\n\t\"advanced\": \"false\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"executions_limitISEMPTY^ORexecutions_limit<1^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent invalid executions limit\"\n}```"}
{"prompt":"{\"prompt\":\"Max Number of Defined Intervals\",\"table\":\"sys_email_digest_interval\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_email_digest_interval\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar maxIntervals = gs.getProperty(\\\"glide.email.digest.max_intervals\\\");\\n\\tvar intervals = new GlideRecord('sys_email_digest_interval');\\n\\tintervals.query();\\n\\n\\t// Restrict the number of intervals\\n\\tif (maxIntervals <= intervals.getRowCount()) {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\tvar infoMessage = gs.getMessage(\\\"Too many email digest intervals have been generated and more cannot be created.\\\");\\n\\t\\tgs.addInfoMessage(infoMessage);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Max Number of Defined Intervals\"\n}```"}
{"prompt":"{\"prompt\":\"Macroponent validator\",\"table\":\"sys_ux_macroponent\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ux_macroponent\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar results = UxFrameworkScriptables.validateMacroponent(current);\\n\\tif (results.length !== 0) {\\t\\t\\n\\t\\tgs.addErrorMessage(gs.getMessage('Validation results: {0}', results.join('; ')));\\n\\t\\tgs.addInfoMessage(gs.getMessage('Record was saved.'));\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Macroponent validator\"\n}```"}
{"prompt":"{\"prompt\":\"global events\",\"table\":\"global\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/**\\n * create general events, tables need fields:\\n * comments, assigned_to, active\\n */\\nfunction global_events(current) {\\n\\tvar name = current.sys_meta.name;\\n\\tglobal_simple_events(current);\\n\\t\\n\\tif (current.operation() != \\\"insert\\\" && current.comments.changes())\\n\\t\\tgs.eventQueue(name + \\\".commented\\\", current, gs.getUserID(), gs.getUserName());\\n\\t\\n\\tif (current.isValidField(\\\"assigned_to\\\")) {\\n\\t\\tif (!current.assigned_to.nil() && current.assigned_to.changes()) {\\n\\t\\t\\tgs.eventQueue(name + \\\".assigned\\\", current, current.assigned_to.getDisplayValue(),\\n\\t\\t\\tprevious.assigned_to.getDisplayValue());\\n\\t\\t}\\n\\t}\\n\\t\\n\\tif (current.operation() != 'insert' && current.active.changesTo(false)) {\\n\\t\\t// if incident_state is valid then use that, to avoid sending back a different value from previous release\\n\\t\\tif (current.isValidField(\\\"incident_state\\\"))\\n\\t\\t\\tgs.eventQueue(name + \\\".inactive\\\", current, current.incident_state, previous.incident_state);\\n\\t\\telse if (current.isValidField(\\\"state\\\"))\\n\\t\\t\\tgs.eventQueue(name + \\\".inactive\\\", current, current.state, previous.state);\\n\\t}\\n}\\n\\n/**\\n * do the inserted, updated events\\n */\\nfunction global_simple_events(current) {\\n\\tvar name = current.sys_meta.name;\\n\\tif (current.operation() == \\\"insert\\\")\\n\\t\\tgs.eventQueue(name + \\\".inserted\\\", current, gs.getUserID(), gs.getUserName());\\n\\tif (current.operation() == \\\"update\\\")\\n\\t\\tgs.eventQueue(name + \\\".updated\\\", current, gs.getUserID(), gs.getUserName());\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"global events\"\n}```"}
{"prompt":"{\"prompt\":\"PA Initialize Empty Description\",\"table\":\"pa_indicators\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_indicators\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(current, previous) {\\n\\t//This function will be automatically called when this rule is processed.\\n\\tvar direction = current.direction;\\n\\tvar direction_string = \\\"not set\\\";\\n\\tif (direction == 2 || direction == 3)\\n\\t\\tdirection_string = \\\"to \\\" + direction.getDisplayValue().toLowerCase();\\n\\n\\tvar indicator_source_name;\\n\\tvar conditions;\\n\\tvar facts_table;\\n\\n\\tvar rec = new GlideRecord(\\\"pa_cubes\\\");\\n\\tif (rec.get(current.cube)) {\\n\\t\\tindicator_source_name = rec.getValue(\\\"name\\\");\\n\\t\\tconditions = rec.getElement(\\\"conditions\\\").getDisplayValue();\\n\\t\\tfacts_table = rec.getValue(\\\"facts_table\\\");\\n\\t}\\n\\n\\tvar additional_conditions = current.conditions;\\n\\n\\tvar message = \\\"{0} is measured {1} as unit {2}.\\\\nThe goal for this indicator is {3}.\\\\nIt is the {4} on data source {5}, which is using the table: \\\\n{6}\\\\nwith the following conditions:\\\\n{7}\\\";\\n\\n\\tvar parameters = [current.name, current.frequency.getDisplayValue().toLowerCase(), current.unit.getDisplayValue(), direction_string, current.aggregate.getDisplayValue().toLowerCase(), indicator_source_name, facts_table, conditions];\\n\\n\\tif (additional_conditions) {\\n\\t\\tmessage += \\\"\\\\nAdditional conditions:\\\\n{8}\\\";\\n\\t\\tparameters.push(additional_conditions.getDisplayValue());\\n\\t}\\n\\n\\tvar description = gs.getMessage(message, parameters);\\n\\n\\t\\t// Fetch the indicator again to refresh the value of \\\"id\\\" and thereby to avoid UniqueConstraint error from DB\\n\\tvar indicator = new GlideRecord(current.getTableName());\\n\\tif (indicator.get(current.sys_id)) {\\n\\t\\tindicator.setValue('description', description);\\n\\t\\tindicator.update();\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"descriptionISEMPTY^type=1^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"PA Initialize Empty Description\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent 'is system' records creation\",\"table\":\"svc_manual_ci_exclusions_inclusions\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"svc_manual_ci_exclusions_inclusions\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"110\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\tcurrent.setAbortAction(true);\\n\\tgs.addErrorMessage(gs.getMessage(\\\"You cannot create or modify or delete preconfigured rules that are part of the base system. Preconfigured rules have the Is System property enabled.\\\"));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.is_system == true\",\n\t\"name\": \"Prevent 'is system' records creation\"\n}```"}
{"prompt":"{\"prompt\":\"Cancel Conflict Detection\",\"table\":\"change_request\",\"when\":\"before\",\"actions\":\"ud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"change_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"99\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*undefined when async or display*/) {\\n\\tvar RUNNING = \\\"1\\\";\\n\\tvar trackerGr = new GlideRecord(\\\"sys_execution_tracker\\\");\\n\\ttrackerGr.addQuery(\\\"source\\\", current.getUniqueValue());\\n\\ttrackerGr.addQuery(\\\"name\\\", ChangeCheckConflicts.TRACKER_NAME);\\n\\ttrackerGr.addQuery(\\\"state\\\", RUNNING);\\n\\ttrackerGr.query();\\n\\t\\n\\tvar MESSAGE = gs.getMessage(\\\"The conflict check has been cancelled because the change request it was being run against has been modified\\\");\\t\\n\\tif (trackerGr.next())\\n\\t\\tSNC.GlideExecutionTracker.getBySysID(trackerGr.getUniqueValue()).cancel(MESSAGE);\\n\\n})(current, typeof previous != 'undefined' ?\\tprevious : null);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"active=true^stateVALCHANGES^ORcmdb_ciVALCHANGES^ORstart_dateVALCHANGES^ORend_dateVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Cancel Conflict Detection\"\n}```"}
{"prompt":"{\"prompt\":\"Handle mapping of custom table to bundle\",\"table\":\"ua_custom_table_inventory\",\"when\":\"async_always\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ua_custom_table_inventory\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async_always\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\tSNC.UACTScriptUtils.reloadEntitledCustomTbls();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\\n\\t\\t\\tallotment_typeCHANGESFROM3^ORallotment_typeCHANGESTO3^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Handle mapping of custom table to bundle\"\n}```"}
{"prompt":"{\"prompt\":\"Invalid MID Server settings\",\"table\":\"sys_user_role\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_user_role\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tgs.addErrorMessage(gs.getMessage(\\\"The mid_server role cannot have the 'Elevated privilege' option set to true\\\"));\\n\\tcurrent.setAbortAction(true);\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=mid_server^elevated_privilege=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Invalid MID Server settings\"\n}```"}
{"prompt":"{\"prompt\":\"GetIDValue\",\"table\":\"global\",\"when\":\"after\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// Return the sys_id value for a given table and its display value\\r\\n//\\r\\nfunction GetIDValue(table, displayValue) {\\r\\n\\t var rec = new GlideRecord(table);\\r\\n\\t var dn = gs.getDisplayColumn(table);\\r\\n\\t if (rec.get(dn, displayValue))\\r\\n\\t\\t\\treturn rec.sys_id;\\r\\n\\t else\\r\\n\\t\\t\\treturn null;\\r\\n}\\r\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"GetIDValue\"\n}```"}
{"prompt":"{\"prompt\":\"set update available and content updated\",\"table\":\"pa_content_metadata\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_content_metadata\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar update_time\\t= new GlideDateTime();\\n\\t\\n\\t// updates the parent content pack \\n\\tvar pa_content_pack = new GlideRecord('pa_content_pack');\\n\\tif(pa_content_pack.get(current.pa_content_pack)){\\n\\t\\tif(current.metadata != previous.metadata){\\n\\t\\t\\tcurrent.content_updated = update_time;\\n\\t\\t\\tpa_content_pack.content_updated = update_time;\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tpa_content_pack.content_updated = current.content_updated;\\n\\t\\tpa_content_pack.update_available = true;\\n\\t\\tpa_content_pack.update();\\n\\t}\\n\\tcurrent.update_available = true;\\n\\tcurrent.update();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.content_updated\\t>\\tprevious.content_updated || current.metadata != previous.metadata\",\n\t\"name\": \"set update available and content updated\"\n}```"}
{"prompt":"{\"prompt\":\"Notify on change of JRE to bundled copy\",\"table\":\"ecc_agent\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_agent\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar currentDir = current.getValue('mid_java_command_dir');\\n\\t\\n\\tif(currentDir.startsWith(current.getValue('home_dir'))) {\\n\\t\\tvar prevVersion = previous.getValue('jvm_version');\\n\\t\\tvar currentVersion = current.getValue('jvm_version');\\n\\t\\tMIDServerUtil.createOrUpdateIssue(current.getValue('sys_id'), 'MidJRE', \\n\\t\\t\\t\\t\\t\\t'Detected JRE switched from version ' + prevVersion + ' to bundled version ' + currentVersion);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"jvm_versionVALCHANGES^mid_java_command_dirVALCHANGES^EQ\",\n\t\"condition\": \"!previous.jvm_version.nil() && !previous.mid_java_command_dir.nil()\",\n\t\"name\": \"Notify on change of JRE to bundled copy\"\n}```"}
{"prompt":"{\"prompt\":\"Discovery - Device Complete\",\"table\":\"discovery_device_history\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"discovery_device_history\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"500\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var deviceHistory = ((typeof g_device != 'undefined') && g_device) ? g_device : SncDeviceHistory.getFromSourceAndStatusAndClassification(current.source, current.status, current.classification_probe);\\nvar shouldFireAdm = deviceHistory.getScratchpadValue('requires_adm') == 'true';\\n\\nif (shouldFireAdm)\\n\\tfireAdm();\\n\\nrunCompletionTasks();\\n\\nfunction fireAdm() {\\n\\tvar source = ''+current.source;\\n\\t\\tvar status = '' + current.status;\\n\\t\\tvar classificationProbe = '' + current.classification_probe;\\n\\t\\tvar script = 'ApplicationDependencyMapping.map(\\\"' + source + '\\\", \\\"' + status + '\\\", \\\"' + classificationProbe + '\\\");';\\n\\tnew GlideRunScriptJob().scheduleScript(script);\\n\\tgs.eventQueue(\\\"discovery.device.adm.mapping_started\\\", \\\"discovery_device_history\\\", current.sys_id, current.cmdb_ci, script);\\n}\\n\\nfunction runCompletionTasks() {\\n\\t\\tvar status = new DiscoveryStatus('' + current.status);\\n\\t\\t// DEF0171825: do not create discovery complete events for additional ips of a CI\\n\\t\\tif (current.last_state != \\\"Identified, ignored extra IP\\\")\\n\\t\\t\\t\\tthrowDeviceCompleteEvent();\\n\\t\\tupdateDHState(status);\\n}\\n\\nfunction updateDHState(status) {\\t\\n\\t\\tif (!status.discoverCIs() && !status.discoverNets())\\n\\t\\t\\t\\treturn;\\n\\n\\t\\tif (JSUtil.nil(deviceHistory.getCurrentState()))\\n\\t\\t\\t\\treturn;\\n\\n\\t\\tvar created = (('' + deviceHistory.getLastState()) == 'Created CI');\\n\\t\\tdeviceHistory.setStopWorkflow(true);\\n\\t\\tdeviceHistory.state(created ? 'Created CI' : 'Updated CI', '', status.logStateChanges, 'Device complete');\\n\\t\\tdeviceHistory.setStopWorkflow(false);\\n}\\n\\nfunction throwDeviceCompleteEvent() {\\t\\n\\t\\tgs.eventQueue(\\\"discovery.device.complete\\\", current, current.sys_id, current.status);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.started > 0 && (current.started == current.completed) && (current.scan_status.startsWith(\\\"Completed\\\")) && JSUtil.notNil(current.cmdb_ci)\",\n\t\"name\": \"Discovery - Device Complete\"\n}```"}
{"prompt":"{\"prompt\":\"Maximum Subscription Coverage Interval\",\"table\":\"cmn_rota\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmn_rota\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (new OCRotaICalendar().coverageLimitExceeded(current))\\n\\t\\tcurrent.setAbortAction(true);\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"coverage_lead_typeVALCHANGES^ORcoverage_intervalVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Maximum Subscription Coverage Interval\"\n}```"}
{"prompt":"{\"prompt\":\"Base and Target Values validations\",\"table\":\"sn_gf_goal_target\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_gf_goal_target\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"50\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\t\\n\\tif(current.getValue('type') == 'maximize' && (parseFloat(current.getValue('base_value')) > parseFloat(current.getValue('target_value')))){\\n\\t\\tgs.addErrorMessage(gs.getMessage('Base value should be lesser than Target value when Type is selected as Maximize.'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\telse if(current.getValue('type') == 'minimize' && (parseFloat(current.getValue('base_value')) < parseFloat(current.getValue('target_value')))){\\n\\t\\tgs.addErrorMessage(gs.getMessage('Target value should be lesser than Base value when Type is selected as Minimize.'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Base and Target Values validations\"\n}```"}
{"prompt":"{\"prompt\":\"Move duplicates of CI set as duplicate\",\"table\":\"cmdb_ci\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_ci\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"1000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t// Skip if being marked as duplicate of the Unknown Main CI\\n\\tvar unknownMasterSysID = \\\"8fbc3c053bc07300b924874064efc4ae\\\";\\n\\tif (current.duplicate_of == unknownMasterSysID) {\\n\\t\\treturn;\\n\\t}\\n\\n\\t// If there are duplicates of current CI being set as\\n\\t// duplicate of another CI (masterCI) update them to be\\n\\t// duplicates of masterCI\\n\\t// In the case masterCI was itself a duplicate of the CI\\n\\t// (switching the master of the set) clear its duplicate_of value\\n\\t\\n\\tvar myDuplicates = new GlideRecord('cmdb_ci');\\n\\t// Avoid invoking this same BR for the duplicate CIs,\\n\\t// restrict the change to one level\\n\\tmyDuplicates.setWorkflow(false);\\n\\t\\n\\t// Handle duplicate Cis except for new Master\\n\\tmyDuplicates.addQuery('duplicate_of', current.sys_id);\\n\\tmyDuplicates.addQuery('sys_id', '!=', current.duplicate_of);\\n\\tmyDuplicates.query();\\n\\t\\n\\tif (myDuplicates.getRowCount() > 0) {\\n\\t\\t\\n\\t\\tvar msgArray = [];\\n\\t\\tmsgArray.push(current.getDisplayValue());\\n\\t\\tmsgArray.push(current.duplicate_of.getDisplayValue());\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"{0} is now a duplicate CI and {1} is set as its main CI. Therefore, all CIs that were set with {0} as their main CI are now set with {1} as their main CI.\\\", msgArray));\\n\\t\\t\\t\\n\\t\\t\\tmyDuplicates.setValue('duplicate_of', current.duplicate_of);\\n\\t\\t\\tmyDuplicates.updateMultiple();\\n\\t\\t}\\n\\t\\t\\n\\t\\t// Trying to swap the master\\n\\t\\t// CI\\tDuplicateOf\\t\\t CI\\tDuplicateOf\\n\\t\\t// A\\t\\t\\t\\t\\t\\t\\t --> A\\t B\\n\\t\\t// B\\t A\\t\\t\\t\\t\\t\\t\\t B\\t [clear the value]\\n\\t\\tmyDuplicates = new GlideRecord('cmdb_ci');\\n\\t\\t\\n\\t\\tmyDuplicates.addQuery('duplicate_of', current.sys_id);\\n\\t\\tmyDuplicates.addQuery('sys_id', current.duplicate_of);\\n\\t\\tmyDuplicates.query();\\n\\t\\t\\n\\t\\t// Not disabling Business Rule since Business Rule\\n\\t\\t// will take care of clearing duplicate value in\\n\\t\\t// discovery source for this CI\\n\\t\\tif (myDuplicates.next()) {\\n\\t\\t\\tmyDuplicates.setValue('duplicate_of', '');\\n\\t\\t\\tmyDuplicates.update();\\n\\t\\t}\\n\\t\\t\\n\\t})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"duplicate_ofVALCHANGES^EQ\",\n\t\"condition\": \"!current.duplicate_of.nil()\",\n\t\"name\": \"Move duplicates of CI set as duplicate\"\n}```"}
{"prompt":"{\"prompt\":\"Show info on change state event turn off\",\"table\":\"sys_properties\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"2000\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\tvar impactedEventHandlerList = [];\\n\\tvar scriptActionGr = new GlideRecord('sysevent_script_action');\\n\\tscriptActionGr.addQuery('event_name', 'sn_change.state.updated');\\n\\tscriptActionGr.addActiveQuery();\\n\\tscriptActionGr.query();\\n\\twhile (scriptActionGr.next()) \\n\\t\\timpactedEventHandlerList.push('' + scriptActionGr.name);\\n\\n\\tif (impactedEventHandlerList.length > 0) \\n\\t\\tgs.addInfoMessage(gs.getMessage('The generate \\\\'sn_change.state.updated\\\\' event property is disabled. This impacts the following script action(s): {0}', impactedEventHandlerList.join(', ')));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=com.snc.change_request.event.state_updated.enabled^valueCHANGESFROMtrue^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Show info on change state event turn off\"\n}```"}
{"prompt":"{\"prompt\":\"SetValueForOrderButton\",\"table\":\"sys_properties\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar layout = new GlideRecord('sc_layout');\\n\\tlayout.addQuery(\\\"target\\\",\\\"order_item\\\");\\n\\tlayout.query();\\n\\tif (layout.next()) {\\n\\t\\tlayout.setValue('sc_order_item_button', false);\\n\\t\\tlayout.update();\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=glide.sc.enable_order_now^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"SetValueForOrderButton\"\n}```"}
{"prompt":"{\"prompt\":\"emailsToUsers\",\"table\":\"global\",\"when\":\"after\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"global\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function emailsToUsers(emails) {\\r\\n\\tvar append = false;\\r\\n\\tif (emails.substr(emails.length - 3) == \\\"...\\\")\\r\\n\\t\\tappend = true;\\r\\n\\tvar usr = new GlideRecord('sys_user');\\r\\n\\tvar answer = \\\"\\\";\\r\\n\\tvar newval = \\\"\\\";\\r\\n\\tvar s = \\\"\\\";\\r\\n\\tvar arr = emails.split(',');\\r\\n\\tfor (var i = 0; i < arr.length; i++) {\\r\\n\\t\\ts = GlideStringUtil.stripSuffix(arr[i].trim(),\\\"...\\\");\\r\\n\\t\\tusr.initialize();\\r\\n\\t\\tif (usr.get(GlideUser.getSysId('email',s)))\\r\\n\\t\\t\\tnewval = usr.getDisplayValue();\\r\\n\\t\\telse \\r\\n\\t\\t\\tnewval = s;\\r\\n\\r\\n\\t\\tif (answer == \\\"\\\")\\r\\n\\t\\t\\tanswer = newval\\r\\n\\t\\telse\\r\\n\\t\\t\\tanswer = answer + \\\", \\\" + newval;\\r\\n\\t}\\r\\n\\tif (append == true)\\r\\n\\t\\tanswer = answer + \\\"...\\\";\\r\\n\\treturn answer;\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"emailsToUsers\"\n}```"}
{"prompt":"{\"prompt\":\"Update type for glide lookup\",\"table\":\"sys_rte_eb_glide_lookup_operation\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_rte_eb_glide_lookup_operation\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\t\\tcurrent.type = \\\"a068e629730000102b6265a751ab9e77\\\";\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update type for glide lookup\"\n}```"}
{"prompt":"{\"prompt\":\"Abort change to invalid rule\",\"table\":\"em_impact_infra_rel_def\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"em_impact_infra_rel_def\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (current.impact_rule.applies_to_element_type == \\\"CI\\\"\\t|| current.impact_rule.applies_to_element_type == \\\"INCLUSION\\\"\\n\\t\\t || current.impact_rule.applies_to_element_type == \\\"CLUSTER\\\") {\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\t\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Abort change to invalid rule\"\n}```"}
{"prompt":"{\"prompt\":\"Service Query\",\"table\":\"sc_cat_item_producer_service\",\"when\":\"before\",\"actions\":\"r\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"true\",\n\t\"collection\": \"sc_cat_item_producer_service\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if ((gs.getSession().getClientData(\\\"executing_service_task_wf\\\") + '') !== \\\"true\\\" && !isServiceCatalogPath()) {\\n\\tcurrent.addEncodedQuery(\\\"categoryIN\\\" + getMyCatalogCategories());\\n}\\n\\nfunction isServiceCatalogPath() {\\n\\tvar action = gs.action;\\n\\tvar glideURI = action ? action.getGlideURI() : false;\\n\\tif (glideURI) {\\n\\t\\tvar filePath = glideURI.getFileFromPath() + \\\"\\\";\\n\\t\\tif (filePath === 'service_catalog')\\n\\t\\t\\treturn true;\\n\\t}\\n\\treturn false;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!gs.hasRole(\\\"catalog_admin\\\")\",\n\t\"name\": \"Service Query\"\n}```"}
{"prompt":"{\"prompt\":\"Wipe Metric Source Fields\",\"table\":\"asmt_metric_type\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"asmt_metric_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tnew AssessmentUtils().wipeMetricSourceFields(current.sys_id);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"source_tableVALCHANGES^EQ\",\n\t\"condition\": \"!gs.nil(previous.source_table)\",\n\t\"name\": \"Wipe Metric Source Fields\"\n}```"}
{"prompt":"{\"prompt\":\"Set indicator type to be formula\",\"table\":\"pa_indicators\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_indicators\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"1\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tcurrent.type = 2;\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.formula.nil() && current.getValue('type') != 2\",\n\t\"name\": \"Set indicator type to be formula\"\n}```"}
{"prompt":"{\"prompt\":\"Verfiy model on lifecycle\",\"table\":\"cmdb_model_lifecycle\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_model_lifecycle\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/*\\nReturns array of string of table names in hierarchy.\\n*/\\nfunction _getTableHierarchy(className) {\\n\\tvar tableUtil = new TableUtils(className);\\n\\tvar arrayUtils = new ArrayUtil();\\n\\tvar tableArray = arrayUtils.convertArray(tableUtil.getTables());\\n\\treturn tableArray.toString().split(',');\\n}\\n\\n/*\\nReturns model based on mapped lifecycle table.\\nIf no mapping is present returns cmdb_model.\\n*/\\nfunction _getLifecycleModel(lifecycleClass) {\\n\\tvar lifecycleModelMap = {\\n\\t\\tcmdb_model_lifecycle: 'cmdb_model',\\n\\t\\tcmdb_hardware_model_lifecycle: 'cmdb_hardware_product_model',\\n\\t\\tcmdb_consumable_model_lifecycle: 'cmdb_consumable_product_model',\\n\\t\\tcmdb_application_model_lifecycle: 'cmdb_application_product_model',\\n\\t\\tcmdb_contract_model_lifecycle: 'cmdb_contract_product_model',\\n\\t\\tcmdb_facility_model_lifecycle: 'cmdb_facility_product_model',\\n\\t\\tcmdb_service_model_lifecycle: 'cmdb_service_product_model'\\n\\t};\\n\\tvar lifecycleClasses = Object.keys(lifecycleModelMap);\\n\\tvar tableHierarchy = _getTableHierarchy(lifecycleClass);\\n\\tvar lifecycleModel = 'cmdb_model';\\n\\tfor (var i = 0; i < tableHierarchy.length; i++) {\\n\\t\\tvar tableName = tableHierarchy[i];\\n\\t\\tif (lifecycleClasses.indexOf(tableName) > -1) {\\n\\t\\t\\tlifecycleModel = lifecycleModelMap[tableName];\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\treturn lifecycleModel;\\n}\\n\\n(function executeRule(current) {\\n\\tvar SOFTWARE_MODEL = 'cmdb_software_product_model';\\n\\tvar modelClass = current.model.sys_class_name.toString();\\n\\tvar modelHierarchy = _getTableHierarchy(modelClass);\\n\\tvar lifecycleClass = current.sys_class_name.toString();\\n\\t// Restrict creation of lifecycle for software model and their childs\\n\\tif (modelHierarchy.indexOf(SOFTWARE_MODEL) > -1) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('Lifecycle cannot be created for software model on \\\"{0}\\\"', [lifecycleClass]));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t} else {\\n\\t\\tvar lifecycleModel = _getLifecycleModel(lifecycleClass);\\n\\t\\t// Allow creation of lifecycle if model present in modelHierarchy\\n\\t\\tif (modelHierarchy.indexOf(lifecycleModel) === -1) {\\n\\t\\t\\tgs.addErrorMessage(gs.getMessage('Lifecycle cannot be created for \\\"{0}\\\" on \\\"{1}\\\"', [modelClass, lifecycleClass]));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t}\\n})(current);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Verfiy model on lifecycle\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent prefix collisions\",\"table\":\"sys_number\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_number\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/**\\n* Prevents creating sys_number records with colliding prefix:\\n*\\t- Same prefix\\n*\\t- Prefix ending with a number and same alphanumerical prefix as an existing record\\n*\\t- We get the alphanumerical prefix by selecting all characters up to the last non-digit one\\n*\\t- On the same table family, TASK and TASK67 collide, TASK and TASK3b5 don't\\n*/\\n\\nfunction onBefore(current, previous) {\\n\\tvar tableBase = new TableUtils(current.category).getAbsoluteBase();\\n\\tvar tableFamily = new TableUtils(tableBase).getAllExtensions();\\n\\ttableFamily = tableFamily.toArray().join(',');\\n\\t//We trim the last digits\\n\\tvar stemMatcher = /^(.*\\\\D+)\\\\d*$/i.exec(current.prefix);\\n\\tvar stem = stemMatcher ? stemMatcher[1] : '';\\n\\tvar potentialCollisions = getPotentialCollisions(stem, current.sys_id, tableFamily);\\n\\twhile (potentialCollisions.next()) {\\n\\t\\tif (isCollision(stem, potentialCollisions.prefix)) {\\n\\t\\t\\tmsg = gs.getMessage('The prefix {0} collides with the prefix of an existing record', current.prefix);\\n\\t\\t\\tgs.addErrorMessage(msg);\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\t\\n\\t}\\n\\t\\n\\t//Get potential collisions for the given stem\\n\\t//i.e records with prefix that starts with the same stem, other than the current one\\n\\tfunction getPotentialCollisions(stem, sys_id, tableFamily) {\\n\\t\\tvar numbers = new GlideRecord('sys_number');\\n\\t\\tnumbers.addQuery('prefix', 'STARTSWITH', stem);\\n\\t\\tnumbers.addQuery('sys_id', '!=', sys_id);\\n\\t\\tnumbers.addQuery('category', 'IN', tableFamily);\\n\\t\\tnumbers.query();\\n\\t\\treturn numbers;\\n\\t}\\n\\t\\n\\t//returns true if the prefix is a collision for the given stem\\n\\t//i.e if it is the stem followed by any number\\n\\tfunction isCollision(stem, prefix) {\\n\\t\\tvar re = new RegExp(\\\"^\\\" + stem + \\\"\\\\\\\\d*$\\\", \\\"i\\\");\\n\\t\\treturn re.test(prefix);\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"prefixVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent prefix collisions\"\n}```"}
{"prompt":"{\"prompt\":\"Abort on invalid masking config \",\"table\":\"sys_cs_general_settings\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_cs_general_settings\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tvar masking_enabled = current.mask_sensitive_information;\\n\\t\\tvar masking_flow_selected = current.mask_agent_to_requester || current.mask_requester_to_agent || current.mask_requester_to_virtual_agent;\\n\\n\\t\\t//make sure atleast one masking flow is enabled if sensitive data handling is enabled on the instance\\n\\t\\tif (masking_enabled && !masking_flow_selected) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Atleast one masking flow should be selected\\\"));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\n\\t//disable all the flows if masking is disabled\\n\\t\\tif (!masking_enabled) {\\n\\t\\t\\t\\tcurrent.mask_agent_to_requester = false;\\n\\t\\t\\t\\tcurrent.mask_requester_to_agent = false;\\n\\t\\t\\t\\tcurrent.mask_requester_to_virtual_agent = false;\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Abort on invalid masking config \"\n}```"}
{"prompt":"{\"prompt\":\"Clear TS Table Cache\",\"table\":\"ts_index_name\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ts_index_name\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"new GlideTSUtil().invalidateTableCache(current.table);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.changes()\",\n\t\"name\": \"Clear TS Table Cache\"\n}```"}
{"prompt":"{\"prompt\":\"Check duplicated markers on map page\",\"table\":\"m2m_map_page_map_marker\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"m2m_map_page_map_marker\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Duplicated marker {0} is added on the map page {1}.\\\", [current.map_marker.getDisplayValue(), current.map_page.getDisplayValue()]));\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"SNMapPageUtil.checkDuplicatedMarkerMappings(current)\",\n\t\"name\": \"Check duplicated markers on map page\"\n}```"}
{"prompt":"{\"prompt\":\"Robust Import Set\\tTransformers Checker\",\"table\":\"sys_transform_map\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_transform_map\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar robustTransformer = new GlideRecord('sys_robust_import_set_transformer');\\n\\t\\t\\t\\trobustTransformer.addQuery('source_table',\\tcurrent.source_table);\\n\\t\\t\\t\\trobustTransformer.addActiveQuery();\\n\\t\\t\\t\\trobustTransformer.query();\\n\\t\\t\\t\\tif (robustTransformer.next()) {\\n\\t\\t\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('Source table {0} already has an active robust import set transformer {1}', [robustTransformer.source_table, robustTransformer.name]));\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"active=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Robust Import Set\\tTransformers Checker\"\n}```"}
{"prompt":"{\"prompt\":\"Update profile state\",\"table\":\"ais_search_profile_ais_search_source_m2m\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ais_search_profile_ais_search_source_m2m\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// Since changes to search sources affect the default derived spelling dictionary, we should set linked profile sate to DRAFT\\n\\nvar profileGR = new GlideRecord('ais_search_profile');\\nif (profileGR.get(current.profile)) {\\n\\t\\tif (profileGR.state != \\\"NEW\\\") {\\n\\t\\t\\t\\tprofileGR.state = 'DRAFT';\\n\\t\\t\\t\\tprofileGR.update();\\n\\t\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!gs.nil(current.profile)\",\n\t\"name\": \"Update profile state\"\n}```"}
{"prompt":"{\"prompt\":\"Message if functionality is switched off\",\"table\":\"sc_layout\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_layout\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var layoutPropertyKey = 'glide.sc.use_cart_layouts';\\nvar layoutEnabled = gs.getProperty(layoutPropertyKey, \\\"false\\\");\\nvar layoutArgs = [layoutPropertyKey,layoutEnabled];\\n\\t\\t\\nif (layoutEnabled == \\\"false\\\")\\n\\tgs.addErrorMessage(gs.getMessage(\\\"Changes to Cart Layouts will not take place as layouts are currently disabled : Property '{0}' is set to {1}\\\" , layoutArgs ));\\n\\nvar twoStepKey = 'glide.sc.checkout.twostep';\\nvar twoStepActive = gs.getProperty(twoStepKey, \\\"false\\\");\\nvar twoStepArgs = [twoStepKey, twoStepActive];\\n\\nif (twoStepActive == 'false' && current.target == 'cart_view_two_step')\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"Please note that changes to the layout will not show as two-step checkout is disabled: Property '{0}' is set to {1}\\\" ,\\ttwoStepArgs));\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(gs.getProperty('glide.sc.use_cart_layouts')==\\\"false\\\") || (gs.getProperty('glide.sc.checkout.twostep')==\\\"false\\\")\",\n\t\"name\": \"Message if functionality is switched off\"\n}```"}
{"prompt":"{\"prompt\":\"Populate case SLAs\",\"table\":\"task_sla\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"task_sla\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(current, previous) {\\n\\t\\n\\tvar hr_case = new GlideRecord(\\\"sn_hr_core_case\\\"); \\n\\tif(hr_case.get(current.task)) { \\n\\t\\thr_case.setValue(\\\"sla\\\", current.business_percentage); \\n\\t\\thr_case.autoSysFields(false);\\n\\t\\thr_case.setWorkflow(false);\\n\\t\\thr_case.update();\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"task.sys_class_nameINSTANCEOFsn_hr_core_case^active=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Populate case SLAs\"\n}```"}
{"prompt":"{\"prompt\":\"Check for Resource Type\",\"table\":\"matching_rule\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"false\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"matching_rule\",\n\t\"advanced\": \"false\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"matching_options=recommendation criteria^resource_type_table!=sys_user^resource_type_tableISNOTEMPTY^resource_type_table!=wm_crew^resource_type_table!=sn_tp_territory^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Check for Resource Type\"\n}```"}
{"prompt":"{\"prompt\":\"Remove from favorite when delete\",\"table\":\"par_visualization\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"par_visualization\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tnew global.VizDesignerUtil().removeVizFromUserPreferences((String)(current.sys_id));\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Remove from favorite when delete\"\n}```"}
{"prompt":"{\"prompt\":\"Clear User Label Cache\",\"table\":\"label_entry\",\"when\":\"after\",\"actions\":\"cd\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"label_entry\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(current, previous) {\\n\\t GlideCacheManager.prefixFlush(\\\"syscache_user_label\\\", gs.getUserID());\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear User Label Cache\"\n}```"}
{"prompt":"{\"prompt\":\"metrics events\",\"table\":\"task\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"50\",\n\t\"add_message\": \"false\",\n\t\"script\": \"queueMetricUpdate();\\n\\nfunction queueMetricUpdate() {\\t\\t\\n\\tvar gru =\\tnew GlideScriptRecordUtil.get(current);\\n\\tvar fieldsChanged = gru.getChangedFieldNames();\\n\\tvar gr = getDefinitions(fieldsChanged);\\n\\tfields = '';\\n\\twhile (gr.next())\\n\\t\\tfields += gr.field + ',';\\n\\t\\n\\tif (fields.length > 0) {\\n\\t\\tfields = '[' + fields.substring(0, fields.length - 1) + ']';\\n\\t\\tgs.eventQueue('metric.update', current, fields, current.sys_mod_count, 'metric_update');\\n\\t}\\n}\\n\\nfunction getDefinitions(fields) {\\n\\tvar gr = new GlideAggregate('metric_definition');\\n\\tgr.addActiveQuery();\\n\\tvar tables = GlideDBObjectManager.getTables(current.getTableName());\\n\\tgr.addQuery('table', tables);\\n\\tgr.addQuery('field', fields);\\n\\tgr.groupBy('field');\\n\\tgr.query();\\n\\treturn gr;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"metrics events\"\n}```"}
{"prompt":"{\"prompt\":\"Restrict edit if the item is checked out\",\"table\":\"sc_cat_item_user_criteria_mtom\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_cat_item_user_criteria_mtom\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Restrict edit if the item is checked out\"\n}```"}
{"prompt":"{\"prompt\":\"Rollback Clone\",\"table\":\"clone_instance\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"clone_instance\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tnew CloneAPI().rollbackClone(current);\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"stateCHANGESTORollback Requested^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Rollback Clone\"\n}```"}
{"prompt":"{\"prompt\":\"Insert Order\",\"table\":\"sys_ux_my_list\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ux_my_list\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar gr = new GlideRecord('sys_ux_my_list');\\n\\tgr.addEncodedQuery('sys_created_by=javascript:gs.getUserName()^active=true^ORDERBYDESCorder');\\n\\tgr.query();\\n\\t\\n\\tif (gr.next()) {\\n\\t\\tcurrent.order = parseInt(gr.getValue('order'), 10) + 10;\\n\\t} \\n\\telse {\\n\\t\\tcurrent.order = 10;\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Insert Order\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent setting past date and time\",\"table\":\"sn_hr_core_reminder\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"false\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_reminder\",\n\t\"advanced\": \"false\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"date_time<javascript:gs.beginningOfCurrentMinute()^reminder=not_sent^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent setting past date and time\"\n}```"}
{"prompt":"{\"prompt\":\"Queue event if history limit decreases\",\"table\":\"pwd_cred_store_param\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pwd_cred_store_param\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar curValue = parseInt(current.value);\\n\\tvar prevValue = parseInt(previous.value);\\n\\t\\n\\t// Add your code here\\n\\tif (curValue < prevValue)\\n\\t\\tgs.eventQueue(\\\"pwd.credStore.history.limit.decrease\\\", current, prevValue, curValue);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"cred_store.type=e611433fbf020100710071a7bf073921^name=password_history_limit^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Queue event if history limit decreases\"\n}```"}
{"prompt":"{\"prompt\":\"Clear Closed field on state change\",\"table\":\"sn_hr_core_case\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_case\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tcurrent.closed_at = '';\\n\\tcurrent.closed_by = '';\\n\\tcurrent.close_notes = '';\\n\\tcurrent.work_notes = gs.getMessage(\\\"Case reopened by {0}\\\", gs.getUserDisplayName()); \\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"activeCHANGESTOtrue^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear Closed field on state change\"\n}```"}
{"prompt":"{\"prompt\":\"Remove HR supervisors from watch list\",\"table\":\"sn_hr_core_case\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_case\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(current, previous) {\\n\\t //This function will be automatically called when this rule is processed.\\n\\t\\tvar user = '';\\n\\tvar currentList = current.watch_list;\\n\\t\\n\\tif (currentList) {\\n\\t// remove all members within group HR VIP Watchlist from watch list\\n\\t\\tvar groupMembers = new GlideRecord('sys_user_grmember');\\n\\n\\t\\tgroupMembers.addQuery('group.name', 'HR VIP Watchlist');\\n\\t\\tgroupMembers.query();\\n\\n\\t\\tif(groupMembers.hasNext())\\n\\t\\t\\tgs.addInfoMessage(gs.getMessage('Non-VIP employee. Members of the VIP watch list group have been removed from the watch list.'));\\n\\t\\t\\n\\t\\twhile(groupMembers.next()){\\n\\t\\t\\tuser = groupMembers.getValue('user');\\n\\t\\t\\tcurrentList = currentList.replace(user, '');\\t\\t \\n\\t\\t}\\t\\n\\t\\t\\n\\t\\tcurrent.watch_list = currentList;\\n\\t\\tcurrent.update();\\t\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"opened_for.vip=false^opened_forVALCHANGES^EQ\",\n\t\"condition\": \"new hr_Utils().hasVIPUser()\",\n\t\"name\": \"Remove HR supervisors from watch list\"\n}```"}
{"prompt":"{\"prompt\":\"Clear field based on applies to\",\"table\":\"catalog_dl_definition\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"catalog_dl_definition\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\tif (current.applies_to == 'item')\\n\\t\\tcurrent.setValue('variable_set', '');\\n\\telse if (current.applies_to == 'set')\\n\\t\\tcurrent.setValue('catalog_item', '');\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"applies_to!=^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear field based on applies to\"\n}```"}
{"prompt":"{\"prompt\":\"Check step environment\",\"table\":\"sys_atf_step_config\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_atf_step_config\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t// If the step environment is UI and the user is not maint\\n\\tif (current.step_env.changes() &&\\n\\t\\tcurrent.step_env == \\\"d2cb02e1870312009dccc9ded0e3ec7c\\\" &&\\n\\t\\t!gs.getUser().hasRole(\\\"maint\\\")) {\\n\\t\\tcurrent.step_env.setError(gs.getMessage(\\\"Only users with maint role can set the step environment to UI\\\"));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Check step environment\"\n}```"}
{"prompt":"{\"prompt\":\"RESTClient\",\"table\":\"ecc_queue\",\"when\":\"async\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_queue\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"scopeFunctionWrapper();\\nfunction scopeFunctionWrapper() {\\n\\t\\n\\tprocessEccOuputMessage();\\n\\t\\n\\tvar g_end_point,g_method,g_uname,g_password,g_authorization,g_req,g_resp,g_content,g_content_attachment_source_id,g_log_level, g_http_timeout, g_follow_redirect;\\n\\t\\n\\tvar g_message_params = {};\\n\\tvar g_message_headers = {};\\n\\tvar g_attachment_dest_metadata = {};\\n\\t// must initialize these as we're always putting them into transaction attributes\\n\\tvar g_log_source_table = '';\\n\\tvar g_log_source_record = '';\\n\\t\\n\\tfunction processEccOuputMessage() {\\n\\t\\tcurrent.state = \\\"processed\\\";\\n\\t\\tcurrent.processed = gs.nowDateTime();\\n\\t\\tcurrent.setWorkflow(false);\\n\\t\\tcurrent.update();\\n\\t\\tparseOutputMessage();\\n\\t\\ttry {\\n\\t\\t\\tprepareHTTPReq();\\n\\t\\t} catch (ex) {\\n\\t\\t\\tprocessException('Error constructing http request: ' + ex.getMessage());\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t\\n\\t\\ttry {\\n\\t\\t\\tg_resp = g_req.execute();\\n\\t\\t\\tprocessResponse();\\n\\t\\t} catch (ex) {\\n\\t\\t\\tprocessException('Error invoking http request: ' + ex.getMessage());\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t}\\n\\t\\n\\tfunction parseOutputMessage() {\\n\\t\\tg_end_point = current.source; // default to current.source, but could override below\\n\\t\\tg_method = current.name;\\n\\t\\t\\n\\t\\tvar xmlPayload = new GlideXMLDocument();\\n\\t\\txmlPayload.parse(current.payload);\\n\\t\\t\\n\\t\\tvar messageParamsNode = xmlPayload.selectSingleNode('//parameter[@name=\\\\'message_parameters\\\\']/@value');\\n\\t\\tif(JSUtil.notNil(messageParamsNode))\\n\\t\\t\\textractParams(messageParamsNode.nodeValue);\\n\\t\\t\\n\\t\\tvar messageHeadersNode = xmlPayload.selectSingleNode('//parameter[@name=\\\\'message_headers\\\\']/@value');\\n\\t\\tif(JSUtil.notNil(messageHeadersNode))\\n\\t\\t\\textractHeaders(messageHeadersNode.nodeValue);\\n\\t\\t\\n\\t\\tvar attachDestMetadataNode = xmlPayload.selectSingleNode('//parameter[@name=\\\\'message_attachment_dest\\\\']/@value');\\n\\t\\tif(JSUtil.notNil(attachDestMetadataNode))\\n\\t\\t\\textractAttachmentDestMetadata(attachDestMetadataNode.nodeValue);\\n\\t\\t\\n\\t\\tvar contentNode = xmlPayload.selectSingleNode('//parameter[@name=\\\\'content\\\\']/@value');\\n\\t\\tif(JSUtil.notNil(contentNode))\\n\\t\\t\\tg_content = contentNode.nodeValue;\\n\\t\\t\\n\\t\\tvar contentAttachSrcIdNode = xmlPayload.selectSingleNode('//parameter[@name=\\\\'content_attachment_source_id\\\\']/@value');\\n\\t\\tif(JSUtil.notNil(contentAttachSrcIdNode))\\n\\t\\t\\tg_content_attachment_source_id = contentAttachSrcIdNode.nodeValue;\\n\\t\\t\\n\\t\\tvar sourceNode = xmlPayload.selectSingleNode('//parameter[@name=\\\\'source\\\\']/@value');\\n\\t\\tif(JSUtil.notNil(sourceNode))\\n\\t\\t\\tg_end_point = sourceNode.nodeValue;\\n\\t\\t\\n\\t\\tvar restUserNode = xmlPayload.selectSingleNode('//parameter[@name=\\\\'rest_user\\\\']/@value');\\n\\t\\tif(JSUtil.notNil(restUserNode))\\n\\t\\t\\tg_uname =\\trestUserNode.nodeValue;\\n\\t\\t\\n\\t\\tvar restPasswordNode = xmlPayload.selectSingleNode('//parameter[@name=\\\\'rest_password\\\\']/@value');\\n\\t\\tif(JSUtil.notNil(restPasswordNode))\\n\\t\\t\\tg_password = restPasswordNode.nodeValue;\\n\\t\\t\\n\\tvar authorizationNode = xmlPayload.selectSingleNode('//parameter[@name=\\\\'Authorization\\\\']/@value');\\n\\tif(JSUtil.notNil(authorizationNode))\\n\\t\\tg_authorization =\\tauthorizationNode.nodeValue;\\t\\n\\t\\n\\t\\tvar e = new GlideEncrypter();\\n\\t\\tg_password = e.decrypt(g_password);\\n\\t\\t\\n\\t\\tvar logLevelNode = xmlPayload.selectSingleNode('//parameter[@name=\\\\'log_level\\\\']/@value');\\n\\t\\tif(JSUtil.notNil(logLevelNode))\\n\\t\\t\\tg_log_level = logLevelNode.nodeValue;\\n\\n\\t\\tvar logLevelSourceTable = xmlPayload.selectSingleNode('//parameter[@name=\\\\'source_table\\\\']/@value');\\n\\t\\tif(JSUtil.notNil(logLevelSourceTable))\\n\\t\\t\\tg_log_source_table = logLevelSourceTable.nodeValue;\\n\\n\\t\\tvar logLevelSourceRecord = xmlPayload.selectSingleNode('//parameter[@name=\\\\'source_record\\\\']/@value');\\n\\t\\tif(JSUtil.notNil(logLevelSourceRecord))\\n\\t\\t\\tg_log_source_record = logLevelSourceRecord.nodeValue;\\n\\t\\t\\n\\t\\tvar httpTimeout = xmlPayload.selectSingleNode('//parameter[@name=\\\\'http_timeout\\\\']/@value');\\n\\t\\tif(JSUtil.notNil(httpTimeout))\\n\\t\\t\\tg_http_timeout = httpTimeout.nodeValue;\\n\\t\\t\\n\\t\\tvar followRedirect = xmlPayload.selectSingleNode('//parameter[@name=\\\\'follow_redirect\\\\']/@value');\\n\\t\\tif(JSUtil.notNil(followRedirect))\\n\\t\\t\\tg_follow_redirect = \\\"false\\\" != followRedirect.nodeValue.toLowerCase();\\n\\t\\t\\t\\n\\t}\\n\\t\\n\\tfunction prepareHTTPReq() {\\n\\t\\tg_req = new sn_ws.RESTMessageV2();\\n\\t\\tg_req.setEndpoint(g_end_point);\\n\\t\\t\\n\\t\\tif(JSUtil.notNil(g_log_level))\\n\\t\\t\\t\\t g_req.setLogLevel(g_log_level);\\n\\t\\n\\tif(JSUtil.notNil(g_authorization))\\n\\t\\tg_req.addHeader('Authorization', g_authorization);\\n\\telse if(JSUtil.notNil(g_uname) && JSUtil.notNil(g_password))\\n\\t\\t\\tg_req.setBasicAuth(g_uname,g_password);\\n\\t\\t\\n\\t\\tfor(var hdrkey in g_message_headers) {\\n\\t\\t\\tg_req.setRequestHeader(hdrkey, g_message_headers[hdrkey]);\\n\\t\\t}\\n\\t\\t\\n\\t\\tfor(var prmkey in g_message_params) {\\n\\t\\t\\tvar queryValue =\\tg_message_params[prmkey]; //make js string\\n\\t\\t\\tvar decodedQueryValue = new Packages.java.net.URLDecoder.decode(queryValue); // since these are encoded by RESTMessageClient before creating ecc record\\n\\t\\t\\tg_req.setQueryParameter(prmkey, decodedQueryValue);\\n\\t\\t}\\n\\t\\t\\n\\t\\tg_req.setHttpMethod(g_method);\\n\\t\\tif(g_method == 'post' || g_method == 'put' || g_method == 'patch') {\\n\\t\\t\\tif(JSUtil.notNil(g_content))\\n\\t\\t\\t\\tg_req.setRequestBody(g_content);\\n\\t\\t\\telse\\n\\t\\t\\t\\tg_req.setRequestBodyFromAttachment(g_content_attachment_source_id);\\n\\t\\t}\\n\\t\\t\\n\\t\\tif (JSUtil.notNil(g_attachment_dest_metadata.table_name)) {\\n\\t\\t\\tg_req.saveResponseBodyAsAttachment(g_attachment_dest_metadata.table_name,\\n\\t\\t\\tg_attachment_dest_metadata.record_sysid,\\n\\t\\t\\tg_attachment_dest_metadata.file_name,\\n\\t\\t\\tg_attachment_dest_metadata.encrypt_context_sysid);\\n\\t\\t}\\n\\n\\t\\t// add these so logging code can use them\\n\\t\\tvar gt = GlideTransaction.get();\\n\\t\\tif (JSUtil.notNil(gt)) {\\n\\t\\t\\tgt.setAttribute('http_log_source_table', g_log_source_table);\\n\\t\\t\\tgt.setAttribute('http_log_source_record', g_log_source_record);\\n\\t\\t}\\n\\n\\t\\t// Http Timeout\\n\\t\\tif (JSUtil.notNil(g_http_timeout)) {\\n\\t\\t\\tg_req.setHttpTimeout(g_http_timeout);\\n\\t\\t}\\n\\t\\t// follow redirects\\n\\t\\tif (JSUtil.notNil(g_follow_redirect)) {\\n\\t\\t\\tg_req.setFollowRedirect(g_follow_redirect);\\n\\t\\t}\\n\\t\\t\\n\\t}\\n\\t\\n\\tfunction getECCRecord(){\\n\\t\\tvar inputGr = new GlideRecord(\\\"ecc_queue\\\");\\n\\t\\tinputGr.initialize();\\n\\t\\tinputGr.topic = current.topic;\\n\\t\\tinputGr.name = current.name;\\n\\t\\tinputGr.source = current.source;\\n\\t\\tinputGr.queue = \\\"input\\\";\\n\\t\\tinputGr.agent = \\\"RESTClient\\\";\\n\\t\\tinputGr.response_to = current.sys_id;\\n\\t\\treturn inputGr;\\n\\t}\\n\\t\\n\\tfunction processResponse() {\\n\\t\\tvar c = new HttpResponseEccPayloadConverter();\\n\\t\\t\\n\\t\\t// if we saved the response to an attachment, then save the response attachment sysid\\n\\t\\tif (JSUtil.notNil(g_attachment_dest_metadata.table_name))\\n\\t\\t\\tc.setResponseAttachmentSysid(g_resp.getResponseAttachmentSysid());\\n\\t\\telse\\n\\t\\t\\tc.setBody(g_resp.getBody());\\n\\t\\t\\n\\t\\tc.setStatus(g_resp.getStatusCode());\\n\\t\\tc.setHttpHeaders(g_resp.getHeaders());\\n\\t\\t\\n\\t\\tif(JSUtil.notNil(g_resp.getErrorMessage())) {\\n\\t\\t\\tc.setErrorMsg(g_resp.getErrorMessage());\\n\\t\\t}\\n\\n\\t\\tinsertInputMessage(c);\\n\\t}\\n\\t\\n\\tfunction processException(exceptionMsg){\\n\\t\\tvar c = new HttpResponseEccPayloadConverter();\\n\\t\\tc.setStatus(500);\\n\\t\\tif(JSUtil.notNil(exceptionMsg)) {\\n\\t\\t\\tc.setErrorMsg(exceptionMsg);\\n\\t\\t}\\n\\t\\tinsertInputMessage(c);\\n\\t}\\n\\t\\n\\tfunction insertInputMessage(eccPayloadConverter){\\n\\t\\tvar inputGr = getECCRecord();\\n\\t\\t\\n\\t\\tinputGr.payload = eccPayloadConverter.getPayload();\\n\\t\\tvar statusCode = eccPayloadConverter.params.http_status_code;\\n\\t\\tif(statusCode >= 400) {\\n\\t\\t\\tinputGr.state = \\\"error\\\";\\n\\t\\t} else {\\n\\t\\t\\tinputGr.state = \\\"ready\\\";\\n\\t\\t}\\n\\t\\t\\n\\t\\tinputGr.insert();\\n\\t}\\n\\t\\n\\tfunction extractParams(messageParams){\\n\\t\\tvar fieldsDoc = new GlideXMLDocument();\\n\\t\\tfieldsDoc.parse(messageParams);\\n\\t\\tvar fieldNodes =\\tfieldsDoc.selectNodes('//field');\\n\\t\\t\\n\\t\\tg_message_params = {};\\n\\t\\tfor(var idx = 0;idx<fieldNodes.length;idx++) {\\n\\t\\t\\tvar fieldNode = fieldNodes.item(idx);\\n\\t\\t\\tg_message_params[fieldNode.getAttribute('name')] = fieldNode.getAttribute('value');\\n\\t\\t}\\n\\t}\\n\\t\\n\\tfunction extractHeaders(messageHeaders){\\n\\t\\tvar fieldsDoc = new GlideXMLDocument();\\n\\t\\tfieldsDoc.parse(messageHeaders);\\n\\t\\tvar fieldNodes =\\tfieldsDoc.selectNodes('//field');\\n\\t\\t\\n\\t\\tg_message_headers = {};\\n\\t\\tfor(var idx = 0;idx<fieldNodes.length;idx++) {\\n\\t\\t\\tvar fieldNode = fieldNodes.item(idx);\\n\\t\\t\\tg_message_headers[fieldNode.getAttribute('name')] = fieldNode.getAttribute('value');\\n\\t\\t}\\n\\t}\\n\\t\\n\\tfunction extractAttachmentDestMetadata(attachDestMetadata) {\\n\\t\\tvar fieldsDoc = new GlideXMLDocument();\\n\\t\\tfieldsDoc.parse(attachDestMetadata);\\n\\t\\t\\n\\t\\tvar tableNameNode =\\tfieldsDoc.selectSingleNode(\\\"//field[@name='table_name']/@value\\\");\\n\\t\\tvar recordSysidNode =\\tfieldsDoc.selectSingleNode(\\\"//field[@name='record_sysid']/@value\\\");\\n\\t\\tvar fileNameNode =\\tfieldsDoc.selectSingleNode(\\\"//field[@name='file_name']/@value\\\");\\n\\t\\tvar encryptCtxSysidNode =\\tfieldsDoc.selectSingleNode(\\\"//field[@name='encrypt_context_sysid']/@value\\\");\\n\\t\\t\\n\\t\\tg_attachment_dest_metadata = {\\n\\t\\t\\ttable_name: tableNameNode.nodeValue,\\n\\t\\t\\trecord_sysid: recordSysidNode.nodeValue,\\n\\t\\t\\tfile_name: fileNameNode.nodeValue,\\n\\t\\t\\tencrypt_context_sysid: encryptCtxSysidNode.nodeValue\\n\\t\\t};\\n\\t}\\n\\t\\n}\\n\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.state == \\\"ready\\\" && current.queue == \\\"output\\\" && current.agent == \\\"RESTClient\\\"\",\n\t\"name\": \"RESTClient\"\n}```"}
{"prompt":"{\"prompt\":\"Update Current Panel\",\"table\":\"expert_instance\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"expert_instance\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var d = GlideXMLUtil.parse(current.state);\\r\\nvar e = GlideXMLUtil.getElementByTagName(d, \\\"current_panel\\\");\\r\\nif (e != null)\\r\\n\\tcurrent.current_panel = e.getAttribute(\\\"id\\\");\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update Current Panel\"\n}```"}
{"prompt":"{\"prompt\":\"Set widget type in sratchpad\",\"table\":\"pa_widget_indicators\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_widget_indicators\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\t// Set widget type to show/hide elements filter tab\\n\\t\\tg_scratchpad.widget_type = current.widget.type;\\n\\n\\t\\t// show localised message in elements filter tab\\n\\t\\tg_scratchpad.info_message_widget_indicator = gs.getMessage('The Elements filter applies personalization to the first breakdown of indicators that support the aggregate view. For other indicators, select a filter that returns only one element.');\\n\\t\\tg_scratchpad.warning_message_widget_indicator = gs.getMessage('The selected indicator does not support the aggregate view. Select an Elements filter that returns only one element.');\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set widget type in sratchpad\"\n}```"}
{"prompt":"{\"prompt\":\"Set subscription enforcement on update\",\"table\":\"sys_package\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_package\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set subscription enforcement on update\"\n}```"}
{"prompt":"{\"prompt\":\"Sync Record Producer table name\",\"table\":\"item_option_new\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"item_option_new\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onBefore(current, previous) {\\n\\t //This function will be automatically called when this rule is processed.\\n\\t current.setValue('record_producer_table', getRecordProducerParent());\\n}\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.cat_item.changes()\",\n\t\"name\": \"Sync Record Producer table name\"\n}```"}
{"prompt":"{\"prompt\":\"Remove Entity Mappings on Update\",\"table\":\"sys_nlu_utterance\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_nlu_utterance\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar prevUtterance = NLUStudioTrainer.deserialiseUtterance(previous.getValue('utterance'));\\n\\t\\tvar newUtterance = NLUStudioTrainer.deserialiseUtterance(current.getValue('utterance'));\\n\\t\\tif (prevUtterance !== newUtterance) {\\n\\t\\t\\t\\tvar gr = new GlideRecord('m2m_sys_nlu_utterance_entity');\\n\\t\\t\\t\\tgr.addQuery('utterance', previous.getValue('sys_id'));\\n\\t\\t\\t\\tgr.deleteMultiple();\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"utteranceVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Remove Entity Mappings on Update\"\n}```"}
{"prompt":"{\"prompt\":\"Disable wish list feature on cart layout\",\"table\":\"sys_properties\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar catalogGr = new GlideRecordSecure('sc_catalog');\\n\\tcatalogGr.addActiveQuery();\\n\\tcatalogGr.addQuery('enable_wish_list', true);\\n\\tcatalogGr.query();\\n\\tcatalogGr.setValue('enable_wish_list', false);\\n\\tcatalogGr.updateMultiple();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=glide.sc.use_cart_layouts^valueCHANGESTOfalse^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Disable wish list feature on cart layout\"\n}```"}
{"prompt":"{\"prompt\":\"Set HTTP method on display\",\"table\":\"sys_rest_message_fn\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_rest_message_fn\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// http method can be null, if we upgrade from a previous release or with executing existing bussiness rule\\n\\t\\t// which does not set http method. In those cases if function name is a valid http method we use it\\n\\t// if the function name is invalid some random option shown in UI.\\n\\t\\tif ((!current.isValidField('http_method') || current.http_method.nil()) && \\n\\t\\t\\t\\t\\t !current.function_name.nil()){\\n\\t\\tvar fName = current.function_name;\\n\\t\\tif (fName == 'put' || fName == 'get' || fName == 'delete' || fName == 'post')\\n\\t\\t\\t\\tcurrent.http_method = current.function_name;\\n\\t\\telse\\n\\t\\t\\t\\t\\t\\t//This means an existing record with invalid http method as function name.\\n\\t\\t\\tgs.addErrorMessage(\\\"Invalid record. If HTTP method is not present, Name should be an HTTP method.\\\");\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set HTTP method on display\"\n}```"}
{"prompt":"{\"prompt\":\"Update Version\",\"table\":\"bsm_chart\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"bsm_chart\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"checkExist();\\n\\nfunction checkExist(){\\n\\t// Make sure the updated version does not exist.\\n\\tvar gr = new GlideRecord('bsm_chart');\\n\\tgr.addQuery('ci', current.ci);\\n\\tgr.addQuery('user', current.user);\\n\\tgr.addQuery('sys_id', '!=', current.sys_id);\\n\\tgr.addQuery('version', current.version);\\n\\t\\n\\tgr.query();\\n\\tif (gr.next()){\\n\\t\\tgs.addInfoMessage('A saved view with the same version already exists');\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn;\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update Version\"\n}```"}
{"prompt":"{\"prompt\":\"on_launch_of_guidance\",\"table\":\"help_user_interaction\",\"when\":\"async_always\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"help_user_interaction\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async_always\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\n\\t\\tvar data = {\\n\\n\\t\\t\\t\\tsys_scope: current.guidance && current.guidance.sys_scope.getDisplayValue(),\\n\\t\\t\\t\\tsys_package: current.guidance && current.guidance.sys_package.getDisplayValue(),\\n\\t\\t\\t\\tsnc_created: current.guidance && current.guidance.snc_created,\\n\\t\\t\\t\\tstream_name: \\\"on_launch_of_guidance\\\"\\n\\n\\t\\t};\\n\\n\\n\\t\\tvar controller = new SNHelpSetupAnalyticsController();\\n\\t\\tcontroller.logData(controller.CATEGORY, controller.POINT, controller.SETUP_START_TASK_COMPLETION_EVENT, data);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"on_launch_of_guidance\"\n}```"}
{"prompt":"{\"prompt\":\"Populate deprecated field\",\"table\":\"sys_app_template_manifest\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_app_template_manifest\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tif (!gs.nil(current.table)) {\\n\\t\\tvar tableRecord = new GlideRecord('sys_db_object');\\n\\t\\ttableRecord.query('name', current.table);\\n\\t\\tif (tableRecord.next()) {\\n\\t\\t\\tcurrent.setValue('table_name', tableRecord.getUniqueValue());\\n\\t\\t}\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Populate deprecated field\"\n}```"}
{"prompt":"{\"prompt\":\"Deliver service info to client\",\"table\":\"sys_ws_definition\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_ws_definition\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onDisplay(current, g_scratchpad) {\\n\\tg_scratchpad.namespace = current.namespace;\\n\\tg_scratchpad.service_name = current.name;\\n\\tg_scratchpad.service_id = current.service_id;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Deliver service info to client\"\n}```"}
{"prompt":"{\"prompt\":\"Clear SLA Breakdown definitions cache\",\"table\":\"sla_breakdown_definition_field\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sla_breakdown_definition_field\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tglobal.SLACacheManager.flushBreakdownDefinitions();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear SLA Breakdown definitions cache\"\n}```"}
{"prompt":"{\"prompt\":\"Show message for re-generating profiles\",\"table\":\"sn_employee_definition\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_employee_definition\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tgs.addInfoMessage(gs.getMessage(\\\"You should regenerate the employee profiles as per the updated definition. Please click Generate Employee Profiles\\\"));\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"active=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Show message for re-generating profiles\"\n}```"}
{"prompt":"{\"prompt\":\"Notify on actions\",\"table\":\"sys_remote_update_set\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_remote_update_set\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tg_scratchpad.remote_base_update_set = current.remote_base_update_set.sys_id;\\n\\tg_scratchpad.remote_base_update_set_name = current.remote_base_update_set.name;\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"state=in_hierarchy^ORstate=previewed_in_hierarchy^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Notify on actions\"\n}```"}
{"prompt":"{\"prompt\":\"Parent service catalog phase check\",\"table\":\"service_offering\",\"when\":\"before\",\"actions\":\"ud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"service_offering\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"150\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (current.parent.changes() || current.operation() == 'delete') {\\n\\t\\tvar service_offering = new GlideAggregate('service_offering');\\n\\t\\tservice_offering.addQuery('parent', previous.parent);\\n\\t\\tservice_offering.addAggregate('COUNT');\\n\\t\\tservice_offering.query(); \\n\\t\\tif (service_offering.next()) {\\n\\t\\t\\tif (service_offering.getAggregate('COUNT') == 1) {\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('Unable to perform this operation because the parent service {0} is in catalog phase and must have atleast one child offering.', [previous.parent.getDisplayValue()]));\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"(new global.SPMUtilsFactory().getUtils().isValidService(previous.parent.sys_class_name)) && previous.parent.portfolio_status == 'catalog' && (new global.SPMUtilsFactory().getUtils().isServicePublished(previous.parent))\",\n\t\"name\": \"Parent service catalog phase check\"\n}```"}
{"prompt":"{\"prompt\":\"Add Current User if None Set\",\"table\":\"sys_notif_subscription\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_notif_subscription\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Add your code here\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"userISEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Add Current User if None Set\"\n}```"}
{"prompt":"{\"prompt\":\"SD currency format validation\",\"table\":\"pa_units\",\"when\":\"before\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_units\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar gr = new GlideRecord('sys_properties');\\n\\t\\tgr.addQuery('name', 'sn_sd.success_dashboard_currency');\\n\\t\\tgr.query();\\n\\t\\tif (gr.next()) {\\n\\t\\t\\t\\tvar currencygr = new GlideRecord('fx_currency');\\n\\t\\t\\t\\tcurrencygr.addQuery('active', true);\\n\\t\\t\\t\\tcurrencygr.addQuery('code', gr.value);\\n\\t\\t\\t\\tcurrencygr.query();\\n\\t\\t\\t\\tif (currencygr.next()) {\\n\\t\\t\\t\\t\\t\\tvar format = current.format.toString();\\n\\t\\t\\t\\t\\t\\tformat = format.replace(/\\\\s+/g, \\\"\\\");\\n\\t\\t\\t\\t\\t\\tvar validFormat = [];\\n\\t\\t\\t\\t\\t\\tvalidFormat.push((currencygr.symbol + '{0}').toString());\\n\\t\\t\\t\\t\\t\\tvalidFormat.push(('{0}' + currencygr.symbol).toString());\\n\\t\\t\\t\\t\\t\\tif (validFormat.indexOf(format.toString()) == -1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage(\\\"The format is not valid.\\\"));\\n\\t\\t\\t\\t\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"sys_id=78c02d73533301101d87ddeeff7b128e^formatVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"SD currency format validation\"\n}```"}
{"prompt":"{\"prompt\":\"Create Vendor Prefix\",\"table\":\"sys_db_view\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_db_view\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/*\\n * the vendor prefix is fetched from java code and stored\\n * in the scratch pad so that it is available other scripts\\n * such as the client script, \\\"Normalize Table Name\\\".\\n */\\ng_scratchpad.vendorPrefix = SNC.Apps.getDatabasePrefixForUser();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"gs.isInteractive()\",\n\t\"name\": \"Create Vendor Prefix\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Partial Match Rule \",\"table\":\"ts_index_name\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ts_index_name\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\t\\tif (!new GlideTSUtil().isPartialMatchRuleValid(current.partial_match_rule)) {\\n\\t\\t\\t\\tcurrent.partial_match_rule.setError('Invalid Partial Match Rule');\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!gs.nil(current. partial_match_rule)\",\n\t\"name\": \"Validate Partial Match Rule \"\n}```"}
{"prompt":"{\"prompt\":\"One like allowed per comment\",\"table\":\"m2m_kb_feedback_likes\",\"when\":\"before\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"m2m_kb_feedback_likes\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tvar gr = new GlideRecord(\\\"m2m_kb_feedback_likes\\\");\\n\\tgr.addQuery(\\\"comment\\\",current.comment);\\n\\tgr.addQuery(\\\"user\\\",current.user);\\n\\tgr.query();\\n\\tif(gr.hasNext())\\n\\t\\tcurrent.setAbortAction(true);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"One like allowed per comment\"\n}```"}
{"prompt":"{\"prompt\":\"Update Semaphore Set\",\"table\":\"sys_node_type\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_node_type\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar cs = new GlideRecord(\\\"sys_cluster_state\\\");\\n\\t\\tcs.addQuery(\\\"node_type\\\", current.sys_id);\\n\\t\\tcs.query();\\n\\t\\n\\t//Offset the messages on each node by a random time up to 1 minute\\n\\tvar offset;\\n\\twhile (cs.next()){\\n\\t\\t\\toffset = getRandomTime();\\n\\t\\tGlideClusterMessage.postDirected(\\\"script\\\", \\\"GlideSysSemaphore.setSemaphoreSetId();\\\", cs.getValue(\\\"system_id\\\"));\\n\\t\\t//Run these a bit after because they depend on having a correctly set semaphore set ID\\n\\t\\tGlideClusterMessage.postDirectedDelayed(\\\"script\\\", \\\"GlideSysSemaphore.get().reload();\\\", cs.getValue(\\\"system_id\\\"), 3000 + offset);\\n\\t\\tGlideClusterMessage.postDirectedDelayed(\\\"script\\\", \\\"GlideScheduler.restart();\\\", cs.getValue(\\\"system_id\\\"), 3000 + offset);\\n\\t}\\n\\n\\t//Get a random time from 0 to 1 minute\\n\\tfunction getRandomTime() {\\n\\t\\t\\t\\tvar min = 0;\\n\\t\\t\\t\\tvar max = 60000;\\n\\t\\t\\t\\treturn Math.floor(Math.random() * (max - min + 1)) + min;\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.semaphore_set_id.changes() \",\n\t\"name\": \"Update Semaphore Set\"\n}```"}
{"prompt":"{\"prompt\":\"Deprecated Manual CI Exclusion Inclusion\",\"table\":\"sys_properties\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tcurrent.setAbortAction(true);\\n\\tgs.addErrorMessage(gs.getMessage('Configuration of manual CI class exclusions / inclusions from sys_properties is deprecated. Please use the following table: {0}', '<a href=\\\"/svc_manual_ci_exclusions_inclusions_list.do\\\" target=\\\"_blank\\\">svc_manual_ci_exclusions_inclusions</a>'));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=sa.mapping.user.manual.citype.blacklist^ORname=sa.mapping.system.manual.citype.blacklist^ORname=sa.mapping.user.manual.citype.whitelist^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Deprecated Manual CI Exclusion Inclusion\"\n}```"}
{"prompt":"{\"prompt\":\"Delete Feature Set Record\",\"table\":\"cmdb_dynamic_ire_match\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_dynamic_ire_match\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\t\\tvar gr = new GlideRecord('cmdb_dynamic_ire_feature_set');\\n\\t\\tif (gr.get(current.feature_record))\\n\\t\\t\\t\\tgr.deleteRecord();\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete Feature Set Record\"\n}```"}
{"prompt":"{\"prompt\":\"Refresh dot-walk AIS Index cache\",\"table\":\"ais_datasource_field_attribute\",\"when\":\"after\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ais_datasource_field_attribute\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tGlideCacheManager.flush('cascade_update_table_name_to_fields_simple_cache_key');\\n\\t\\tGlideCacheManager.flush('cascade_update_table_name_to_fields_descriptor_cache_key');\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.attribute == \\\"2d45349173101010170b56b80ff6a7c8\\\"\",\n\t\"name\": \"Refresh dot-walk AIS Index cache\"\n}```"}
{"prompt":"{\"prompt\":\"Create BS::Entry point Depends On rel\",\"table\":\"sa_m2m_service_entry_point\",\"when\":\"after\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sa_m2m_service_entry_point\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\t\\n\\t// Add a \\\"Depends On\\\" relation from BS to entry point, when a new entry point is inserted.\\t\\n\\tvar smru = new ServiceMappingRelationUtil();\\n\\tsmru.createBs2EntryPointRel(current.getValue('cmdb_ci_service'), current.getValue('cmdb_ci_endpoint'));\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"cmdb_ci_endpoint.sys_class_name!=cmdb_ci_endpoint_manual^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Create BS::Entry point Depends On rel\"\n}```"}
{"prompt":"{\"prompt\":\"Notice on hidden back out\",\"table\":\"sys_sync_history\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sync_history\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif (SNC.UpdateMutex.isAvailable())\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"The Back Out button is not available because the system is currently upgrading. <a href=\\\\\\\"$upgrade_client.do\\\\\\\">Click here</a> for the Upgrade Monitor\\\"));\\n\\telse {\\n\\t\\t//Notify on the current running mutex operation\\n\\t\\tvar currMsg = SNC.UpdateMutex.getCurrentMutexMessage();\\n\\t\\tgs.addInfoMessage(gs.getMessage(\\\"The Back Out button is unavailable because another operation is running: {0}\\\", [currMsg]));\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"new TeamDevBackoutVisible().shouldInformMissing(current)\",\n\t\"name\": \"Notice on hidden back out\"\n}```"}
{"prompt":"{\"prompt\":\"mark closed\",\"table\":\"task\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"800\",\n\t\"add_message\": \"false\",\n\t\"script\": \"current.active = false;\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"new TaskStateUtil(current).runMarkClosed()\",\n\t\"name\": \"mark closed\"\n}```"}
{"prompt":"{\"prompt\":\"Check if problem task can be created\",\"table\":\"problem_task\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"problem_task\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tif(typeof bypassCanCreatePTaskCheck !== 'undefined' && bypassCanCreatePTaskCheck) {\\n\\t\\tgs.debug(\\\"current PTASK\\\" + current.number + \\\"Returning from BR \\\\\\\"Check if problem task can be created\\\\\\\" without executing as bypassCanCreatePTaskCheck is defined and true\\\");\\n\\t\\treturn;\\n\\t}\\n\\tif (!(new ProblemTaskStateUtilsSNC().canCreateProblemTask(current.problem))) {\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"Problem Task cannot be associated to a closed Problem\\\"));\\n\\t\\tcurrent.problem = '';\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"problemVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Check if problem task can be created\"\n}```"}
{"prompt":"{\"prompt\":\"Check Intent confidence threshold value\",\"table\":\"sys_nlu_intent\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_nlu_intent\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/ ) {\\n\\n\\t\\tif (current.confidence_threshold < 0 || current.confidence_threshold > 1) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('Intent Confidence Threshold should be 0-1'));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Check Intent confidence threshold value\"\n}```"}
{"prompt":"{\"prompt\":\"Schedule Instance Clone\",\"table\":\"clone_instance\",\"when\":\"async\",\"actions\":\"c\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"clone_instance\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var cloneId = current.sys_id;\\nnew CloneAPI().scheduleInstanceClone('clone_instance', cloneId);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"state=Requested^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Schedule Instance Clone\"\n}```"}
{"prompt":"{\"prompt\":\"Validate Excluded Fields\",\"table\":\"cmdb_identifier_entry\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cmdb_identifier_entry\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var table = current.table;\\nvar appliesTo = current.identifier.applies_to;\\nvar hybridAttributes = current.hybrid_entry_ci_criterion_attributes;\\nvar attributes = current.attributes;\\n\\n// if hybrid rule with > 0 hybrid attributes, append to attributes\\nif (table != appliesTo && hybridAttributes) {\\n\\tattributes = attributes + ',' + hybridAttributes;\\n}\\n\\nvar invalid = SNC.IdentificationEngineScriptableApi.validateExcludedFields(\\n\\tattributes,\\n\\tcurrent.identifier.independent);\\n\\nif (!invalid.isEmpty()) {\\n\\tvar invalidFields = invalid.toString();\\n\\tgs.addInfoMessage(gs.getMessage(\\\"Usage of {0} not allowed for identification rules!\\\", invalidFields));\\n\\tcurrent.setAbortAction(true);\\t\\n}\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"identifierISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate Excluded Fields\"\n}```"}
{"prompt":"{\"prompt\":\"Editor Role\",\"table\":\"catalog_category_request\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"catalog_category_request\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"editorRole = getRoleID(\\\"catalog_editor\\\");\\ntableRole = getRoleID(current.table_name + \\\"_user\\\");\\nsyncEditors();\\n\\nfunction syncEditors() {\\n\\tvar scur = new GlideRecord(\\\"service_category_user_role\\\");\\n\\tscur.addQuery(\\\"category\\\", current.sys_id);\\n\\tscur.query();\\n\\twhile (scur.next())\\n\\t\\tscur.deleteRecord();\\n\\t\\n\\tvar editorArr = current.editors.split(\\\",\\\");\\n\\t\\n\\tfor (var i = 0; i < editorArr.length; i++) {\\n\\t\\tif (editorArr[i] == \\\"\\\")\\n\\t\\t\\tcontinue;\\n\\t\\t\\n\\t\\taddRoleToUser(editorRole, editorArr[i]);\\n\\t\\taddRoleToUser(tableRole, editorArr[i]);\\n\\t}\\n}\\n\\nfunction addRoleToUser(role, user) {\\n\\tif (role == null)\\n\\t\\treturn;\\n\\t\\n\\tvar userRole = createUserRole(role, user);\\n\\tvar u = new GlideRecord(\\\"service_category_user_role\\\");\\n\\tu.user = user;\\n\\tu.category = current.sys_id;\\n\\tu.user_role = userRole;\\n\\tu.insert();\\n}\\n\\nfunction createUserRole(role, user) {\\n\\tvar userRole = new GlideRecord(\\\"sys_user_has_role\\\");\\n\\tuserRole.user = user;\\n\\tuserRole.role = role;\\n\\treturn userRole.insert();\\n}\\n\\nfunction getRoleID(role) {\\n\\tvar gr = new GlideRecord(\\\"sys_user_role\\\");\\n\\tif (!gr.get(\\\"name\\\", role))\\n\\t\\treturn null;\\n\\t\\n\\treturn gr.sys_id;\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.editors.changes()\",\n\t\"name\": \"Editor Role\"\n}```"}
{"prompt":"{\"prompt\":\"Update type for multi input script\",\"table\":\"sys_rte_eb_multi_in_script_operation\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_rte_eb_multi_in_script_operation\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tcurrent.type = \\\"a5584ee4739000102b6265a751ab9eae\\\";\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Update type for multi input script\"\n}```"}
{"prompt":"{\"prompt\":\"Create Workspace DA Mapping\",\"table\":\"link_generator_mapping\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"link_generator_mapping\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"150\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tcurrent.workspace_decorator = new linkGeneratorWorkspace().createWorkspaceDecoratorForLinkMapping(current);\\t\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"active=true^type=agent_workspace^EQ\",\n\t\"condition\": \"current.workspace_decorator.nil() || 'insert' == current.operation()\",\n\t\"name\": \"Create Workspace DA Mapping\"\n}```"}
{"prompt":"{\"prompt\":\"Read enable order now\",\"table\":\"sc_layout\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sc_layout\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tg_scratchpad.newOrderNowEnabled = gs.getProperty(\\\"glide.sc.enable_order_now\\\");\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Read enable order now\"\n}```"}
{"prompt":"{\"prompt\":\"Change template values on table change\",\"table\":\"sn_hr_core_pdf_template\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sn_hr_core_pdf_template\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule (current, previous /*null when async*/) {\\n\\tvar pdf_template_mapping = new GlideRecord('sn_hr_core_pdf_template_mapping');\\n\\tpdf_template_mapping.addQuery('document', current.sys_id);\\n\\tpdf_template_mapping.query();\\n\\t\\n\\twhile (pdf_template_mapping.next()) {\\n\\t\\tpdf_template_mapping.setValue('mapping_table', current.table);\\n\\t\\tpdf_template_mapping.setValue('mapping_field', '');\\n\\t\\tpdf_template_mapping.update();\\n\\t}\\n\\t\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"tableVALCHANGES^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Change template values on table change\"\n}```"}
{"prompt":"{\"prompt\":\"Event Management - Enable self monitor\",\"table\":\"sys_properties\",\"when\":\"async\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_properties\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"async\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tnew EvtMgmtHealthMapBuilder().createService();\\n\\tnew EvtMgmtHealthHandleMonitors().handleMonitors(\\\"insert\\\");\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"name=evt_mgmt.self_health_active^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Event Management - Enable self monitor\"\n}```"}
{"prompt":"{\"prompt\":\"Set \\\"Name\\\" field\",\"table\":\"cxs_ui_config_base\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"cxs_ui_config_base\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"if(current.getValue(\\\"ui_type\\\") === \\\"workspace\\\")\\n\\t\\t\\tcxs_App.getBusiness(current).setName(current.getValue(\\\"results_header_text\\\") + \\\" [\\\" + current.getValue(\\\"table\\\") + \\\"]\\\");\\n\\t\\t\\telse\\n\\t\\t\\tcxs_App.getBusiness(current).setName();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set \\\"Name\\\" field\"\n}```"}
{"prompt":"{\"prompt\":\"Delete Related Data\",\"table\":\"live_message\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"live_message\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"var lfFeed = new LiveFeedFeed();\\nlfFeed.deleteMessageLike(current.sys_id);\\n\\nvar favorite = new LiveFeedFavorite();\\nfavorite.deleteFavorites('live_message', current.sys_id);\\n\\nif(current.poll) {\\n\\tvar poll = new LiveFeedPoll();\\n\\tpoll.deletePoll(current.poll)\\n}\\n\\nvar mention = new GlideRecord('live_mention');\\nmention.addQuery('message', current.sys_id);\\nmention.query();\\nmention.deleteMultiple();\\n\\nvar live_tag = new GlideRecord('live_message_tag');\\nlive_tag.addQuery('message', current.sys_id);\\nlive_tag.query();\\nvar lfTag = new LiveFeedTag();\\nwhile(live_tag.next()) {\\n\\tlfTag.removeMessageTag(current.sys_id, live_tag.tag);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Delete Related Data\"\n}```"}
{"prompt":"{\"prompt\":\"Prevent deleting default change model\",\"table\":\"chg_model\",\"when\":\"before\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"chg_model\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"true\",\n\t\"script\": \"\",\n\t\"abort_action\": \"true\",\n\t\"filter_condition\": \"default_change_model=true^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Prevent deleting default change model\"\n}```"}
{"prompt":"{\"prompt\":\"Trigger text re-indexing\",\"table\":\"label\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"label\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(current, previous) {\\n\\t(new LabelIndexing()).onLabelChange(current, previous);\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.viewable_by.changes() || current.name.changes()\",\n\t\"name\": \"Trigger text re-indexing\"\n}```"}
{"prompt":"{\"prompt\":\"validate MID server capability\",\"table\":\"ecc_agent_cluster_member_m2m\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_agent_cluster_member_m2m\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/**\\r\\n * Service-now.com\\r\\n * \\r\\n * Description: The business rule validates the requirements for adding MID servers to a cluster.\\r\\n */\\r\\n\\r\\nvalidateMIDCapability();\\r\\n\\r\\nfunction validateMIDCapability() {\\r\\n\\t\\tvar gr = new GlideRecord(\\\"ecc_agent_capability_m2m\\\");\\r\\n\\t\\tgr.addQuery(\\\"agent\\\", current.agent);\\r\\n\\t\\tgr.query();\\r\\n\\t\\tif (gr.next())\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\tcurrent.setAbortAction(true);\\r\\n\\t\\tgs.addErrorMessage(gs.getMessage(\\\"MID Server {0} must have capabilities assigned\\\", current.agent.name));\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.agent.nil() && !current.cluster.nil()\",\n\t\"name\": \"validate MID server capability\"\n}```"}
{"prompt":"{\"prompt\":\"Get inScope table list for Data Policies\",\"table\":\"sys_data_policy_rule\",\"when\":\"before_display\",\"actions\":\"\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_data_policy_rule\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before_display\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"// fills array:\\tg_scratchpad.inScopeTableList\\nnew FetchAllowedScopedTables().fetchAllowedScopedTables();\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Get inScope table list for Data Policies\"\n}```"}
{"prompt":"{\"prompt\":\"Set table read only\",\"table\":\"sys_sg_view_element_attribute_name\",\"when\":\"before\",\"actions\":\"cud\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_sg_view_element_attribute_name\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\tgs.addInfoMessage(gs.getMessage(\\\"Table is read-only\\\"));\\n\\tcurrent.setAbortAction(true);\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Set table read only\"\n}```"}
{"prompt":"{\"prompt\":\"validate capability for MID clusters\",\"table\":\"ecc_agent_capability_m2m\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ecc_agent_capability_m2m\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"/**\\r\\n * Service-now.com\\r\\n *\\r\\n * Description: If the MID server is already part of a cluster, we need to check the following. \\r\\n * If the capability deleted is the last one of the MID server, then we need to pull the MID server \\r\\n * out of that cluster and warn the user.\\r\\n */\\r\\n\\r\\nvalidateCapabilityForCluster();\\r\\n\\r\\nfunction validateCapabilityForCluster() {\\r\\n\\t\\tif (!isAgentInClusters())\\r\\n\\t\\t\\t\\treturn;\\r\\n\\r\\n\\t\\tvar gr = new GlideRecord(\\\"ecc_agent_capability_m2m\\\"); \\r\\n\\t\\tgr.addQuery(\\\"agent\\\", current.agent);\\r\\n\\t\\tgr.query();\\r\\n\\t\\tif (gr.next()){\\r\\n\\t\\t\\t\\tvar agentMessage = getClustersByAgent(current.agent).join(\\\", \\\");\\r\\n\\t\\t\\t\\tgs.addInfoMessage(gs.getMesssage(\\\"If all capabilities are deleted, the MID server will be removed from the following clusters, {0}\\\", agentMessage));\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\t\\tvar agentMsg = getClustersByAgent(current.agent).join(\\\", \\\");\\r\\n\\t\\t\\t\\tvar grec = new GlideRecord(\\\"ecc_agent_cluster_member_m2m\\\");\\r\\n\\t\\t\\t\\tgrec.addQuery(\\\"agent\\\", current.agent);\\r\\n\\t\\t\\t\\tgrec.deleteMultiple();\\r\\n\\t\\t\\t gs.addInfoMessage(gs.getMessage(\\\"Removed MID server from the following clusters, {0} because there are no more capabilities associated with the MID server.\\\", agentMsg));\\n\\t\\t}\\r\\n}\\r\\n\\r\\nfunction isAgentInClusters() {\\r\\n\\t\\tvar gr = new GlideRecord(\\\"ecc_agent_cluster_member_m2m\\\");\\r\\n\\t\\tgr.addQuery(\\\"agent\\\", current.agent);\\r\\n\\t\\tgr.query();\\r\\n\\t\\tif (gr.next())\\r\\n\\t\\t\\t\\treturn true;\\r\\n\\r\\n\\t\\treturn false;\\r\\n}\\r\\n\\r\\nfunction getClustersByAgent(agent) {\\r\\n\\t\\tvar clusters = [];\\r\\n\\t\\tvar gr = new GlideRecord(\\\"ecc_agent_cluster_member_m2m\\\");\\r\\n\\t\\tgr.addQuery(\\\"agent\\\", agent);\\r\\n\\t\\tgr.query();\\r\\n\\t\\twhile (gr.next())\\r\\n\\t\\t\\t\\tclusters.push(gr.cluster.name+'');\\r\\n\\r\\n\\t\\treturn clusters;\\r\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!current.agent.nil()\",\n\t\"name\": \"validate capability for MID clusters\"\n}```"}
{"prompt":"{\"prompt\":\"Category - generate full name\",\"table\":\"kb_category\",\"when\":\"after\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"kb_category\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"function onAfter(current, previous) {\\n\\t\\tvar knowHelp = new SNC.KnowledgeHelper();\\n\\t\\tvar jsonStr = knowHelp.getNestedCategories(current.sys_id, \\\"label\\\");\\n\\n\\t\\t// Decode the json string to object\\n\\t\\tvar jsonResult = new JSON().decode(jsonStr);\\n\\n\\t\\tvar catArray = jsonResult.parentCategories.reverse();\\n\\n\\t\\tvar catString;\\n\\t\\tif (GlideI18NStyle.getDirection() == \\\"ltr\\\")\\n\\t\\t\\t\\tcatString = catArray.join(\\\" / \\\");\\n\\t\\telse\\n\\t\\t\\t\\tcatString = catArray.join(\\\" \\\\ \\\");\\n\\n\\t\\tcurrent.full_category.setDisplayValue(catString + \\\"\\\");\\n\\tcurrent.setWorkflow(false);\\n\\t\\tif (current.update()) {\\n\\t\\t\\t\\tknowHelp.setNestedCategories(current.sys_id, catString);\\n\\t\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"!previous || current.label.changes() || current.parent_id.changes()\",\n\t\"name\": \"Category - generate full name\"\n}```"}
{"prompt":"{\"prompt\":\"Clear Duplicate CI DuplicateOf field\",\"table\":\"duplicate_audit_result\",\"when\":\"after\",\"actions\":\"d\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"false\",\n\t\"action_delete\": \"true\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"duplicate_audit_result\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"clearDuplicateCIDuplicateOf();\\n \\nfunction clearDuplicateCIDuplicateOf()\\t{\\n\\n\\tif (current == null || current.duplicate_ci == null)\\n\\t\\treturn;\\n\\n\\tvar ci = new GlideRecord(\\\"cmdb_ci\\\");\\n\\tif (ci.get(current.duplicate_ci)) {\\n\\t\\tvar duplicate_of = ci.duplicate_of;\\n\\t\\tif (!duplicate_of.nil()) {\\n\\t\\t\\tci.duplicate_of = \\\"\\\";\\n\\t\\t\\tci.update();\\n\\t\\t}\\n\\t}\\n}\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Clear Duplicate CI DuplicateOf field\"\n}```"}
{"prompt":"{\"prompt\":\"Disable Secondary Model Intent \",\"table\":\"sys_nlu_intent\",\"when\":\"after\",\"actions\":\"u\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"false\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_nlu_intent\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"after\",\n\t\"order\": \"200\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\t\\n\\tvar gr = new GlideRecord(\\\"sys_nlu_intent\\\");\\n\\tgr.addQuery(\\\"primary_intent\\\", current.sys_id);\\n\\tgr.setValue(\\\"enable\\\", false);\\n\\tgr.updateMultiple();\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"primary_intentISEMPTY^enableCHANGESTOfalse^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Disable Secondary Model Intent \"\n}```"}
{"prompt":"{\"prompt\":\"Validate script field\",\"table\":\"pa_diagnostic\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"pa_diagnostic\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar res = new PADiagnosticsUtil().isScriptAllowed(current.script);\\n\\tif(!res){\\n\\t\\tgs.addErrorMessage(gs.getMessage('Unable to insert or update the diagnostic as the script modifies records'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"advanced=true^scriptISNOTEMPTY^EQ\",\n\t\"condition\": \"\",\n\t\"name\": \"Validate script field\"\n}```"}
{"prompt":"{\"prompt\":\"Duplicate Knowledge Category\",\"table\":\"kb_category\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"kb_category\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\tvar knowledgeCategory = new GlideRecord('kb_category');\\n\\tknowledgeCategory.addQuery('label', current.label);\\n\\tknowledgeCategory.addQuery('parent_id', current.parent_id);\\n\\tknowledgeCategory.query();\\n\\tknowledgeCategory.next();\\n\\tif(knowledgeCategory.getRowCount() > 0 && knowledgeCategory.sys_id != current.sys_id) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('The Category, {0}, already exists at this level. Please enter a unique category.', [current.label]));\\n\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t}\\n\\t})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"current.label.changes()\",\n\t\"name\": \"Duplicate Knowledge Category\"\n}```"}
{"prompt":"{\"prompt\":\"Ensure unique subnet\",\"table\":\"ip_address_subnet\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"ip_address_subnet\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"50\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous) {\\n\\n\\tvar match = new GlideRecord('ip_address_subnet');\\n\\tmatch.addQuery('sys_id', '!=', current.sys_id);\\n\\tmatch.addQuery('network_ip', current.network_ip);\\n\\tmatch.addQuery('netmask', current.netmask);\\n\\tmatch.addQuery('sys_domain', current.sys_domain);\\n\\tmatch.query();\\n\\tif (match.next()) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('Subnet already exists'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t}\\n\\n})(current, previous);\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Ensure unique subnet\"\n}```"}
{"prompt":"{\"prompt\":\"Ensure Value from Value Alias exists\",\"table\":\"sys_report_value_alias\",\"when\":\"before\",\"actions\":\"cu\",\"advanced\":\"true\"}","completion":" {\n\t\"action_insert\": \"true\",\n\t\"action_update\": \"true\",\n\t\"action_delete\": \"false\",\n\t\"action_query\": \"false\",\n\t\"collection\": \"sys_report_value_alias\",\n\t\"advanced\": \"true\",\n\t\"active\": \"true\",\n\t\"when\": \"before\",\n\t\"order\": \"100\",\n\t\"add_message\": \"false\",\n\t\"script\": \"(function executeRule(current, previous /*null when async*/) {\\n\\n\\t// Get the Field Alias that we belong to\\n\\tvar fieldAlias = new GlideRecord('sys_report_field_alias');\\n\\tif (! fieldAlias.isValid()) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('There is something wrong with the Field Alias table'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn;\\n\\t}\\n\\tfieldAlias.setWorkflow(false);\\n\\tif (! fieldAlias.get(current.field_alias)) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('This Field Alias does not exist'));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn;\\n\\t}\\n\\t// Get the type of the field. We handle two types of fields: choice fields and references\\n\\tvar table = new GlideRecord(fieldAlias.getValue('table'));\\n\\ttable.initialize();\\n\\tif (! table.isValid()) {\\n\\t\\tgs.addErrorMessage(gs.getMessage('Invalid table {0}', fieldAlias.getValue('table')));\\n\\t\\tcurrent.setAbortAction(true);\\n\\t\\treturn;\\n\\t}\\n\\tvar element = table.getElement(fieldAlias.getValue('field'));\\n\\tvar elementDescriptor = element.getED();\\n\\tvar isChoiceTable = elementDescriptor.isChoiceTable();\\n\\tvar isReference = elementDescriptor.isReference();\\n\\t\\n\\t// We only do this check on choice and reference fields\\n\\tif (isChoiceTable || isReference) {\\n\\t\\t\\n\\t\\tvar tableLabel = table.getClassDisplayValue();\\n\\t\\tvar fieldLabel = element.getLabel();\\n\\t\\t\\n\\t\\tif (isChoiceTable) {\\n\\t\\t\\t\\n\\t\\t\\tvar choiceList = new GlideChoiceListGenerator(elementDescriptor).get();\\n\\t\\t\\tif ( ! choiceList.getChoice(current.value)) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('The choice {0} does not exist for the {1}.{2} choice list', [current.value, tableLabel, fieldLabel]));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t} else {\\n\\n\\t\\t\\tvar tableGR = new GlideRecord(fieldAlias.getValue('table'));\\n\\t\\t\\tif (! tableGR.isValid()) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('There is something wrong with the {0} table', tableLabel));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\ttableGR.addQuery(fieldAlias.getValue('field'), current.value);\\n\\t\\t\\ttableGR.setWorkflow(false);\\n\\t\\t\\ttableGR.setLimit(1);\\n\\t\\t\\ttableGR.query();\\n\\t\\t\\tif (! tableGR.hasNext()) {\\n\\t\\t\\t\\tgs.addErrorMessage(gs.getMessage('No record exists in column {0}.{1} having the given reference', [tableLabel, fieldLabel]));\\n\\t\\t\\t\\tcurrent.setAbortAction(true);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n})(current, previous);\\n\",\n\t\"abort_action\": \"false\",\n\t\"filter_condition\": \"\",\n\t\"condition\": \"\",\n\t\"name\": \"Ensure Value from Value Alias exists\"\n}```"}